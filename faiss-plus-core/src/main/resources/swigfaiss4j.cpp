/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif



#include <stdint.h>
#include <omp.h>

#include "IndexFlat.h"
#include "VectorTransform.h"
#include "IndexLSH.h"
#include "IndexPQ.h"
#include "IndexIVF.h"
#include "IndexIVFPQ.h"
#include "IndexIVFFlat.h"
#include "IndexScalarQuantizer.h"
#include "HNSW.h"
#include "IndexHNSW.h"
#include "MetaIndexes.h"
#include "FaissAssert.h"

#include "IndexBinaryFlat.h"
#include "IndexBinaryIVF.h"
#include "IndexBinaryFromFloat.h"
#include "IndexBinaryHNSW.h"

#include "index_io.h"

#include "IVFlib.h"
#include "utils.h"
#include "Heap.h"
#include "AuxIndexStructures.h"
#include "OnDiskInvertedLists.h"

#include "Clustering.h"

#include "hamming.h"

#include "AutoTune.h"

 

#include <string>


int get_num_gpus()
{
    return 0;
}


faiss::Index * downcast_index (faiss::Index *index)
{
    return index;
}
faiss::VectorTransform * downcast_VectorTransform (faiss::VectorTransform *vt)
{
    return vt;
}
faiss::IndexBinary * downcast_IndexBinary (faiss::IndexBinary *index)
{
    return index;
}


float * cast_integer_to_float_ptr (long x) {
    return (float*)x;
}

long * cast_integer_to_long_ptr (long x) {
    return (long*)x;
}

int * cast_integer_to_int_ptr (long x) {
    return (int*)x;
}



// may be useful for lua code launched in background from shell

#include <signal.h>
void ignore_SIGTTIN() {
    signal(SIGTTIN, SIG_IGN);
}



// numpy misses a hash table implementation, hence this class. It
// represents not found values as -1 like in the Index implementation

struct MapLong2Long {
    std::unordered_map<long, long> map;

    void add(size_t n, const long *keys, const long *vals) {
        map.reserve(map.size() + n);
        for (size_t i = 0; i < n; i++) {
            map[keys[i]] = vals[i];
        }
    }

    long search(long key) {
        if (map.count(key) == 0) {
            return -1;
        } else {
            return map[key];
        }
    }

    void search_multiple(size_t n, const long *keys, long * vals) {
        for (size_t i = 0; i < n; i++) {
            vals[i] = search(keys[i]);
        }
    }
};



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1FloatVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< float > *)new std::vector< float >();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = (float *)(arg1)->data();
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = (size_t)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((std::vector< float > const *)arg1)->at(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVector_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1FloatVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1DoubleVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_DoubleVector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_DoubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jdoubleArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_DoubleVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (double *)(arg1)->data();
  jresult = SWIG_JavaArrayOutDouble(jenv, (double *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_DoubleVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (size_t)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_DoubleVector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (double)((std::vector< double > const *)arg1)->at(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_DoubleVector_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_DoubleVector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1DoubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ByteVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = (unsigned char *)(arg1)->data();
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = (size_t)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  size_t arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (unsigned char)((std::vector< uint8_t > const *)arg1)->at(arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVector_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = *(std::vector< unsigned char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned char > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1ByteVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1CharVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< char > *)new std::vector< char >();
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_CharVector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (char)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_CharVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jstring JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_CharVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = (char *)(arg1)->data();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_CharVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = (size_t)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_CharVector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jchar jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t arg2 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (char)((std::vector< char > const *)arg1)->at(arg2);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_CharVector_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_CharVector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1CharVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1Uint64Vector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< unsigned long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >();
  *(std::vector< unsigned long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Uint64Vector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Uint64Vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Uint64Vector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  result = (unsigned long *)(arg1)->data();
  *(unsigned long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Uint64Vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  result = (size_t)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Uint64Vector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t arg2 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (unsigned long)((std::vector< unsigned long > const *)arg1)->at(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Uint64Vector_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Uint64Vector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  arg2 = *(std::vector< unsigned long > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned long > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1Uint64Vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1LongVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< long > *)new std::vector< long >();
  *(std::vector< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = (long *)(arg1)->data();
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = (size_t)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (long)((std::vector< long > const *)arg1)->at(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVector_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = *(std::vector< long > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< long > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1LongVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< long > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IntVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IntVector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IntVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (int *)(arg1)->data();
  jresult = SWIG_JavaArrayOutInt(jenv, (int *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (size_t)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IntVector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (int)((std::vector< int > const *)arg1)->at(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IntVector_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IntVector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1VectorTransformVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< faiss::VectorTransform * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< faiss::VectorTransform * > *)new std::vector< faiss::VectorTransform * >();
  *(std::vector< faiss::VectorTransform * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransformVector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< faiss::VectorTransform * > *arg1 = (std::vector< faiss::VectorTransform * > *) 0 ;
  faiss::VectorTransform *arg2 = (faiss::VectorTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< faiss::VectorTransform * > **)&jarg1; 
  arg2 = *(faiss::VectorTransform **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransformVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< faiss::VectorTransform * > *arg1 = (std::vector< faiss::VectorTransform * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::VectorTransform * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransformVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< faiss::VectorTransform * > *arg1 = (std::vector< faiss::VectorTransform * > *) 0 ;
  faiss::VectorTransform **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::VectorTransform * > **)&jarg1; 
  result = (faiss::VectorTransform **)(arg1)->data();
  *(faiss::VectorTransform ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransformVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< faiss::VectorTransform * > *arg1 = (std::vector< faiss::VectorTransform * > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::VectorTransform * > **)&jarg1; 
  result = (size_t)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransformVector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< faiss::VectorTransform * > *arg1 = (std::vector< faiss::VectorTransform * > *) 0 ;
  size_t arg2 ;
  faiss::VectorTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::VectorTransform * > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::VectorTransform *)((std::vector< faiss::VectorTransform * > const *)arg1)->at(arg2);
  *(faiss::VectorTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransformVector_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< faiss::VectorTransform * > *arg1 = (std::vector< faiss::VectorTransform * > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::VectorTransform * > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransformVector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< faiss::VectorTransform * > *arg1 = (std::vector< faiss::VectorTransform * > *) 0 ;
  std::vector< faiss::VectorTransform * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< faiss::VectorTransform * > **)&jarg1; 
  arg2 = *(std::vector< faiss::VectorTransform * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< faiss::VectorTransform * > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1VectorTransformVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< faiss::VectorTransform * > *arg1 = (std::vector< faiss::VectorTransform * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< faiss::VectorTransform * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1OperatingPointVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< faiss::OperatingPoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< faiss::OperatingPoint > *)new std::vector< faiss::OperatingPoint >();
  *(std::vector< faiss::OperatingPoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPointVector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< faiss::OperatingPoint > *arg1 = (std::vector< faiss::OperatingPoint > *) 0 ;
  faiss::OperatingPoint arg2 ;
  faiss::OperatingPoint *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< faiss::OperatingPoint > **)&jarg1; 
  argp2 = *(faiss::OperatingPoint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null faiss::OperatingPoint");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPointVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< faiss::OperatingPoint > *arg1 = (std::vector< faiss::OperatingPoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::OperatingPoint > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPointVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< faiss::OperatingPoint > *arg1 = (std::vector< faiss::OperatingPoint > *) 0 ;
  faiss::OperatingPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::OperatingPoint > **)&jarg1; 
  result = (faiss::OperatingPoint *)(arg1)->data();
  *(faiss::OperatingPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPointVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< faiss::OperatingPoint > *arg1 = (std::vector< faiss::OperatingPoint > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::OperatingPoint > **)&jarg1; 
  result = (size_t)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPointVector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< faiss::OperatingPoint > *arg1 = (std::vector< faiss::OperatingPoint > *) 0 ;
  size_t arg2 ;
  faiss::OperatingPoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::OperatingPoint > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((std::vector< faiss::OperatingPoint > const *)arg1)->at(arg2);
  *(faiss::OperatingPoint **)&jresult = new faiss::OperatingPoint((const faiss::OperatingPoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPointVector_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< faiss::OperatingPoint > *arg1 = (std::vector< faiss::OperatingPoint > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::OperatingPoint > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPointVector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< faiss::OperatingPoint > *arg1 = (std::vector< faiss::OperatingPoint > *) 0 ;
  std::vector< faiss::OperatingPoint > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< faiss::OperatingPoint > **)&jarg1; 
  arg2 = *(std::vector< faiss::OperatingPoint > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< faiss::OperatingPoint > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1OperatingPointVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< faiss::OperatingPoint > *arg1 = (std::vector< faiss::OperatingPoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< faiss::OperatingPoint > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1InvertedListsPtrVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< faiss::InvertedLists * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< faiss::InvertedLists * > *)new std::vector< faiss::InvertedLists * >();
  *(std::vector< faiss::InvertedLists * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedListsPtrVector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< faiss::InvertedLists * > *arg1 = (std::vector< faiss::InvertedLists * > *) 0 ;
  faiss::InvertedLists *arg2 = (faiss::InvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< faiss::InvertedLists * > **)&jarg1; 
  arg2 = *(faiss::InvertedLists **)&jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedListsPtrVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< faiss::InvertedLists * > *arg1 = (std::vector< faiss::InvertedLists * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::InvertedLists * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedListsPtrVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< faiss::InvertedLists * > *arg1 = (std::vector< faiss::InvertedLists * > *) 0 ;
  faiss::InvertedLists **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::InvertedLists * > **)&jarg1; 
  result = (faiss::InvertedLists **)(arg1)->data();
  *(faiss::InvertedLists ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedListsPtrVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< faiss::InvertedLists * > *arg1 = (std::vector< faiss::InvertedLists * > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::InvertedLists * > **)&jarg1; 
  result = (size_t)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedListsPtrVector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< faiss::InvertedLists * > *arg1 = (std::vector< faiss::InvertedLists * > *) 0 ;
  size_t arg2 ;
  faiss::InvertedLists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::InvertedLists * > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::InvertedLists *)((std::vector< faiss::InvertedLists * > const *)arg1)->at(arg2);
  *(faiss::InvertedLists **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedListsPtrVector_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< faiss::InvertedLists * > *arg1 = (std::vector< faiss::InvertedLists * > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< faiss::InvertedLists * > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedListsPtrVector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< faiss::InvertedLists * > *arg1 = (std::vector< faiss::InvertedLists * > *) 0 ;
  std::vector< faiss::InvertedLists * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< faiss::InvertedLists * > **)&jarg1; 
  arg2 = *(std::vector< faiss::InvertedLists * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< faiss::InvertedLists * > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1InvertedListsPtrVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< faiss::InvertedLists * > *arg1 = (std::vector< faiss::InvertedLists * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< faiss::InvertedLists * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1FloatVectorVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< float > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< float > > *)new std::vector< std::vector< float > >();
  *(std::vector< std::vector< float > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVectorVector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< float > > **)&jarg1; 
  argp2 = *(std::vector< float > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< float >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVectorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< float > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVectorVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< float > > **)&jarg1; 
  result = (std::vector< float > *)(arg1)->data();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVectorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< float > > **)&jarg1; 
  result = (size_t)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVectorVector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t arg2 ;
  std::vector< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< float > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((std::vector< std::vector< float > > const *)arg1)->at(arg2);
  *(std::vector< float > **)&jresult = new std::vector< float >((const std::vector< float > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVectorVector_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< float > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FloatVectorVector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< std::vector< float > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< float > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< float > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< float > > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1FloatVectorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< float > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ByteVectorVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< unsigned char > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< unsigned char > > *)new std::vector< std::vector< unsigned char > >();
  *(std::vector< std::vector< unsigned char > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVectorVector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< unsigned char > > **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVectorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< unsigned char > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVectorVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< unsigned char > > **)&jarg1; 
  result = (std::vector< unsigned char > *)(arg1)->data();
  *(std::vector< unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVectorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< unsigned char > > **)&jarg1; 
  result = (size_t)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVectorVector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t arg2 ;
  std::vector< unsigned char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< unsigned char > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((std::vector< std::vector< unsigned char > > const *)arg1)->at(arg2);
  *(std::vector< unsigned char > **)&jresult = new std::vector< unsigned char >((const std::vector< unsigned char > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVectorVector_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< unsigned char > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ByteVectorVector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  std::vector< std::vector< unsigned char > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< unsigned char > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< unsigned char > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< unsigned char > > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1ByteVectorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< unsigned char > > *arg1 = (std::vector< std::vector< unsigned char > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< unsigned char > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1LongVectorVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< long > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< long > > *)new std::vector< std::vector< long > >();
  *(std::vector< std::vector< long > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVectorVector_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< long > > *arg1 = (std::vector< std::vector< long > > *) 0 ;
  std::vector< long > arg2 ;
  std::vector< long > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< long > > **)&jarg1; 
  argp2 = *(std::vector< long > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< long >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVectorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< long > > *arg1 = (std::vector< std::vector< long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVectorVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< long > > *arg1 = (std::vector< std::vector< long > > *) 0 ;
  std::vector< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long > > **)&jarg1; 
  result = (std::vector< long > *)(arg1)->data();
  *(std::vector< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVectorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< long > > *arg1 = (std::vector< std::vector< long > > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long > > **)&jarg1; 
  result = (size_t)(arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVectorVector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< long > > *arg1 = (std::vector< std::vector< long > > *) 0 ;
  size_t arg2 ;
  std::vector< long > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((std::vector< std::vector< long > > const *)arg1)->at(arg2);
  *(std::vector< long > **)&jresult = new std::vector< long >((const std::vector< long > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVectorVector_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< long > > *arg1 = (std::vector< std::vector< long > > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LongVectorVector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< long > > *arg1 = (std::vector< std::vector< long > > *) 0 ;
  std::vector< std::vector< long > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< long > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< long > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< long > > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1LongVectorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< long > > *arg1 = (std::vector< std::vector< long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< long > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_hamming_1batch_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  size_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  faiss::hamming_batch_size = arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_hamming_1batch_1size_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = (size_t)faiss::hamming_batch_size;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_popcount64(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  uint64_t arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint64_t)jarg1; 
  result = (int)faiss::popcount64(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_hammings(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jintArray jarg6) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  hamdis_t *arg6 = (hamdis_t *) 0 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr6, (int **)&arg6, jarg6)) return ; 
  faiss::hammings((unsigned char const *)arg1,(unsigned char const *)arg2,arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutInt(jenv, jarr6, (int *)arg6, jarg6); 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_bitvec_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  faiss::bitvec_print((unsigned char const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvecs2bitvecs(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  float *arg1 = (float *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  jfloat *jarr1 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  faiss::fvecs2bitvecs((float const *)arg1,arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec2bitvec(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jlong jarg2, jlong jarg3) {
  float *arg1 = (float *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  jfloat *jarr1 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  faiss::fvec2bitvec((float const *)arg1,arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_hammings_1knn_1hc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  faiss::int_maxheap_array_t *arg1 = (faiss::int_maxheap_array_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::int_maxheap_array_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (int)jarg6; 
  faiss::hammings_knn_hc(arg1,(unsigned char const *)arg2,(unsigned char const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_hammings_1knn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  faiss::int_maxheap_array_t *arg1 = (faiss::int_maxheap_array_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::int_maxheap_array_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (int)jarg6; 
  faiss::hammings_knn(arg1,(unsigned char const *)arg2,(unsigned char const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_hammings_1knn_1mc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jintArray jarg7, jintArray jarg8) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  int32_t *arg7 = (int32_t *) 0 ;
  long *arg8 = (long *) 0 ;
  jint *jarr7 ;
  jint *jarr8 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr7, (int **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr8, (long **)&arg8, jarg8)) return ; 
  faiss::hammings_knn_mc((unsigned char const *)arg1,(unsigned char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  SWIG_JavaArrayArgoutInt(jenv, jarr7, (int *)arg7, jarg7); 
  SWIG_JavaArrayArgoutLong(jenv, jarr8, (long *)arg8, jarg8); 
  delete [] arg7; 
  delete [] arg8; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_hamming_1count_1thres(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jlong jarg7) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  hamdis_t arg5 ;
  size_t arg6 ;
  size_t *arg7 = (size_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (hamdis_t)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = *(size_t **)&jarg7; 
  faiss::hamming_count_thres((unsigned char const *)arg1,(unsigned char const *)arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_match_1hamming_1thres(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jintArray jarg7, jintArray jarg8) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  hamdis_t arg5 ;
  size_t arg6 ;
  long *arg7 = (long *) 0 ;
  hamdis_t *arg8 = (hamdis_t *) 0 ;
  jint *jarr7 ;
  jint *jarr8 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (hamdis_t)jarg5; 
  arg6 = (size_t)jarg6; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr7, (long **)&arg7, jarg7)) return 0; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr8, (int **)&arg8, jarg8)) return 0; 
  result = (size_t)faiss::match_hamming_thres((unsigned char const *)arg1,(unsigned char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jlong)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr7, (long *)arg7, jarg7); 
  SWIG_JavaArrayArgoutInt(jenv, jarr8, (int *)arg8, jarg8); 
  delete [] arg7; 
  delete [] arg8; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_crosshamming_1count_1thres(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  hamdis_t arg3 ;
  size_t arg4 ;
  size_t *arg5 = (size_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (hamdis_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(size_t **)&jarg5; 
  faiss::crosshamming_count_thres((unsigned char const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer4_1a0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer4 *arg1 = (faiss::HammingComputer4 *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer4 **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->a0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer4_1a0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer4 *arg1 = (faiss::HammingComputer4 *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer4 **)&jarg1; 
  result =  ((arg1)->a0);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputer4_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HammingComputer4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HammingComputer4 *)new faiss::HammingComputer4();
  *(faiss::HammingComputer4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputer4_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  faiss::HammingComputer4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::HammingComputer4 *)new faiss::HammingComputer4((uint8_t const *)arg1,arg2);
  *(faiss::HammingComputer4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  faiss::HammingComputer4 *arg1 = (faiss::HammingComputer4 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer4 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set((uint8_t const *)arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer4_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::HammingComputer4 *arg1 = (faiss::HammingComputer4 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer4 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  result = (int)((faiss::HammingComputer4 const *)arg1)->hamming((uint8_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HammingComputer4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HammingComputer4 *arg1 = (faiss::HammingComputer4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HammingComputer4 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer8_1a0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer8 *arg1 = (faiss::HammingComputer8 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer8 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer8_1a0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer8 *arg1 = (faiss::HammingComputer8 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer8 **)&jarg1; 
  result = (uint64_t) ((arg1)->a0);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputer8_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HammingComputer8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HammingComputer8 *)new faiss::HammingComputer8();
  *(faiss::HammingComputer8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputer8_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  faiss::HammingComputer8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::HammingComputer8 *)new faiss::HammingComputer8((uint8_t const *)arg1,arg2);
  *(faiss::HammingComputer8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer8_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  faiss::HammingComputer8 *arg1 = (faiss::HammingComputer8 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer8 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set((uint8_t const *)arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer8_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::HammingComputer8 *arg1 = (faiss::HammingComputer8 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer8 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  result = (int)((faiss::HammingComputer8 const *)arg1)->hamming((uint8_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HammingComputer8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HammingComputer8 *arg1 = (faiss::HammingComputer8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HammingComputer8 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer16_1a0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer16 *arg1 = (faiss::HammingComputer16 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer16 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer16_1a0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer16 *arg1 = (faiss::HammingComputer16 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer16 **)&jarg1; 
  result = (uint64_t) ((arg1)->a0);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer16_1a1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer16 *arg1 = (faiss::HammingComputer16 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer16 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer16_1a1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer16 *arg1 = (faiss::HammingComputer16 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer16 **)&jarg1; 
  result = (uint64_t) ((arg1)->a1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputer16_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HammingComputer16 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HammingComputer16 *)new faiss::HammingComputer16();
  *(faiss::HammingComputer16 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputer16_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  faiss::HammingComputer16 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::HammingComputer16 *)new faiss::HammingComputer16((uint8_t const *)arg1,arg2);
  *(faiss::HammingComputer16 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer16_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  faiss::HammingComputer16 *arg1 = (faiss::HammingComputer16 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer16 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set((uint8_t const *)arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer16_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::HammingComputer16 *arg1 = (faiss::HammingComputer16 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer16 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  result = (int)((faiss::HammingComputer16 const *)arg1)->hamming((uint8_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HammingComputer16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HammingComputer16 *arg1 = (faiss::HammingComputer16 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HammingComputer16 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer20_1a0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer20 *arg1 = (faiss::HammingComputer20 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer20 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer20_1a0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer20 *arg1 = (faiss::HammingComputer20 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer20 **)&jarg1; 
  result = (uint64_t) ((arg1)->a0);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer20_1a1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer20 *arg1 = (faiss::HammingComputer20 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer20 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer20_1a1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer20 *arg1 = (faiss::HammingComputer20 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer20 **)&jarg1; 
  result = (uint64_t) ((arg1)->a1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer20_1a2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer20 *arg1 = (faiss::HammingComputer20 *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer20 **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->a2 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer20_1a2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer20 *arg1 = (faiss::HammingComputer20 *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer20 **)&jarg1; 
  result =  ((arg1)->a2);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputer20_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HammingComputer20 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HammingComputer20 *)new faiss::HammingComputer20();
  *(faiss::HammingComputer20 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputer20_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  faiss::HammingComputer20 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::HammingComputer20 *)new faiss::HammingComputer20((uint8_t const *)arg1,arg2);
  *(faiss::HammingComputer20 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer20_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  faiss::HammingComputer20 *arg1 = (faiss::HammingComputer20 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer20 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set((uint8_t const *)arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer20_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::HammingComputer20 *arg1 = (faiss::HammingComputer20 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer20 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  result = (int)((faiss::HammingComputer20 const *)arg1)->hamming((uint8_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HammingComputer20(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HammingComputer20 *arg1 = (faiss::HammingComputer20 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HammingComputer20 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer32_1a0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer32 *arg1 = (faiss::HammingComputer32 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer32 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer32_1a0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer32 *arg1 = (faiss::HammingComputer32 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer32 **)&jarg1; 
  result = (uint64_t) ((arg1)->a0);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer32_1a1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer32 *arg1 = (faiss::HammingComputer32 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer32 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer32_1a1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer32 *arg1 = (faiss::HammingComputer32 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer32 **)&jarg1; 
  result = (uint64_t) ((arg1)->a1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer32_1a2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer32 *arg1 = (faiss::HammingComputer32 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer32 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a2 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer32_1a2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer32 *arg1 = (faiss::HammingComputer32 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer32 **)&jarg1; 
  result = (uint64_t) ((arg1)->a2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer32_1a3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer32 *arg1 = (faiss::HammingComputer32 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer32 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a3 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer32_1a3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer32 *arg1 = (faiss::HammingComputer32 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer32 **)&jarg1; 
  result = (uint64_t) ((arg1)->a3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputer32_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HammingComputer32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HammingComputer32 *)new faiss::HammingComputer32();
  *(faiss::HammingComputer32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputer32_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  faiss::HammingComputer32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::HammingComputer32 *)new faiss::HammingComputer32((uint8_t const *)arg1,arg2);
  *(faiss::HammingComputer32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer32_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  faiss::HammingComputer32 *arg1 = (faiss::HammingComputer32 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer32 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set((uint8_t const *)arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer32_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::HammingComputer32 *arg1 = (faiss::HammingComputer32 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer32 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  result = (int)((faiss::HammingComputer32 const *)arg1)->hamming((uint8_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HammingComputer32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HammingComputer32 *arg1 = (faiss::HammingComputer32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HammingComputer32 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  result = (uint64_t) ((arg1)->a0);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  result = (uint64_t) ((arg1)->a1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a2 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  result = (uint64_t) ((arg1)->a2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a3 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  result = (uint64_t) ((arg1)->a3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a4 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  result = (uint64_t) ((arg1)->a4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a5_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a5 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a5_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  result = (uint64_t) ((arg1)->a5);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a6_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a6 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a6_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  result = (uint64_t) ((arg1)->a6);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a7_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a7 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1a7_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  result = (uint64_t) ((arg1)->a7);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputer64_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HammingComputer64 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HammingComputer64 *)new faiss::HammingComputer64();
  *(faiss::HammingComputer64 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputer64_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  faiss::HammingComputer64 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::HammingComputer64 *)new faiss::HammingComputer64((uint8_t const *)arg1,arg2);
  *(faiss::HammingComputer64 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set((uint8_t const *)arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputer64_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  result = (int)((faiss::HammingComputer64 const *)arg1)->hamming((uint8_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HammingComputer64(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HammingComputer64 *arg1 = (faiss::HammingComputer64 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HammingComputer64 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerDefault_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputerDefault *arg1 = (faiss::HammingComputerDefault *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerDefault **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (arg1) (arg1)->a = (uint8_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerDefault_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputerDefault *arg1 = (faiss::HammingComputerDefault *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerDefault **)&jarg1; 
  result = (uint8_t *) ((arg1)->a);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerDefault_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HammingComputerDefault *arg1 = (faiss::HammingComputerDefault *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerDefault **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerDefault_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HammingComputerDefault *arg1 = (faiss::HammingComputerDefault *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerDefault **)&jarg1; 
  result = (int) ((arg1)->n);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputerDefault_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HammingComputerDefault *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HammingComputerDefault *)new faiss::HammingComputerDefault();
  *(faiss::HammingComputerDefault **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputerDefault_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  faiss::HammingComputerDefault *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::HammingComputerDefault *)new faiss::HammingComputerDefault((uint8_t const *)arg1,arg2);
  *(faiss::HammingComputerDefault **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerDefault_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  faiss::HammingComputerDefault *arg1 = (faiss::HammingComputerDefault *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerDefault **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set((uint8_t const *)arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerDefault_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::HammingComputerDefault *arg1 = (faiss::HammingComputerDefault *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerDefault **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  result = (int)((faiss::HammingComputerDefault const *)arg1)->hamming((uint8_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HammingComputerDefault(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HammingComputerDefault *arg1 = (faiss::HammingComputerDefault *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HammingComputerDefault **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerM8_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputerM8 *arg1 = (faiss::HammingComputerM8 *) 0 ;
  uint64_t *arg2 = (uint64_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerM8 **)&jarg1; 
  arg2 = *(uint64_t **)&jarg2; 
  if (arg1) (arg1)->a = (uint64_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerM8_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputerM8 *arg1 = (faiss::HammingComputerM8 *) 0 ;
  uint64_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerM8 **)&jarg1; 
  result = (uint64_t *) ((arg1)->a);
  *(uint64_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerM8_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HammingComputerM8 *arg1 = (faiss::HammingComputerM8 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerM8 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerM8_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HammingComputerM8 *arg1 = (faiss::HammingComputerM8 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerM8 **)&jarg1; 
  result = (int) ((arg1)->n);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputerM8_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HammingComputerM8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HammingComputerM8 *)new faiss::HammingComputerM8();
  *(faiss::HammingComputerM8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputerM8_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  faiss::HammingComputerM8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::HammingComputerM8 *)new faiss::HammingComputerM8((uint8_t const *)arg1,arg2);
  *(faiss::HammingComputerM8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerM8_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  faiss::HammingComputerM8 *arg1 = (faiss::HammingComputerM8 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerM8 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set((uint8_t const *)arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerM8_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::HammingComputerM8 *arg1 = (faiss::HammingComputerM8 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerM8 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  result = (int)((faiss::HammingComputerM8 const *)arg1)->hamming((uint8_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HammingComputerM8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HammingComputerM8 *arg1 = (faiss::HammingComputerM8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HammingComputerM8 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerM4_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HammingComputerM4 *arg1 = (faiss::HammingComputerM4 *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerM4 **)&jarg1; 
  arg2 = *(uint32_t **)&jarg2; 
  if (arg1) (arg1)->a = (uint32_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerM4_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HammingComputerM4 *arg1 = (faiss::HammingComputerM4 *) 0 ;
  uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerM4 **)&jarg1; 
  result = (uint32_t *) ((arg1)->a);
  *(uint32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerM4_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HammingComputerM4 *arg1 = (faiss::HammingComputerM4 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerM4 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerM4_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HammingComputerM4 *arg1 = (faiss::HammingComputerM4 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerM4 **)&jarg1; 
  result = (int) ((arg1)->n);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputerM4_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HammingComputerM4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HammingComputerM4 *)new faiss::HammingComputerM4();
  *(faiss::HammingComputerM4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HammingComputerM4_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  faiss::HammingComputerM4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::HammingComputerM4 *)new faiss::HammingComputerM4((uint8_t const *)arg1,arg2);
  *(faiss::HammingComputerM4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerM4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  faiss::HammingComputerM4 *arg1 = (faiss::HammingComputerM4 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerM4 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set((uint8_t const *)arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HammingComputerM4_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::HammingComputerM4 *arg1 = (faiss::HammingComputerM4 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HammingComputerM4 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  result = (int)((faiss::HammingComputerM4 const *)arg1)->hamming((uint8_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HammingComputerM4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HammingComputerM4 *arg1 = (faiss::HammingComputerM4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HammingComputerM4 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_generalized_1hamming_164(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  uint64_t arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint64_t)jarg1; 
  result = (int)faiss::generalized_hamming_64(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer8_1a0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::GenHammingComputer8 *arg1 = (faiss::GenHammingComputer8 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer8 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer8_1a0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::GenHammingComputer8 *arg1 = (faiss::GenHammingComputer8 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer8 **)&jarg1; 
  result = (uint64_t) ((arg1)->a0);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1GenHammingComputer8(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  faiss::GenHammingComputer8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::GenHammingComputer8 *)new faiss::GenHammingComputer8((uint8_t const *)arg1,arg2);
  *(faiss::GenHammingComputer8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer8_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::GenHammingComputer8 *arg1 = (faiss::GenHammingComputer8 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer8 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  result = (int)((faiss::GenHammingComputer8 const *)arg1)->hamming((uint8_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1GenHammingComputer8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::GenHammingComputer8 *arg1 = (faiss::GenHammingComputer8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::GenHammingComputer8 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer16_1a0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::GenHammingComputer16 *arg1 = (faiss::GenHammingComputer16 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer16 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer16_1a0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::GenHammingComputer16 *arg1 = (faiss::GenHammingComputer16 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer16 **)&jarg1; 
  result = (uint64_t) ((arg1)->a0);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer16_1a1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::GenHammingComputer16 *arg1 = (faiss::GenHammingComputer16 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer16 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer16_1a1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::GenHammingComputer16 *arg1 = (faiss::GenHammingComputer16 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer16 **)&jarg1; 
  result = (uint64_t) ((arg1)->a1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1GenHammingComputer16(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  faiss::GenHammingComputer16 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::GenHammingComputer16 *)new faiss::GenHammingComputer16((uint8_t const *)arg1,arg2);
  *(faiss::GenHammingComputer16 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer16_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::GenHammingComputer16 *arg1 = (faiss::GenHammingComputer16 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer16 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  result = (int)((faiss::GenHammingComputer16 const *)arg1)->hamming((uint8_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1GenHammingComputer16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::GenHammingComputer16 *arg1 = (faiss::GenHammingComputer16 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::GenHammingComputer16 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer32_1a0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::GenHammingComputer32 *arg1 = (faiss::GenHammingComputer32 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer32 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer32_1a0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::GenHammingComputer32 *arg1 = (faiss::GenHammingComputer32 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer32 **)&jarg1; 
  result = (uint64_t) ((arg1)->a0);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer32_1a1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::GenHammingComputer32 *arg1 = (faiss::GenHammingComputer32 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer32 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer32_1a1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::GenHammingComputer32 *arg1 = (faiss::GenHammingComputer32 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer32 **)&jarg1; 
  result = (uint64_t) ((arg1)->a1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer32_1a2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::GenHammingComputer32 *arg1 = (faiss::GenHammingComputer32 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer32 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a2 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer32_1a2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::GenHammingComputer32 *arg1 = (faiss::GenHammingComputer32 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer32 **)&jarg1; 
  result = (uint64_t) ((arg1)->a2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer32_1a3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::GenHammingComputer32 *arg1 = (faiss::GenHammingComputer32 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer32 **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->a3 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer32_1a3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::GenHammingComputer32 *arg1 = (faiss::GenHammingComputer32 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer32 **)&jarg1; 
  result = (uint64_t) ((arg1)->a3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1GenHammingComputer32(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  faiss::GenHammingComputer32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::GenHammingComputer32 *)new faiss::GenHammingComputer32((uint8_t const *)arg1,arg2);
  *(faiss::GenHammingComputer32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputer32_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::GenHammingComputer32 *arg1 = (faiss::GenHammingComputer32 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputer32 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  result = (int)((faiss::GenHammingComputer32 const *)arg1)->hamming((uint8_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1GenHammingComputer32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::GenHammingComputer32 *arg1 = (faiss::GenHammingComputer32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::GenHammingComputer32 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputerM8_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::GenHammingComputerM8 *arg1 = (faiss::GenHammingComputerM8 *) 0 ;
  uint64_t *arg2 = (uint64_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputerM8 **)&jarg1; 
  arg2 = *(uint64_t **)&jarg2; 
  if (arg1) (arg1)->a = (uint64_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputerM8_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::GenHammingComputerM8 *arg1 = (faiss::GenHammingComputerM8 *) 0 ;
  uint64_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputerM8 **)&jarg1; 
  result = (uint64_t *) ((arg1)->a);
  *(uint64_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputerM8_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::GenHammingComputerM8 *arg1 = (faiss::GenHammingComputerM8 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputerM8 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputerM8_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::GenHammingComputerM8 *arg1 = (faiss::GenHammingComputerM8 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputerM8 **)&jarg1; 
  result = (int) ((arg1)->n);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1GenHammingComputerM8(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  faiss::GenHammingComputerM8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::GenHammingComputerM8 *)new faiss::GenHammingComputerM8((uint8_t const *)arg1,arg2);
  *(faiss::GenHammingComputerM8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_GenHammingComputerM8_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::GenHammingComputerM8 *arg1 = (faiss::GenHammingComputerM8 *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::GenHammingComputerM8 **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  result = (int)((faiss::GenHammingComputerM8 const *)arg1)->hamming((uint8_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1GenHammingComputerM8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::GenHammingComputerM8 *arg1 = (faiss::GenHammingComputerM8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::GenHammingComputerM8 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_generalized_1hammings_1knn_1hc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  faiss::int_maxheap_array_t *arg1 = (faiss::int_maxheap_array_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::int_maxheap_array_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (int)jarg6; 
  faiss::generalized_hammings_knn_hc(arg1,(unsigned char const *)arg2,(unsigned char const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_generalized_1hammings_1knn_1hc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  faiss::int_maxheap_array_t *arg1 = (faiss::int_maxheap_array_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::int_maxheap_array_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  faiss::generalized_hammings_knn_hc(arg1,(unsigned char const *)arg2,(unsigned char const *)arg3,arg4,arg5);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_get_1num_1gpus(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)get_num_gpus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_getmillisecs(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)faiss::getmillisecs();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_get_1mem_1usage_1kb(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = (size_t)faiss::get_mem_usage_kb();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RandomGenerator_1mt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::RandomGenerator *arg1 = (faiss::RandomGenerator *) 0 ;
  std::mt19937 arg2 ;
  std::mt19937 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RandomGenerator **)&jarg1; 
  argp2 = *(std::mt19937 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::mt19937");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mt = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RandomGenerator_1mt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::RandomGenerator *arg1 = (faiss::RandomGenerator *) 0 ;
  std::mt19937 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RandomGenerator **)&jarg1; 
  result =  ((arg1)->mt);
  *(std::mt19937 **)&jresult = new std::mt19937((const std::mt19937 &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RandomGenerator_1rand_1int_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::RandomGenerator *arg1 = (faiss::RandomGenerator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RandomGenerator **)&jarg1; 
  result = (int)(arg1)->rand_int();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RandomGenerator_1rand_1long(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::RandomGenerator *arg1 = (faiss::RandomGenerator *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RandomGenerator **)&jarg1; 
  result = (long)(arg1)->rand_long();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RandomGenerator_1rand_1int_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  faiss::RandomGenerator *arg1 = (faiss::RandomGenerator *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RandomGenerator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->rand_int(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RandomGenerator_1rand_1float(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  faiss::RandomGenerator *arg1 = (faiss::RandomGenerator *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RandomGenerator **)&jarg1; 
  result = (float)(arg1)->rand_float();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RandomGenerator_1rand_1double(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  faiss::RandomGenerator *arg1 = (faiss::RandomGenerator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RandomGenerator **)&jarg1; 
  result = (double)(arg1)->rand_double();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1RandomGenerator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  long arg1 ;
  faiss::RandomGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  result = (faiss::RandomGenerator *)new faiss::RandomGenerator(arg1);
  *(faiss::RandomGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1RandomGenerator_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::RandomGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::RandomGenerator *)new faiss::RandomGenerator();
  *(faiss::RandomGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1RandomGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::RandomGenerator *arg1 = (faiss::RandomGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::RandomGenerator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1rand(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jlong jarg2, jint jarg3) {
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  long arg3 ;
  jfloat *jarr1 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  arg2 = (size_t)jarg2; 
  arg3 = (long)jarg3; 
  faiss::float_rand(arg1,arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1randn(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jlong jarg2, jint jarg3) {
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  long arg3 ;
  jfloat *jarr1 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  arg2 = (size_t)jarg2; 
  arg3 = (long)jarg3; 
  faiss::float_randn(arg1,arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_long_1rand(JNIEnv *jenv, jclass jcls, jintArray jarg1, jlong jarg2, jint jarg3) {
  long *arg1 = (long *) 0 ;
  size_t arg2 ;
  long arg3 ;
  jint *jarr1 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInLong(jenv, &jarr1, (long **)&arg1, jarg1)) return ; 
  arg2 = (size_t)jarg2; 
  arg3 = (long)jarg3; 
  faiss::long_rand(arg1,arg2,arg3);
  SWIG_JavaArrayArgoutLong(jenv, jarr1, (long *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_byte_1rand(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  long arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (long)jarg3; 
  faiss::byte_rand(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_rand_1perm(JNIEnv *jenv, jclass jcls, jintArray jarg1, jlong jarg2, jint jarg3) {
  int *arg1 = (int *) 0 ;
  size_t arg2 ;
  long arg3 ;
  jint *jarr1 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInInt(jenv, &jarr1, (int **)&arg1, jarg1)) return ; 
  arg2 = (size_t)jarg2; 
  arg3 = (long)jarg3; 
  faiss::rand_perm(arg1,arg2,arg3);
  SWIG_JavaArrayArgoutInt(jenv, jarr1, (int *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1L2sqr(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jlong jarg3) {
  jfloat jresult = 0 ;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return 0; 
  arg3 = (size_t)jarg3; 
  result = (float)faiss::fvec_L2sqr((float const *)arg1,(float const *)arg2,arg3);
  jresult = (jfloat)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg1; 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1inner_1product(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jlong jarg3) {
  jfloat jresult = 0 ;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return 0; 
  arg3 = (size_t)jarg3; 
  result = (float)faiss::fvec_inner_product((float const *)arg1,(float const *)arg2,arg3);
  jresult = (jfloat)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg1; 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_imbalance_1factor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jintArray jarg3) {
  jdouble jresult = 0 ;
  int arg1 ;
  int arg2 ;
  long *arg3 = (long *) 0 ;
  jint *jarr3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return 0; 
  result = (double)faiss::imbalance_factor(arg1,arg2,(long const *)arg3);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_imbalance_1factor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jintArray jarg2) {
  jdouble jresult = 0 ;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  jint *jarr2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  result = (double)faiss::imbalance_factor(arg1,(int const *)arg2);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_pairwise_1L2sqr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jfloatArray jarg6, jint jarg7, jint jarg8, jint jarg9) {
  long arg1 ;
  long arg2 ;
  float *arg3 = (float *) 0 ;
  long arg4 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  long arg7 ;
  long arg8 ;
  long arg9 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jfloat *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = (long)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (long)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return ; 
  arg7 = (long)jarg7; 
  arg8 = (long)jarg8; 
  arg9 = (long)jarg9; 
  faiss::pairwise_L2sqr(arg1,arg2,(float const *)arg3,arg4,(float const *)arg5,arg6,arg7,arg8,arg9);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_pairwise_1L2sqr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jfloatArray jarg6, jint jarg7, jint jarg8) {
  long arg1 ;
  long arg2 ;
  float *arg3 = (float *) 0 ;
  long arg4 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  long arg7 ;
  long arg8 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jfloat *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = (long)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (long)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return ; 
  arg7 = (long)jarg7; 
  arg8 = (long)jarg8; 
  faiss::pairwise_L2sqr(arg1,arg2,(float const *)arg3,arg4,(float const *)arg5,arg6,arg7,arg8);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_pairwise_1L2sqr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jfloatArray jarg6, jint jarg7) {
  long arg1 ;
  long arg2 ;
  float *arg3 = (float *) 0 ;
  long arg4 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  long arg7 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jfloat *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = (long)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (long)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return ; 
  arg7 = (long)jarg7; 
  faiss::pairwise_L2sqr(arg1,arg2,(float const *)arg3,arg4,(float const *)arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_pairwise_1L2sqr_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jfloatArray jarg6) {
  long arg1 ;
  long arg2 ;
  float *arg3 = (float *) 0 ;
  long arg4 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jfloat *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = (long)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (long)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return ; 
  faiss::pairwise_L2sqr(arg1,arg2,(float const *)arg3,arg4,(float const *)arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1inner_1products_1ny(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jfloatArray jarg3, jlong jarg4, jlong jarg5) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  faiss::fvec_inner_products_ny(arg1,(float const *)arg2,(float const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg1; 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1L2sqr_1ny(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jfloatArray jarg3, jlong jarg4, jlong jarg5) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  faiss::fvec_L2sqr_ny(arg1,(float const *)arg2,(float const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg1; 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1norm_1L2sqr(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jlong jarg2) {
  jfloat jresult = 0 ;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  jfloat *jarr1 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return 0; 
  arg2 = (size_t)jarg2; 
  result = (float)faiss::fvec_norm_L2sqr((float const *)arg1,arg2);
  jresult = (jfloat)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1norms_1L2(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jlong jarg3, jlong jarg4) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  faiss::fvec_norms_L2(arg1,(float const *)arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg1; 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1norms_1L2sqr(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jlong jarg3, jlong jarg4) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  faiss::fvec_norms_L2sqr(arg1,(float const *)arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg1; 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1renorm_1L2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloatArray jarg3) {
  size_t arg1 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  faiss::fvec_renorm_L2(arg1,arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_inner_1product_1to_1L2sqr(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jfloatArray jarg3, jlong jarg4, jlong jarg5) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  faiss::inner_product_to_L2sqr(arg1,(float const *)arg2,(float const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg1; 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1inner_1products_1by_1idx(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jfloatArray jarg3, jintArray jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (size_t)jarg7; 
  faiss::fvec_inner_products_by_idx(arg1,(float const *)arg2,(float const *)arg3,(long const *)arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg1; 
  delete [] arg2; 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1L2sqr_1by_1idx(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jfloatArray jarg3, jintArray jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (size_t)jarg7; 
  faiss::fvec_L2sqr_by_idx(arg1,(float const *)arg2,(float const *)arg3,(long const *)arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg1; 
  delete [] arg2; 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_distance_1compute_1blas_1threshold_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  faiss::distance_compute_blas_threshold = arg1;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_distance_1compute_1blas_1threshold_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)faiss::distance_compute_blas_threshold;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_knn_1inner_1product(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  faiss::float_minheap_array_t *arg6 = (faiss::float_minheap_array_t *) 0 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = *(faiss::float_minheap_array_t **)&jarg6; 
  faiss::knn_inner_product((float const *)arg1,(float const *)arg2,arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg1; 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_knn_1L2sqr(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  faiss::float_maxheap_array_t *arg6 = (faiss::float_maxheap_array_t *) 0 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = *(faiss::float_maxheap_array_t **)&jarg6; 
  faiss::knn_L2sqr((float const *)arg1,(float const *)arg2,arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg1; 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_knn_1L2sqr_1base_1shift(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jfloatArray jarg7) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  faiss::float_maxheap_array_t *arg6 = (faiss::float_maxheap_array_t *) 0 ;
  float *arg7 = (float *) 0 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  jfloat *jarr7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = *(faiss::float_maxheap_array_t **)&jarg6; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  faiss::knn_L2sqr_base_shift((float const *)arg1,(float const *)arg2,arg3,arg4,arg5,arg6,(float const *)arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  delete [] arg1; 
  delete [] arg2; 
  delete [] arg7; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_knn_1inner_1products_1by_1idx(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jintArray jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  long *arg3 = (long *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  faiss::float_minheap_array_t *arg7 = (faiss::float_minheap_array_t *) 0 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return ; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = *(faiss::float_minheap_array_t **)&jarg7; 
  faiss::knn_inner_products_by_idx((float const *)arg1,(float const *)arg2,(long const *)arg3,arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  delete [] arg1; 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_knn_1L2sqr_1by_1idx(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jintArray jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  long *arg3 = (long *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  faiss::float_maxheap_array_t *arg7 = (faiss::float_maxheap_array_t *) 0 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return ; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = *(faiss::float_maxheap_array_t **)&jarg7; 
  faiss::knn_L2sqr_by_idx((float const *)arg1,(float const *)arg2,(long const *)arg3,arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  delete [] arg1; 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_range_1search_1L2sqr(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  float arg6 ;
  faiss::RangeSearchResult *arg7 = (faiss::RangeSearchResult *) 0 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = *(faiss::RangeSearchResult **)&jarg7; 
  faiss::range_search_L2sqr((float const *)arg1,(float const *)arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg1; 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_range_1search_1inner_1product(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  float arg6 ;
  faiss::RangeSearchResult *arg7 = (faiss::RangeSearchResult *) 0 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = *(faiss::RangeSearchResult **)&jarg7; 
  faiss::range_search_inner_product((float const *)arg1,(float const *)arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg1; 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1madd(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloatArray jarg2, jfloat jarg3, jfloatArray jarg4, jfloatArray jarg5) {
  size_t arg1 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  jfloat *jarr2 ;
  jfloat *jarr4 ;
  jfloat *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (float)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  faiss::fvec_madd(arg1,(float const *)arg2,arg3,(float const *)arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  delete [] arg2; 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1madd_1and_1argmin(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloatArray jarg2, jfloat jarg3, jfloatArray jarg4, jfloatArray jarg5) {
  jint jresult = 0 ;
  size_t arg1 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  jfloat *jarr2 ;
  jfloat *jarr4 ;
  jfloat *jarr5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return 0; 
  arg3 = (float)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return 0; 
  result = (int)faiss::fvec_madd_and_argmin(arg1,(float const *)arg2,arg3,(float const *)arg4,arg5);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  delete [] arg2; 
  delete [] arg4; 
  delete [] arg5; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_reflection(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  faiss::reflection((float const *)arg1,arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg1; 
  delete [] arg2; 
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_km_1update_1centroids(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jfloatArray jarg2, jintArray jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  long *arg3 = (long *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  jfloat *jarr1 ;
  jfloat *jarr2 ;
  jint *jarr3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return 0; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return 0; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (size_t)jarg7; 
  result = (int)faiss::km_update_centroids((float const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  delete [] arg1; 
  delete [] arg2; 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_matrix_1qr(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jfloatArray jarg3) {
  int arg1 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  faiss::matrix_qr(arg1,arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ranklist_1handle_1ties(JNIEnv *jenv, jclass jcls, jint jarg1, jintArray jarg2, jfloatArray jarg3) {
  int arg1 ;
  long *arg2 = (long *) 0 ;
  float *arg3 = (float *) 0 ;
  jint *jarr2 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  faiss::ranklist_handle_ties(arg1,arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ranklist_1intersection_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2, jlong jarg3, jintArray jarg4) {
  jlong jresult = 0 ;
  size_t arg1 ;
  long *arg2 = (long *) 0 ;
  size_t arg3 ;
  long *arg4 = (long *) 0 ;
  jint *jarr2 ;
  jint *jarr4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return 0; 
  arg3 = (size_t)jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return 0; 
  result = (size_t)faiss::ranklist_intersection_size(arg1,(long const *)arg2,arg3,(long const *)arg4);
  jresult = (jlong)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg2; 
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_merge_1result_1table_1with_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jintArray jarg3, jfloatArray jarg4, jintArray jarg5, jfloatArray jarg6, jboolean jarg7, jint jarg8) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  long *arg3 = (long *) 0 ;
  float *arg4 = (float *) 0 ;
  long *arg5 = (long *) 0 ;
  float *arg6 = (float *) 0 ;
  bool arg7 ;
  long arg8 ;
  jint *jarr3 ;
  jfloat *jarr4 ;
  jint *jarr5 ;
  jfloat *jarr6 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return 0; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return 0; 
  arg7 = jarg7 ? true : false; 
  arg8 = (long)jarg8; 
  result = (size_t)faiss::merge_result_table_with(arg1,arg2,arg3,arg4,(long const *)arg5,(float const *)arg6,arg7,arg8);
  jresult = (jlong)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
  delete [] arg6; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_merge_1result_1table_1with_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jintArray jarg3, jfloatArray jarg4, jintArray jarg5, jfloatArray jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  long *arg3 = (long *) 0 ;
  float *arg4 = (float *) 0 ;
  long *arg5 = (long *) 0 ;
  float *arg6 = (float *) 0 ;
  bool arg7 ;
  jint *jarr3 ;
  jfloat *jarr4 ;
  jint *jarr5 ;
  jfloat *jarr6 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return 0; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return 0; 
  arg7 = jarg7 ? true : false; 
  result = (size_t)faiss::merge_result_table_with(arg1,arg2,arg3,arg4,(long const *)arg5,(float const *)arg6,arg7);
  jresult = (jlong)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
  delete [] arg6; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_merge_1result_1table_1with_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jintArray jarg3, jfloatArray jarg4, jintArray jarg5, jfloatArray jarg6) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  long *arg3 = (long *) 0 ;
  float *arg4 = (float *) 0 ;
  long *arg5 = (long *) 0 ;
  float *arg6 = (float *) 0 ;
  jint *jarr3 ;
  jfloat *jarr4 ;
  jint *jarr5 ;
  jfloat *jarr6 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return 0; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return 0; 
  result = (size_t)faiss::merge_result_table_with(arg1,arg2,arg3,arg4,(long const *)arg5,(float const *)arg6);
  jresult = (jlong)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
  delete [] arg6; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1argsort(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloatArray jarg2, jlong jarg3) {
  size_t arg1 ;
  float *arg2 = (float *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = *(size_t **)&jarg3; 
  faiss::fvec_argsort(arg1,(float const *)arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvec_1argsort_1parallel(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloatArray jarg2, jlong jarg3) {
  size_t arg1 ;
  float *arg2 = (float *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = *(size_t **)&jarg3; 
  faiss::fvec_argsort_parallel(arg1,(float const *)arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ivec_1hist(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2, jint jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  size_t arg1 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  jint *jarr2 ;
  jint *jarr4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  arg3 = (int)jarg3; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, (int **)&arg4, jarg4)) return 0; 
  result = (int)faiss::ivec_hist(arg1,(int const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  SWIG_JavaArrayArgoutInt(jenv, jarr4, (int *)arg4, jarg4); 
  delete [] arg2; 
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_bincode_1hist(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jintArray jarg4) {
  size_t arg1 ;
  size_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  int *arg4 = (int *) 0 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, (int **)&arg4, jarg4)) return ; 
  faiss::bincode_hist(arg1,arg2,(unsigned char const *)arg3,arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr4, (int *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ivec_1checksum(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  int *arg2 = (int *) 0 ;
  jint *jarr2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  result = (size_t)faiss::ivec_checksum(arg1,(int const *)arg2);
  jresult = (jlong)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvecs_1maybe_1subsample_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jfloatArray jarg4, jboolean jarg5, jint jarg6) {
  jfloatArray jresult = 0 ;
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  bool arg5 ;
  long arg6 ;
  jfloat *jarr4 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = *(size_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return 0; 
  arg5 = jarg5 ? true : false; 
  arg6 = (long)jarg6; 
  result = (float *)faiss::fvecs_maybe_subsample(arg1,arg2,arg3,(float const *)arg4,arg5,arg6);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvecs_1maybe_1subsample_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jfloatArray jarg4, jboolean jarg5) {
  jfloatArray jresult = 0 ;
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  bool arg5 ;
  jfloat *jarr4 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = *(size_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return 0; 
  arg5 = jarg5 ? true : false; 
  result = (float *)faiss::fvecs_maybe_subsample(arg1,arg2,arg3,(float const *)arg4,arg5);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_fvecs_1maybe_1subsample_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jfloatArray jarg4) {
  jfloatArray jresult = 0 ;
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = *(size_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return 0; 
  result = (float *)faiss::fvecs_maybe_subsample(arg1,arg2,arg3,(float const *)arg4);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_binary_1to_1real(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloatArray jarg3) {
  size_t arg1 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  faiss::binary_to_real(arg1,(unsigned char const *)arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_real_1to_1binary(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloatArray jarg2, jlong jarg3) {
  size_t arg1 ;
  float *arg2 = (float *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = *(uint8_t **)&jarg3; 
  faiss::real_to_binary(arg1,(float const *)arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FAISS_1VERSION_1MAJOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FAISS_1VERSION_1MINOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_FAISS_1VERSION_1PATCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_METRIC_1INNER_1PRODUCT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  faiss::MetricType result;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::MetricType)faiss::METRIC_INNER_PRODUCT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_METRIC_1L2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  faiss::MetricType result;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::MetricType)faiss::METRIC_L2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (int) ((arg1)->d);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1ntotal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index::idx_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (arg1) (arg1)->ntotal = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1ntotal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (faiss::Index::idx_t) ((arg1)->ntotal);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1verbose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verbose = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1verbose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (bool) ((arg1)->verbose);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1is_1trained_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_trained = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1is_1trained_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (bool) ((arg1)->is_trained);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1metric_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::MetricType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (faiss::MetricType)jarg2; 
  if (arg1) (arg1)->metric_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1metric_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::MetricType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (faiss::MetricType) ((arg1)->metric_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1Index(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::Index **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1add_1with_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add_with_ids(arg2,(float const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::Index const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1range_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  faiss::RangeSearchResult *arg5 = (faiss::RangeSearchResult *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (float)jarg4; 
  arg5 = *(faiss::RangeSearchResult **)&jarg5; 
  ((faiss::Index const *)arg1)->range_search(arg2,(float const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1assign_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4, jint jarg5) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t *arg4 = (faiss::Index::idx_t *) 0 ;
  faiss::Index::idx_t arg5 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (faiss::Index::idx_t)jarg5; 
  (arg1)->assign(arg2,(float const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1assign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t *arg4 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->assign(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1remove_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::IDSelector *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = *(faiss::IDSelector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IDSelector const & reference is null");
    return 0;
  } 
  result = (long)(arg1)->remove_ids((faiss::IDSelector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::Index const *)arg1)->reconstruct(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1reconstruct_1n(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloatArray jarg4) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index::idx_t arg2 ;
  faiss::Index::idx_t arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  arg3 = (faiss::Index::idx_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::Index const *)arg1)->reconstruct_n(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1search_1and_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6, jfloatArray jarg7) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  float *arg7 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  jfloat *jarr7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  ((faiss::Index const *)arg1)->search_and_reconstruct(arg2,(float const *)arg3,arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1compute_1residual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jfloatArray jarg3, jint jarg4) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  jfloat *jarr2 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  ((faiss::Index const *)arg1)->compute_residual((float const *)arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index_1display(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  ((faiss::Index const *)arg1)->display();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1niter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->niter = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1niter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  result = (int) ((arg1)->niter);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1nredo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nredo = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1nredo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  result = (int) ((arg1)->nredo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1verbose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verbose = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1verbose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  result = (bool) ((arg1)->verbose);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1spherical_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->spherical = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1spherical_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  result = (bool) ((arg1)->spherical);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1update_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->update_index = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1update_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  result = (bool) ((arg1)->update_index);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1frozen_1centroids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->frozen_centroids = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1frozen_1centroids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  result = (bool) ((arg1)->frozen_centroids);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1min_1points_1per_1centroid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->min_points_per_centroid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1min_1points_1per_1centroid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  result = (int) ((arg1)->min_points_per_centroid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1max_1points_1per_1centroid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_points_per_centroid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1max_1points_1per_1centroid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  result = (int) ((arg1)->max_points_per_centroid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1seed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->seed = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ClusteringParameters_1seed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  result = (int) ((arg1)->seed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ClusteringParameters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::ClusteringParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::ClusteringParameters *)new faiss::ClusteringParameters();
  *(faiss::ClusteringParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1ClusteringParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::ClusteringParameters *arg1 = (faiss::ClusteringParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::ClusteringParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Clustering_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::Clustering *arg1 = (faiss::Clustering *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Clustering **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Clustering_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Clustering *arg1 = (faiss::Clustering *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Clustering **)&jarg1; 
  result = (size_t) ((arg1)->d);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Clustering_1k_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::Clustering *arg1 = (faiss::Clustering *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Clustering **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->k = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Clustering_1k_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Clustering *arg1 = (faiss::Clustering *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Clustering **)&jarg1; 
  result = (size_t) ((arg1)->k);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Clustering_1centroids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::Clustering *arg1 = (faiss::Clustering *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Clustering **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->centroids = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Clustering_1centroids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Clustering *arg1 = (faiss::Clustering *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Clustering **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->centroids);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Clustering_1obj_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::Clustering *arg1 = (faiss::Clustering *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Clustering **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->obj = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Clustering_1obj_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Clustering *arg1 = (faiss::Clustering *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Clustering **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->obj);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1Clustering_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  faiss::Clustering *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::Clustering *)new faiss::Clustering(arg1,arg2);
  *(faiss::Clustering **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1Clustering_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  faiss::ClusteringParameters *arg3 = 0 ;
  faiss::Clustering *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(faiss::ClusteringParameters **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::ClusteringParameters const & reference is null");
    return 0;
  } 
  result = (faiss::Clustering *)new faiss::Clustering(arg1,arg2,(faiss::ClusteringParameters const &)*arg3);
  *(faiss::Clustering **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Clustering_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jlong jarg4, jobject jarg4_) {
  faiss::Clustering *arg1 = (faiss::Clustering *) 0 ;
  faiss::Clustering::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index *arg4 = 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(faiss::Clustering **)&jarg1; 
  arg2 = (faiss::Clustering::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = *(faiss::Index **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::Index & reference is null");
    return ;
  } 
  (arg1)->train(arg2,(float const *)arg3,*arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1Clustering(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::Clustering *arg1 = (faiss::Clustering *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::Clustering **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_kmeans_1clustering(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jfloatArray jarg4, jfloatArray jarg5) {
  jfloat jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  jfloat *jarr4 ;
  jfloat *jarr5 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return 0; 
  result = (float)faiss::kmeans_clustering(arg1,arg2,arg3,(float const *)arg4,arg5);
  jresult = (jfloat)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  delete [] arg4; 
  delete [] arg5; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  result = (size_t) ((arg1)->d);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1M_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->M = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1M_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  result = (size_t) ((arg1)->M);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1nbits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nbits = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1nbits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  result = (size_t) ((arg1)->nbits);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1dsub_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->dsub = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1dsub_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  result = (size_t) ((arg1)->dsub);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1byte_1per_1idx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->byte_per_idx = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1byte_1per_1idx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  result = (size_t) ((arg1)->byte_per_idx);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1code_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->code_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1code_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  result = (size_t) ((arg1)->code_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1ksub_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->ksub = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1ksub_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  result = (size_t) ((arg1)->ksub);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1verbose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verbose = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1verbose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  result = (bool) ((arg1)->verbose);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1train_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  faiss::ProductQuantizer::train_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = (faiss::ProductQuantizer::train_type_t)jarg2; 
  if (arg1) (arg1)->train_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1train_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  faiss::ProductQuantizer::train_type_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  result = (faiss::ProductQuantizer::train_type_t) ((arg1)->train_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1cp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  faiss::ClusteringParameters *arg2 = (faiss::ClusteringParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = *(faiss::ClusteringParameters **)&jarg2; 
  if (arg1) (arg1)->cp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1cp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  faiss::ClusteringParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  result = (faiss::ClusteringParameters *)& ((arg1)->cp);
  *(faiss::ClusteringParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1assign_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  if (arg1) (arg1)->assign_index = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1assign_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  result = (faiss::Index *) ((arg1)->assign_index);
  *(faiss::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1centroids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->centroids = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1centroids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->centroids);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1get_1centroids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jfloatArray jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (float *)(arg1)->get_centroids(arg2,arg3);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ProductQuantizer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::ProductQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (faiss::ProductQuantizer *)new faiss::ProductQuantizer(arg1,arg2,arg3);
  *(faiss::ProductQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ProductQuantizer_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::ProductQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::ProductQuantizer *)new faiss::ProductQuantizer();
  *(faiss::ProductQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1set_1derived_1values(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  (arg1)->set_derived_values();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1set_1params(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jint jarg3) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (int)jarg3; 
  (arg1)->set_params((float const *)arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1compute_1code(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  float *arg2 = (float *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = *(uint8_t **)&jarg3; 
  ((faiss::ProductQuantizer const *)arg1)->compute_code((float const *)arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1compute_1codes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3, jlong jarg4) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  float *arg2 = (float *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (size_t)jarg4; 
  ((faiss::ProductQuantizer const *)arg1)->compute_codes((float const *)arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1decode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::ProductQuantizer const *)arg1)->decode((uint8_t const *)arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1decode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jlong jarg4) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  float *arg3 = (float *) 0 ;
  size_t arg4 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (size_t)jarg4; 
  ((faiss::ProductQuantizer const *)arg1)->decode((uint8_t const *)arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1compute_1code_1from_1distance_1table(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  float *arg2 = (float *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = *(uint8_t **)&jarg3; 
  ((faiss::ProductQuantizer const *)arg1)->compute_code_from_distance_table((float const *)arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1compute_1distance_1table(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jfloatArray jarg3) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr2 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::ProductQuantizer const *)arg1)->compute_distance_table((float const *)arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1compute_1inner_1prod_1table(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jfloatArray jarg3) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr2 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::ProductQuantizer const *)arg1)->compute_inner_prod_table((float const *)arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1compute_1distance_1tables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::ProductQuantizer const *)arg1)->compute_distance_tables(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1compute_1inner_1prod_1tables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::ProductQuantizer const *)arg1)->compute_inner_prod_tables(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1search_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  size_t arg5 ;
  faiss::float_maxheap_array_t *arg6 = (faiss::float_maxheap_array_t *) 0 ;
  bool arg7 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (size_t)jarg3; 
  arg4 = *(uint8_t **)&jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = *(faiss::float_maxheap_array_t **)&jarg6; 
  arg7 = jarg7 ? true : false; 
  ((faiss::ProductQuantizer const *)arg1)->search((float const *)arg2,arg3,(uint8_t const *)arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1search_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  size_t arg5 ;
  faiss::float_maxheap_array_t *arg6 = (faiss::float_maxheap_array_t *) 0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (size_t)jarg3; 
  arg4 = *(uint8_t **)&jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = *(faiss::float_maxheap_array_t **)&jarg6; 
  ((faiss::ProductQuantizer const *)arg1)->search((float const *)arg2,arg3,(uint8_t const *)arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1search_1ip_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  size_t arg5 ;
  faiss::float_minheap_array_t *arg6 = (faiss::float_minheap_array_t *) 0 ;
  bool arg7 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (size_t)jarg3; 
  arg4 = *(uint8_t **)&jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = *(faiss::float_minheap_array_t **)&jarg6; 
  arg7 = jarg7 ? true : false; 
  ((faiss::ProductQuantizer const *)arg1)->search_ip((float const *)arg2,arg3,(uint8_t const *)arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1search_1ip_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  size_t arg5 ;
  faiss::float_minheap_array_t *arg6 = (faiss::float_minheap_array_t *) 0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (size_t)jarg3; 
  arg4 = *(uint8_t **)&jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = *(faiss::float_minheap_array_t **)&jarg6; 
  ((faiss::ProductQuantizer const *)arg1)->search_ip((float const *)arg2,arg3,(uint8_t const *)arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1sdc_1table_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->sdc_table = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1sdc_1table_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->sdc_table);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1compute_1sdc_1table(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  (arg1)->compute_sdc_table();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1search_1sdc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  size_t arg5 ;
  faiss::float_maxheap_array_t *arg6 = (faiss::float_maxheap_array_t *) 0 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(uint8_t **)&jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = *(faiss::float_maxheap_array_t **)&jarg6; 
  arg7 = jarg7 ? true : false; 
  ((faiss::ProductQuantizer const *)arg1)->search_sdc((uint8_t const *)arg2,arg3,(uint8_t const *)arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ProductQuantizer_1search_1sdc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  size_t arg5 ;
  faiss::float_maxheap_array_t *arg6 = (faiss::float_maxheap_array_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(uint8_t **)&jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = *(faiss::float_maxheap_array_t **)&jarg6; 
  ((faiss::ProductQuantizer const *)arg1)->search_sdc((uint8_t const *)arg2,arg3,(uint8_t const *)arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1ProductQuantizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransform_1d_1in_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->d_in = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransform_1d_1in_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  result = (int) ((arg1)->d_in);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransform_1d_1out_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->d_out = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransform_1d_1out_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  result = (int) ((arg1)->d_out);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransform_1is_1trained_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_trained = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransform_1is_1trained_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  result = (bool) ((arg1)->is_trained);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransform_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  faiss::VectorTransform::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  arg2 = (faiss::VectorTransform::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransform_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  jfloatArray jresult = 0 ;
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  faiss::VectorTransform::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  arg2 = (faiss::VectorTransform::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return 0; 
  result = (float *)((faiss::VectorTransform const *)arg1)->apply(arg2,(float const *)arg3);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransform_1apply_1noalloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  faiss::VectorTransform::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  arg2 = (faiss::VectorTransform::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::VectorTransform const *)arg1)->apply_noalloc(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorTransform_1reverse_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  faiss::VectorTransform::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  arg2 = (faiss::VectorTransform::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::VectorTransform const *)arg1)->reverse_transform(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1VectorTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1have_1bias_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->have_bias = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1have_1bias_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  result = (bool) ((arg1)->have_bias);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1is_1orthonormal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_orthonormal = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1is_1orthonormal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  result = (bool) ((arg1)->is_orthonormal);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1A_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->A = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1A_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->A);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->b = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->b);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1LinearTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  faiss::LinearTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (faiss::LinearTransform *)new faiss::LinearTransform(arg1,arg2,arg3);
  *(faiss::LinearTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1LinearTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  faiss::LinearTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::LinearTransform *)new faiss::LinearTransform(arg1,arg2);
  *(faiss::LinearTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1LinearTransform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  faiss::LinearTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (faiss::LinearTransform *)new faiss::LinearTransform(arg1);
  *(faiss::LinearTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1LinearTransform_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::LinearTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::LinearTransform *)new faiss::LinearTransform();
  *(faiss::LinearTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1apply_1noalloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  faiss::VectorTransform::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  arg2 = (faiss::VectorTransform::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::LinearTransform const *)arg1)->apply_noalloc(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1transform_1transpose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  faiss::VectorTransform::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  arg2 = (faiss::VectorTransform::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::LinearTransform const *)arg1)->transform_transpose(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1reverse_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  faiss::VectorTransform::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  arg2 = (faiss::VectorTransform::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::LinearTransform const *)arg1)->reverse_transform(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1set_1is_1orthonormal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  (arg1)->set_is_orthonormal();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1verbose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verbose = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1verbose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  result = (bool) ((arg1)->verbose);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1LinearTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::LinearTransform *arg1 = (faiss::LinearTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::LinearTransform **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1RandomRotationMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  faiss::RandomRotationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::RandomRotationMatrix *)new faiss::RandomRotationMatrix(arg1,arg2);
  *(faiss::RandomRotationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RandomRotationMatrix_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::RandomRotationMatrix *arg1 = (faiss::RandomRotationMatrix *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RandomRotationMatrix **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->init(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RandomRotationMatrix_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::RandomRotationMatrix *arg1 = (faiss::RandomRotationMatrix *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RandomRotationMatrix **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1RandomRotationMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::RandomRotationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::RandomRotationMatrix *)new faiss::RandomRotationMatrix();
  *(faiss::RandomRotationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1RandomRotationMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::RandomRotationMatrix *arg1 = (faiss::RandomRotationMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::RandomRotationMatrix **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1eigen_1power_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->eigen_power = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1eigen_1power_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  result = (float) ((arg1)->eigen_power);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1random_1rotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->random_rotation = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1random_1rotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  result = (bool) ((arg1)->random_rotation);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1max_1points_1per_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->max_points_per_d = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1max_1points_1per_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  result = (size_t) ((arg1)->max_points_per_d);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1balanced_1bins_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->balanced_bins = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1balanced_1bins_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  result = (int) ((arg1)->balanced_bins);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1mean_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->mean = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1mean_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->mean);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1eigenvalues_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->eigenvalues = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1eigenvalues_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->eigenvalues);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1PCAMat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->PCAMat = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1PCAMat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->PCAMat);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1PCAMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jfloat jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  float arg3 ;
  bool arg4 ;
  faiss::PCAMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (faiss::PCAMatrix *)new faiss::PCAMatrix(arg1,arg2,arg3,arg4);
  *(faiss::PCAMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1PCAMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  float arg3 ;
  faiss::PCAMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (faiss::PCAMatrix *)new faiss::PCAMatrix(arg1,arg2,arg3);
  *(faiss::PCAMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1PCAMatrix_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  faiss::PCAMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::PCAMatrix *)new faiss::PCAMatrix(arg1,arg2);
  *(faiss::PCAMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1PCAMatrix_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  faiss::PCAMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (faiss::PCAMatrix *)new faiss::PCAMatrix(arg1);
  *(faiss::PCAMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1PCAMatrix_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::PCAMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::PCAMatrix *)new faiss::PCAMatrix();
  *(faiss::PCAMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1copy_1from(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  faiss::PCAMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  arg2 = *(faiss::PCAMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::PCAMatrix const & reference is null");
    return ;
  } 
  (arg1)->copy_from((faiss::PCAMatrix const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1prepare_1Ab(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  (arg1)->prepare_Ab();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1PCAMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::PCAMatrix *arg1 = (faiss::PCAMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::PCAMatrix **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1M_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->M = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1M_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  result = (int) ((arg1)->M);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1niter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->niter = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1niter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  result = (int) ((arg1)->niter);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1niter_1pq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->niter_pq = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1niter_1pq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  result = (int) ((arg1)->niter_pq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1niter_1pq_10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->niter_pq_0 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1niter_1pq_10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  result = (int) ((arg1)->niter_pq_0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1max_1train_1points_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->max_train_points = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1max_1train_1points_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  result = (size_t) ((arg1)->max_train_points);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1verbose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verbose = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1verbose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  result = (bool) ((arg1)->verbose);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1pq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  faiss::ProductQuantizer *arg2 = (faiss::ProductQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  arg2 = *(faiss::ProductQuantizer **)&jarg2; 
  if (arg1) (arg1)->pq = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1pq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  faiss::ProductQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  result = (faiss::ProductQuantizer *) ((arg1)->pq);
  *(faiss::ProductQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1OPQMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  faiss::OPQMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (faiss::OPQMatrix *)new faiss::OPQMatrix(arg1,arg2,arg3);
  *(faiss::OPQMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1OPQMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  faiss::OPQMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::OPQMatrix *)new faiss::OPQMatrix(arg1,arg2);
  *(faiss::OPQMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1OPQMatrix_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  faiss::OPQMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (faiss::OPQMatrix *)new faiss::OPQMatrix(arg1);
  *(faiss::OPQMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1OPQMatrix_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::OPQMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::OPQMatrix *)new faiss::OPQMatrix();
  *(faiss::OPQMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1OPQMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::OPQMatrix *arg1 = (faiss::OPQMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::OPQMatrix **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RemapDimensionsTransform_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::RemapDimensionsTransform *arg1 = (faiss::RemapDimensionsTransform *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::RemapDimensionsTransform **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2; 
  if (arg1) (arg1)->map = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RemapDimensionsTransform_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::RemapDimensionsTransform *arg1 = (faiss::RemapDimensionsTransform *) 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RemapDimensionsTransform **)&jarg1; 
  result = (std::vector< int > *)& ((arg1)->map);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1RemapDimensionsTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jintArray jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  jint *jarr3 ;
  faiss::RemapDimensionsTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return 0; 
  result = (faiss::RemapDimensionsTransform *)new faiss::RemapDimensionsTransform(arg1,arg2,(int const *)arg3);
  *(faiss::RemapDimensionsTransform **)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1RemapDimensionsTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  faiss::RemapDimensionsTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (faiss::RemapDimensionsTransform *)new faiss::RemapDimensionsTransform(arg1,arg2,arg3);
  *(faiss::RemapDimensionsTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1RemapDimensionsTransform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  faiss::RemapDimensionsTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::RemapDimensionsTransform *)new faiss::RemapDimensionsTransform(arg1,arg2);
  *(faiss::RemapDimensionsTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RemapDimensionsTransform_1apply_1noalloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::RemapDimensionsTransform *arg1 = (faiss::RemapDimensionsTransform *) 0 ;
  faiss::VectorTransform::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RemapDimensionsTransform **)&jarg1; 
  arg2 = (faiss::VectorTransform::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::RemapDimensionsTransform const *)arg1)->apply_noalloc(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RemapDimensionsTransform_1reverse_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::RemapDimensionsTransform *arg1 = (faiss::RemapDimensionsTransform *) 0 ;
  faiss::VectorTransform::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RemapDimensionsTransform **)&jarg1; 
  arg2 = (faiss::VectorTransform::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::RemapDimensionsTransform const *)arg1)->reverse_transform(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1RemapDimensionsTransform_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::RemapDimensionsTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::RemapDimensionsTransform *)new faiss::RemapDimensionsTransform();
  *(faiss::RemapDimensionsTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1RemapDimensionsTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::RemapDimensionsTransform *arg1 = (faiss::RemapDimensionsTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::RemapDimensionsTransform **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_NormalizationTransform_1norm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  faiss::NormalizationTransform *arg1 = (faiss::NormalizationTransform *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::NormalizationTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->norm = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_NormalizationTransform_1norm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  faiss::NormalizationTransform *arg1 = (faiss::NormalizationTransform *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::NormalizationTransform **)&jarg1; 
  result = (float) ((arg1)->norm);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1NormalizationTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  float arg2 ;
  faiss::NormalizationTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  result = (faiss::NormalizationTransform *)new faiss::NormalizationTransform(arg1,arg2);
  *(faiss::NormalizationTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1NormalizationTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  faiss::NormalizationTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (faiss::NormalizationTransform *)new faiss::NormalizationTransform(arg1);
  *(faiss::NormalizationTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1NormalizationTransform_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::NormalizationTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::NormalizationTransform *)new faiss::NormalizationTransform();
  *(faiss::NormalizationTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_NormalizationTransform_1apply_1noalloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::NormalizationTransform *arg1 = (faiss::NormalizationTransform *) 0 ;
  faiss::VectorTransform::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::NormalizationTransform **)&jarg1; 
  arg2 = (faiss::VectorTransform::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::NormalizationTransform const *)arg1)->apply_noalloc(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_NormalizationTransform_1reverse_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::NormalizationTransform *arg1 = (faiss::NormalizationTransform *) 0 ;
  faiss::VectorTransform::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::NormalizationTransform **)&jarg1; 
  arg2 = (faiss::VectorTransform::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::NormalizationTransform const *)arg1)->reverse_transform(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1NormalizationTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::NormalizationTransform *arg1 = (faiss::NormalizationTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::NormalizationTransform **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1chain_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  std::vector< faiss::VectorTransform * > *arg2 = (std::vector< faiss::VectorTransform * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = *(std::vector< faiss::VectorTransform * > **)&jarg2; 
  if (arg1) (arg1)->chain = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1chain_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  std::vector< faiss::VectorTransform * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  result = (std::vector< faiss::VectorTransform * > *)& ((arg1)->chain);
  *(std::vector< faiss::VectorTransform * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  result = (faiss::Index *) ((arg1)->index);
  *(faiss::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1own_1fields_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->own_fields = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1own_1fields_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  result = (bool) ((arg1)->own_fields);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexPreTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::IndexPreTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (faiss::IndexPreTransform *)new faiss::IndexPreTransform(arg1);
  *(faiss::IndexPreTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexPreTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexPreTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexPreTransform *)new faiss::IndexPreTransform();
  *(faiss::IndexPreTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexPreTransform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  faiss::IndexPreTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  result = (faiss::IndexPreTransform *)new faiss::IndexPreTransform(arg1,arg2);
  *(faiss::IndexPreTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1prepend_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  faiss::VectorTransform *arg2 = (faiss::VectorTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = *(faiss::VectorTransform **)&jarg2; 
  (arg1)->prepend_transform(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1add_1with_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add_with_ids(arg2,(float const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1remove_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  faiss::IDSelector *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = *(faiss::IDSelector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IDSelector const & reference is null");
    return 0;
  } 
  result = (long)(arg1)->remove_ids((faiss::IDSelector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexPreTransform const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::IndexPreTransform const *)arg1)->reconstruct(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1reconstruct_1n(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloatArray jarg4) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  faiss::Index::idx_t arg2 ;
  faiss::Index::idx_t arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  arg3 = (faiss::Index::idx_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::IndexPreTransform const *)arg1)->reconstruct_n(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1search_1and_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6, jfloatArray jarg7) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  float *arg7 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  jfloat *jarr7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  ((faiss::IndexPreTransform const *)arg1)->search_and_reconstruct(arg2,(float const *)arg3,arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1apply_1chain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  jfloatArray jresult = 0 ;
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return 0; 
  result = (float *)((faiss::IndexPreTransform const *)arg1)->apply_chain(arg2,(float const *)arg3);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1reverse_1chain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::IndexPreTransform const *)arg1)->reverse_chain(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexPreTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexPreTransform *arg1 = (faiss::IndexPreTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexPreTransform **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat_1xb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexFlat *arg1 = (faiss::IndexFlat *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexFlat **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->xb = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat_1xb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexFlat *arg1 = (faiss::IndexFlat *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlat **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->xb);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexFlat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  faiss::Index::idx_t arg1 ;
  faiss::MetricType arg2 ;
  faiss::IndexFlat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::Index::idx_t)jarg1; 
  arg2 = (faiss::MetricType)jarg2; 
  result = (faiss::IndexFlat *)new faiss::IndexFlat(arg1,arg2);
  *(faiss::IndexFlat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexFlat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  faiss::Index::idx_t arg1 ;
  faiss::IndexFlat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::Index::idx_t)jarg1; 
  result = (faiss::IndexFlat *)new faiss::IndexFlat(arg1);
  *(faiss::IndexFlat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexFlat *arg1 = (faiss::IndexFlat *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlat **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexFlat *arg1 = (faiss::IndexFlat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlat **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexFlat *arg1 = (faiss::IndexFlat *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlat **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexFlat const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat_1range_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_) {
  faiss::IndexFlat *arg1 = (faiss::IndexFlat *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  faiss::RangeSearchResult *arg5 = (faiss::RangeSearchResult *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(faiss::IndexFlat **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (float)jarg4; 
  arg5 = *(faiss::RangeSearchResult **)&jarg5; 
  ((faiss::IndexFlat const *)arg1)->range_search(arg2,(float const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexFlat *arg1 = (faiss::IndexFlat *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlat **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::IndexFlat const *)arg1)->reconstruct(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat_1compute_1distance_1subset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexFlat *arg1 = (faiss::IndexFlat *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlat **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexFlat const *)arg1)->compute_distance_subset(arg2,(float const *)arg3,arg4,arg5,(faiss::Index::idx_t const *)arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat_1remove_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  faiss::IndexFlat *arg1 = (faiss::IndexFlat *) 0 ;
  faiss::IDSelector *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexFlat **)&jarg1; 
  arg2 = *(faiss::IDSelector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IDSelector const & reference is null");
    return 0;
  } 
  result = (long)(arg1)->remove_ids((faiss::IDSelector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexFlat_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexFlat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexFlat *)new faiss::IndexFlat();
  *(faiss::IndexFlat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexFlat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexFlat *arg1 = (faiss::IndexFlat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexFlat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexFlatIP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  faiss::Index::idx_t arg1 ;
  faiss::IndexFlatIP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::Index::idx_t)jarg1; 
  result = (faiss::IndexFlatIP *)new faiss::IndexFlatIP(arg1);
  *(faiss::IndexFlatIP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexFlatIP_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexFlatIP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexFlatIP *)new faiss::IndexFlatIP();
  *(faiss::IndexFlatIP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexFlatIP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexFlatIP *arg1 = (faiss::IndexFlatIP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexFlatIP **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexFlatL2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  faiss::Index::idx_t arg1 ;
  faiss::IndexFlatL2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::Index::idx_t)jarg1; 
  result = (faiss::IndexFlatL2 *)new faiss::IndexFlatL2(arg1);
  *(faiss::IndexFlatL2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexFlatL2_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexFlatL2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexFlatL2 *)new faiss::IndexFlatL2();
  *(faiss::IndexFlatL2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexFlatL2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexFlatL2 *arg1 = (faiss::IndexFlatL2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexFlatL2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlatL2BaseShift_1shift_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexFlatL2BaseShift *arg1 = (faiss::IndexFlatL2BaseShift *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexFlatL2BaseShift **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->shift = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlatL2BaseShift_1shift_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexFlatL2BaseShift *arg1 = (faiss::IndexFlatL2BaseShift *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlatL2BaseShift **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->shift);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexFlatL2BaseShift(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jfloatArray jarg3) {
  jlong jresult = 0 ;
  faiss::Index::idx_t arg1 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  faiss::IndexFlatL2BaseShift *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::Index::idx_t)jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return 0; 
  result = (faiss::IndexFlatL2BaseShift *)new faiss::IndexFlatL2BaseShift(arg1,arg2,(float const *)arg3);
  *(faiss::IndexFlatL2BaseShift **)&jresult = result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlatL2BaseShift_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexFlatL2BaseShift *arg1 = (faiss::IndexFlatL2BaseShift *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlatL2BaseShift **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexFlatL2BaseShift const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexFlatL2BaseShift(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexFlatL2BaseShift *arg1 = (faiss::IndexFlatL2BaseShift *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexFlatL2BaseShift **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexRefineFlat_1refine_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexRefineFlat *arg1 = (faiss::IndexRefineFlat *) 0 ;
  faiss::IndexFlat *arg2 = (faiss::IndexFlat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexRefineFlat **)&jarg1; 
  arg2 = *(faiss::IndexFlat **)&jarg2; 
  if (arg1) (arg1)->refine_index = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexRefineFlat_1refine_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexRefineFlat *arg1 = (faiss::IndexRefineFlat *) 0 ;
  faiss::IndexFlat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexRefineFlat **)&jarg1; 
  result = (faiss::IndexFlat *)& ((arg1)->refine_index);
  *(faiss::IndexFlat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexRefineFlat_1base_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexRefineFlat *arg1 = (faiss::IndexRefineFlat *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexRefineFlat **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  if (arg1) (arg1)->base_index = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexRefineFlat_1base_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexRefineFlat *arg1 = (faiss::IndexRefineFlat *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexRefineFlat **)&jarg1; 
  result = (faiss::Index *) ((arg1)->base_index);
  *(faiss::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexRefineFlat_1own_1fields_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexRefineFlat *arg1 = (faiss::IndexRefineFlat *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexRefineFlat **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->own_fields = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexRefineFlat_1own_1fields_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexRefineFlat *arg1 = (faiss::IndexRefineFlat *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexRefineFlat **)&jarg1; 
  result = (bool) ((arg1)->own_fields);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexRefineFlat_1k_1factor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  faiss::IndexRefineFlat *arg1 = (faiss::IndexRefineFlat *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexRefineFlat **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->k_factor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexRefineFlat_1k_1factor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  faiss::IndexRefineFlat *arg1 = (faiss::IndexRefineFlat *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexRefineFlat **)&jarg1; 
  result = (float) ((arg1)->k_factor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexRefineFlat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::IndexRefineFlat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (faiss::IndexRefineFlat *)new faiss::IndexRefineFlat(arg1);
  *(faiss::IndexRefineFlat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexRefineFlat_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexRefineFlat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexRefineFlat *)new faiss::IndexRefineFlat();
  *(faiss::IndexRefineFlat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexRefineFlat_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexRefineFlat *arg1 = (faiss::IndexRefineFlat *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexRefineFlat **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexRefineFlat_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexRefineFlat *arg1 = (faiss::IndexRefineFlat *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexRefineFlat **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexRefineFlat_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexRefineFlat *arg1 = (faiss::IndexRefineFlat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexRefineFlat **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexRefineFlat_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexRefineFlat *arg1 = (faiss::IndexRefineFlat *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexRefineFlat **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexRefineFlat const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexRefineFlat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexRefineFlat *arg1 = (faiss::IndexRefineFlat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexRefineFlat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat1D_1continuous_1update_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexFlat1D *arg1 = (faiss::IndexFlat1D *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlat1D **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->continuous_update = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat1D_1continuous_1update_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexFlat1D *arg1 = (faiss::IndexFlat1D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlat1D **)&jarg1; 
  result = (bool) ((arg1)->continuous_update);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat1D_1perm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexFlat1D *arg1 = (faiss::IndexFlat1D *) 0 ;
  std::vector< faiss::Index::idx_t > *arg2 = (std::vector< faiss::Index::idx_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexFlat1D **)&jarg1; 
  arg2 = *(std::vector< faiss::Index::idx_t > **)&jarg2; 
  if (arg1) (arg1)->perm = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat1D_1perm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexFlat1D *arg1 = (faiss::IndexFlat1D *) 0 ;
  std::vector< faiss::Index::idx_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlat1D **)&jarg1; 
  result = (std::vector< faiss::Index::idx_t > *)& ((arg1)->perm);
  *(std::vector< faiss::Index::idx_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexFlat1D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  faiss::IndexFlat1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (faiss::IndexFlat1D *)new faiss::IndexFlat1D(arg1);
  *(faiss::IndexFlat1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexFlat1D_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexFlat1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexFlat1D *)new faiss::IndexFlat1D();
  *(faiss::IndexFlat1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat1D_1update_1permutation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexFlat1D *arg1 = (faiss::IndexFlat1D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlat1D **)&jarg1; 
  (arg1)->update_permutation();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat1D_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexFlat1D *arg1 = (faiss::IndexFlat1D *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlat1D **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat1D_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexFlat1D *arg1 = (faiss::IndexFlat1D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlat1D **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat1D_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexFlat1D *arg1 = (faiss::IndexFlat1D *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexFlat1D **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexFlat1D const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexFlat1D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexFlat1D *arg1 = (faiss::IndexFlat1D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexFlat1D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1nbits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nbits = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1nbits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  result = (int) ((arg1)->nbits);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1bytes_1per_1vec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bytes_per_vec = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1bytes_1per_1vec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  result = (int) ((arg1)->bytes_per_vec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1rotate_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->rotate_data = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1rotate_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  result = (bool) ((arg1)->rotate_data);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1train_1thresholds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->train_thresholds = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1train_1thresholds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  result = (bool) ((arg1)->train_thresholds);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1rrot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  faiss::RandomRotationMatrix *arg2 = (faiss::RandomRotationMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  arg2 = *(faiss::RandomRotationMatrix **)&jarg2; 
  if (arg1) (arg1)->rrot = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1rrot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  faiss::RandomRotationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  result = (faiss::RandomRotationMatrix *)& ((arg1)->rrot);
  *(faiss::RandomRotationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1thresholds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->thresholds = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1thresholds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->thresholds);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1codes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  std::vector< faiss::IndexLSH::uint8_t > *arg2 = (std::vector< faiss::IndexLSH::uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  arg2 = *(std::vector< faiss::IndexLSH::uint8_t > **)&jarg2; 
  if (arg1) (arg1)->codes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1codes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  std::vector< faiss::IndexLSH::uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  result = (std::vector< faiss::IndexLSH::uint8_t > *)& ((arg1)->codes);
  *(std::vector< faiss::IndexLSH::uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexLSH_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  faiss::Index::idx_t arg1 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  faiss::IndexLSH *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::Index::idx_t)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (faiss::IndexLSH *)new faiss::IndexLSH(arg1,arg2,arg3,arg4);
  *(faiss::IndexLSH **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexLSH_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  faiss::Index::idx_t arg1 ;
  int arg2 ;
  bool arg3 ;
  faiss::IndexLSH *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::Index::idx_t)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (faiss::IndexLSH *)new faiss::IndexLSH(arg1,arg2,arg3);
  *(faiss::IndexLSH **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexLSH_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  faiss::Index::idx_t arg1 ;
  int arg2 ;
  faiss::IndexLSH *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::Index::idx_t)jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::IndexLSH *)new faiss::IndexLSH(arg1,arg2);
  *(faiss::IndexLSH **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1apply_1preprocess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  jfloatArray jresult = 0 ;
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return 0; 
  result = (float *)((faiss::IndexLSH const *)arg1)->apply_preprocess(arg2,(float const *)arg3);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexLSH const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1transfer_1thresholds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  faiss::LinearTransform *arg2 = (faiss::LinearTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  arg2 = *(faiss::LinearTransform **)&jarg2; 
  (arg1)->transfer_thresholds(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexLSH(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexLSH *arg1 = (faiss::IndexLSH *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexLSH **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexLSH_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexLSH *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexLSH *)new faiss::IndexLSH();
  *(faiss::IndexLSH **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1init_1temperature_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->init_temperature = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1init_1temperature_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  result = (double) ((arg1)->init_temperature);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1temperature_1decay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->temperature_decay = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1temperature_1decay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  result = (double) ((arg1)->temperature_decay);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1n_1iter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n_iter = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1n_1iter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  result = (int) ((arg1)->n_iter);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1n_1redo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n_redo = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1n_1redo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  result = (int) ((arg1)->n_redo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1seed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->seed = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1seed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  result = (int) ((arg1)->seed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1verbose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->verbose = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1verbose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  result = (int) ((arg1)->verbose);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1only_1bit_1flips_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->only_bit_flips = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1only_1bit_1flips_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  result = (bool) ((arg1)->only_bit_flips);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1init_1random_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->init_random = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingParameters_1init_1random_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  result = (bool) ((arg1)->init_random);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1SimulatedAnnealingParameters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::SimulatedAnnealingParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::SimulatedAnnealingParameters *)new faiss::SimulatedAnnealingParameters();
  *(faiss::SimulatedAnnealingParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1SimulatedAnnealingParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::SimulatedAnnealingParameters *arg1 = (faiss::SimulatedAnnealingParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::SimulatedAnnealingParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PermutationObjective_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::PermutationObjective *arg1 = (faiss::PermutationObjective *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PermutationObjective **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PermutationObjective_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::PermutationObjective *arg1 = (faiss::PermutationObjective *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PermutationObjective **)&jarg1; 
  result = (int) ((arg1)->n);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PermutationObjective_1compute_1cost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jdouble jresult = 0 ;
  faiss::PermutationObjective *arg1 = (faiss::PermutationObjective *) 0 ;
  int *arg2 = (int *) 0 ;
  jint *jarr2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PermutationObjective **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  result = (double)((faiss::PermutationObjective const *)arg1)->compute_cost((int const *)arg2);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PermutationObjective_1cost_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ;
  faiss::PermutationObjective *arg1 = (faiss::PermutationObjective *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  jint *jarr2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PermutationObjective **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (double)((faiss::PermutationObjective const *)arg1)->cost_update((int const *)arg2,arg3,arg4);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1PermutationObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::PermutationObjective *arg1 = (faiss::PermutationObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::PermutationObjective **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1dis_1weight_1factor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dis_weight_factor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1dis_1weight_1factor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  result = (double) ((arg1)->dis_weight_factor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1sqr(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)faiss::ReproduceDistancesObjective::sqr(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1dis_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((faiss::ReproduceDistancesObjective const *)arg1)->dis_weight(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1source_1dis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->source_dis = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1source_1dis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->source_dis);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1target_1dis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  double *arg2 = (double *) 0 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->target_dis = (double const *)arg2;
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1target_1dis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  result = (double *) ((arg1)->target_dis);
  jresult = SWIG_JavaArrayOutDouble(jenv, (double *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1weights_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->weights = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1weights_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->weights);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1get_1source_1dis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)((faiss::ReproduceDistancesObjective const *)arg1)->get_source_dis(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1compute_1cost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jdouble jresult = 0 ;
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  int *arg2 = (int *) 0 ;
  jint *jarr2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  result = (double)((faiss::ReproduceDistancesObjective const *)arg1)->compute_cost((int const *)arg2);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1cost_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ;
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  jint *jarr2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (double)((faiss::ReproduceDistancesObjective const *)arg1)->cost_update((int const *)arg2,arg3,arg4);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ReproduceDistancesObjective(JNIEnv *jenv, jclass jcls, jint jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double arg4 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  faiss::ReproduceDistancesObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return 0; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return 0; 
  arg4 = (double)jarg4; 
  result = (faiss::ReproduceDistancesObjective *)new faiss::ReproduceDistancesObjective(arg1,(double const *)arg2,(double const *)arg3,arg4);
  *(faiss::ReproduceDistancesObjective **)&jresult = result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1compute_1mean_1stdev(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  jdouble *jarr1 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInDouble(jenv, &jarr1, (double **)&arg1, jarg1)) return ; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, (double **)&arg4, jarg4)) return ; 
  faiss::ReproduceDistancesObjective::compute_mean_stdev((double const *)arg1,arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr1, (double *)arg1, jarg1); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, (double *)arg4, jarg4); 
  delete [] arg1; 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1set_1affine_1target_1dis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  double *arg2 = (double *) 0 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  (arg1)->set_affine_target_dis((double const *)arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1ReproduceDistancesObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::ReproduceDistancesObjective *arg1 = (faiss::ReproduceDistancesObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::ReproduceDistancesObjective **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingOptimizer_1obj_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::SimulatedAnnealingOptimizer *arg1 = (faiss::SimulatedAnnealingOptimizer *) 0 ;
  faiss::PermutationObjective *arg2 = (faiss::PermutationObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::SimulatedAnnealingOptimizer **)&jarg1; 
  arg2 = *(faiss::PermutationObjective **)&jarg2; 
  if (arg1) (arg1)->obj = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingOptimizer_1obj_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::SimulatedAnnealingOptimizer *arg1 = (faiss::SimulatedAnnealingOptimizer *) 0 ;
  faiss::PermutationObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingOptimizer **)&jarg1; 
  result = (faiss::PermutationObjective *) ((arg1)->obj);
  *(faiss::PermutationObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingOptimizer_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::SimulatedAnnealingOptimizer *arg1 = (faiss::SimulatedAnnealingOptimizer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingOptimizer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingOptimizer_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::SimulatedAnnealingOptimizer *arg1 = (faiss::SimulatedAnnealingOptimizer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingOptimizer **)&jarg1; 
  result = (int) ((arg1)->n);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingOptimizer_1logfile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::SimulatedAnnealingOptimizer *arg1 = (faiss::SimulatedAnnealingOptimizer *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingOptimizer **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  if (arg1) (arg1)->logfile = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingOptimizer_1logfile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::SimulatedAnnealingOptimizer *arg1 = (faiss::SimulatedAnnealingOptimizer *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingOptimizer **)&jarg1; 
  result = (FILE *) ((arg1)->logfile);
  *(FILE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1SimulatedAnnealingOptimizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  faiss::PermutationObjective *arg1 = (faiss::PermutationObjective *) 0 ;
  faiss::SimulatedAnnealingParameters *arg2 = 0 ;
  faiss::SimulatedAnnealingOptimizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::PermutationObjective **)&jarg1; 
  arg2 = *(faiss::SimulatedAnnealingParameters **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::SimulatedAnnealingParameters const & reference is null");
    return 0;
  } 
  result = (faiss::SimulatedAnnealingOptimizer *)new faiss::SimulatedAnnealingOptimizer(arg1,(faiss::SimulatedAnnealingParameters const &)*arg2);
  *(faiss::SimulatedAnnealingOptimizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingOptimizer_1rnd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::SimulatedAnnealingOptimizer *arg1 = (faiss::SimulatedAnnealingOptimizer *) 0 ;
  faiss::RandomGenerator *arg2 = (faiss::RandomGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::SimulatedAnnealingOptimizer **)&jarg1; 
  arg2 = *(faiss::RandomGenerator **)&jarg2; 
  if (arg1) (arg1)->rnd = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingOptimizer_1rnd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::SimulatedAnnealingOptimizer *arg1 = (faiss::SimulatedAnnealingOptimizer *) 0 ;
  faiss::RandomGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingOptimizer **)&jarg1; 
  result = (faiss::RandomGenerator *) ((arg1)->rnd);
  *(faiss::RandomGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingOptimizer_1init_1cost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  faiss::SimulatedAnnealingOptimizer *arg1 = (faiss::SimulatedAnnealingOptimizer *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingOptimizer **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->init_cost = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingOptimizer_1init_1cost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  faiss::SimulatedAnnealingOptimizer *arg1 = (faiss::SimulatedAnnealingOptimizer *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingOptimizer **)&jarg1; 
  result = (double) ((arg1)->init_cost);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingOptimizer_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jdouble jresult = 0 ;
  faiss::SimulatedAnnealingOptimizer *arg1 = (faiss::SimulatedAnnealingOptimizer *) 0 ;
  int *arg2 = (int *) 0 ;
  jint *jarr2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingOptimizer **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  result = (double)(arg1)->optimize(arg2);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingOptimizer_1run_1optimization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jdouble jresult = 0 ;
  faiss::SimulatedAnnealingOptimizer *arg1 = (faiss::SimulatedAnnealingOptimizer *) 0 ;
  int *arg2 = (int *) 0 ;
  jint *jarr2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::SimulatedAnnealingOptimizer **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return 0; 
  result = (double)(arg1)->run_optimization(arg2);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1SimulatedAnnealingOptimizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::SimulatedAnnealingOptimizer *arg1 = (faiss::SimulatedAnnealingOptimizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::SimulatedAnnealingOptimizer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PolysemousTraining_1optimization_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::PolysemousTraining *arg1 = (faiss::PolysemousTraining *) 0 ;
  faiss::PolysemousTraining::Optimization_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PolysemousTraining **)&jarg1; 
  arg2 = (faiss::PolysemousTraining::Optimization_type_t)jarg2; 
  if (arg1) (arg1)->optimization_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PolysemousTraining_1optimization_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::PolysemousTraining *arg1 = (faiss::PolysemousTraining *) 0 ;
  faiss::PolysemousTraining::Optimization_type_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PolysemousTraining **)&jarg1; 
  result = (faiss::PolysemousTraining::Optimization_type_t) ((arg1)->optimization_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PolysemousTraining_1ntrain_1permutation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::PolysemousTraining *arg1 = (faiss::PolysemousTraining *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PolysemousTraining **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ntrain_permutation = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PolysemousTraining_1ntrain_1permutation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::PolysemousTraining *arg1 = (faiss::PolysemousTraining *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PolysemousTraining **)&jarg1; 
  result = (int) ((arg1)->ntrain_permutation);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PolysemousTraining_1dis_1weight_1factor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  faiss::PolysemousTraining *arg1 = (faiss::PolysemousTraining *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PolysemousTraining **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dis_weight_factor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PolysemousTraining_1dis_1weight_1factor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  faiss::PolysemousTraining *arg1 = (faiss::PolysemousTraining *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PolysemousTraining **)&jarg1; 
  result = (double) ((arg1)->dis_weight_factor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PolysemousTraining_1log_1pattern_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  faiss::PolysemousTraining *arg1 = (faiss::PolysemousTraining *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PolysemousTraining **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->log_pattern = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PolysemousTraining_1log_1pattern_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  faiss::PolysemousTraining *arg1 = (faiss::PolysemousTraining *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::PolysemousTraining **)&jarg1; 
  result = (std::string *) & ((arg1)->log_pattern);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1PolysemousTraining(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::PolysemousTraining *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::PolysemousTraining *)new faiss::PolysemousTraining();
  *(faiss::PolysemousTraining **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PolysemousTraining_1optimize_1pq_1for_1hamming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jfloatArray jarg4) {
  faiss::PolysemousTraining *arg1 = (faiss::PolysemousTraining *) 0 ;
  faiss::ProductQuantizer *arg2 = 0 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::PolysemousTraining **)&jarg1; 
  arg2 = *(faiss::ProductQuantizer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::ProductQuantizer & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::PolysemousTraining const *)arg1)->optimize_pq_for_hamming(*arg2,arg3,(float const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PolysemousTraining_1optimize_1ranking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jfloatArray jarg4) {
  faiss::PolysemousTraining *arg1 = (faiss::PolysemousTraining *) 0 ;
  faiss::ProductQuantizer *arg2 = 0 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::PolysemousTraining **)&jarg1; 
  arg2 = *(faiss::ProductQuantizer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::ProductQuantizer & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::PolysemousTraining const *)arg1)->optimize_ranking(*arg2,arg3,(float const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PolysemousTraining_1optimize_1reproduce_1distances(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::PolysemousTraining *arg1 = (faiss::PolysemousTraining *) 0 ;
  faiss::ProductQuantizer *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::PolysemousTraining **)&jarg1; 
  arg2 = *(faiss::ProductQuantizer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::ProductQuantizer & reference is null");
    return ;
  } 
  ((faiss::PolysemousTraining const *)arg1)->optimize_reproduce_distances(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1PolysemousTraining(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::PolysemousTraining *arg1 = (faiss::PolysemousTraining *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::PolysemousTraining **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1pq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::ProductQuantizer *arg2 = (faiss::ProductQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = *(faiss::ProductQuantizer **)&jarg2; 
  if (arg1) (arg1)->pq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1pq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::ProductQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  result = (faiss::ProductQuantizer *)& ((arg1)->pq);
  *(faiss::ProductQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1codes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2; 
  if (arg1) (arg1)->codes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1codes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  result = (std::vector< uint8_t > *)& ((arg1)->codes);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexPQ_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::MetricType arg4 ;
  faiss::IndexPQ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (faiss::MetricType)jarg4; 
  result = (faiss::IndexPQ *)new faiss::IndexPQ(arg1,arg2,arg3,arg4);
  *(faiss::IndexPQ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexPQ_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::IndexPQ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (faiss::IndexPQ *)new faiss::IndexPQ(arg1,arg2,arg3);
  *(faiss::IndexPQ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexPQ_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexPQ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexPQ *)new faiss::IndexPQ();
  *(faiss::IndexPQ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexPQ const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1reconstruct_1n(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloatArray jarg4) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  faiss::Index::idx_t arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  arg3 = (faiss::Index::idx_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::IndexPQ const *)arg1)->reconstruct_n(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::IndexPQ const *)arg1)->reconstruct(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1remove_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::IDSelector *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = *(faiss::IDSelector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IDSelector const & reference is null");
    return 0;
  } 
  result = (long)(arg1)->remove_ids((faiss::IDSelector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1do_1polysemous_1training_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->do_polysemous_training = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1do_1polysemous_1training_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  result = (bool) ((arg1)->do_polysemous_training);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1polysemous_1training_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::PolysemousTraining *arg2 = (faiss::PolysemousTraining *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = *(faiss::PolysemousTraining **)&jarg2; 
  if (arg1) (arg1)->polysemous_training = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1polysemous_1training_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::PolysemousTraining *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  result = (faiss::PolysemousTraining *)& ((arg1)->polysemous_training);
  *(faiss::PolysemousTraining **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1search_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::IndexPQ::Search_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = (faiss::IndexPQ::Search_type_t)jarg2; 
  if (arg1) (arg1)->search_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1search_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::IndexPQ::Search_type_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  result = (faiss::IndexPQ::Search_type_t) ((arg1)->search_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1encode_1signs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->encode_signs = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1encode_1signs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  result = (bool) ((arg1)->encode_signs);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1polysemous_1ht_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->polysemous_ht = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1polysemous_1ht_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  result = (int) ((arg1)->polysemous_ht);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1search_1core_1polysemous(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexPQ const *)arg1)->search_core_polysemous(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1hamming_1distance_1histogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  long *arg6 = (long *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  (arg1)->hamming_distance_histogram(arg2,(float const *)arg3,arg4,(float const *)arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1hamming_1distance_1table(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, (int **)&arg4, jarg4)) return ; 
  ((faiss::IndexPQ const *)arg1)->hamming_distance_table(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutInt(jenv, jarr4, (int *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexPQ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexPQ *arg1 = (faiss::IndexPQ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexPQ **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQStats_1nq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexPQStats *arg1 = (faiss::IndexPQStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nq = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQStats_1nq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexPQStats *arg1 = (faiss::IndexPQStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQStats **)&jarg1; 
  result = (size_t) ((arg1)->nq);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQStats_1ncode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexPQStats *arg1 = (faiss::IndexPQStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->ncode = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQStats_1ncode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexPQStats *arg1 = (faiss::IndexPQStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQStats **)&jarg1; 
  result = (size_t) ((arg1)->ncode);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQStats_1n_1hamming_1pass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexPQStats *arg1 = (faiss::IndexPQStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->n_hamming_pass = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQStats_1n_1hamming_1pass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexPQStats *arg1 = (faiss::IndexPQStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQStats **)&jarg1; 
  result = (size_t) ((arg1)->n_hamming_pass);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexPQStats(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexPQStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexPQStats *)new faiss::IndexPQStats();
  *(faiss::IndexPQStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQStats_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexPQStats *arg1 = (faiss::IndexPQStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQStats **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexPQStats(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexPQStats *arg1 = (faiss::IndexPQStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexPQStats **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_indexPQ_1stats_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexPQStats *arg1 = (faiss::IndexPQStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexPQStats **)&jarg1; 
  faiss::indexPQ_stats = *arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_indexPQ_1stats_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexPQStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexPQStats *)&faiss::indexPQ_stats;
  *(faiss::IndexPQStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer_1pq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::MultiIndexQuantizer *arg1 = (faiss::MultiIndexQuantizer *) 0 ;
  faiss::ProductQuantizer *arg2 = (faiss::ProductQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::MultiIndexQuantizer **)&jarg1; 
  arg2 = *(faiss::ProductQuantizer **)&jarg2; 
  if (arg1) (arg1)->pq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer_1pq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::MultiIndexQuantizer *arg1 = (faiss::MultiIndexQuantizer *) 0 ;
  faiss::ProductQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::MultiIndexQuantizer **)&jarg1; 
  result = (faiss::ProductQuantizer *)& ((arg1)->pq);
  *(faiss::ProductQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1MultiIndexQuantizer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::MultiIndexQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (faiss::MultiIndexQuantizer *)new faiss::MultiIndexQuantizer(arg1,arg2,arg3);
  *(faiss::MultiIndexQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::MultiIndexQuantizer *arg1 = (faiss::MultiIndexQuantizer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::MultiIndexQuantizer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::MultiIndexQuantizer *arg1 = (faiss::MultiIndexQuantizer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::MultiIndexQuantizer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::MultiIndexQuantizer const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::MultiIndexQuantizer *arg1 = (faiss::MultiIndexQuantizer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::MultiIndexQuantizer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::MultiIndexQuantizer *arg1 = (faiss::MultiIndexQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::MultiIndexQuantizer **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1MultiIndexQuantizer_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::MultiIndexQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::MultiIndexQuantizer *)new faiss::MultiIndexQuantizer();
  *(faiss::MultiIndexQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::MultiIndexQuantizer *arg1 = (faiss::MultiIndexQuantizer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::MultiIndexQuantizer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::MultiIndexQuantizer const *)arg1)->reconstruct(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1MultiIndexQuantizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::MultiIndexQuantizer *arg1 = (faiss::MultiIndexQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::MultiIndexQuantizer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer2_1assign_1indexes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::MultiIndexQuantizer2 *arg1 = (faiss::MultiIndexQuantizer2 *) 0 ;
  std::vector< faiss::Index * > *arg2 = (std::vector< faiss::Index * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::MultiIndexQuantizer2 **)&jarg1; 
  arg2 = *(std::vector< faiss::Index * > **)&jarg2; 
  if (arg1) (arg1)->assign_indexes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer2_1assign_1indexes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::MultiIndexQuantizer2 *arg1 = (faiss::MultiIndexQuantizer2 *) 0 ;
  std::vector< faiss::Index * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::MultiIndexQuantizer2 **)&jarg1; 
  result = (std::vector< faiss::Index * > *)& ((arg1)->assign_indexes);
  *(std::vector< faiss::Index * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer2_1own_1fields_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::MultiIndexQuantizer2 *arg1 = (faiss::MultiIndexQuantizer2 *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::MultiIndexQuantizer2 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->own_fields = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer2_1own_1fields_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::MultiIndexQuantizer2 *arg1 = (faiss::MultiIndexQuantizer2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::MultiIndexQuantizer2 **)&jarg1; 
  result = (bool) ((arg1)->own_fields);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1MultiIndexQuantizer2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::Index **arg4 = (faiss::Index **) 0 ;
  faiss::MultiIndexQuantizer2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(faiss::Index ***)&jarg4; 
  result = (faiss::MultiIndexQuantizer2 *)new faiss::MultiIndexQuantizer2(arg1,arg2,arg3,arg4);
  *(faiss::MultiIndexQuantizer2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1MultiIndexQuantizer2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  int arg1 ;
  size_t arg2 ;
  faiss::Index *arg3 = (faiss::Index *) 0 ;
  faiss::Index *arg4 = (faiss::Index *) 0 ;
  faiss::MultiIndexQuantizer2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = (int)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(faiss::Index **)&jarg3; 
  arg4 = *(faiss::Index **)&jarg4; 
  result = (faiss::MultiIndexQuantizer2 *)new faiss::MultiIndexQuantizer2(arg1,arg2,arg3,arg4);
  *(faiss::MultiIndexQuantizer2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer2_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::MultiIndexQuantizer2 *arg1 = (faiss::MultiIndexQuantizer2 *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::MultiIndexQuantizer2 **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer2_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::MultiIndexQuantizer2 *arg1 = (faiss::MultiIndexQuantizer2 *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::MultiIndexQuantizer2 **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::MultiIndexQuantizer2 const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1MultiIndexQuantizer2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::MultiIndexQuantizer2 *arg1 = (faiss::MultiIndexQuantizer2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::MultiIndexQuantizer2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1nlist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nlist = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1nlist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  result = (size_t) ((arg1)->nlist);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1code_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->code_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1code_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  result = (size_t) ((arg1)->code_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (size_t)((faiss::InvertedLists const *)arg1)->list_size(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1get_1codes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (uint8_t *)((faiss::InvertedLists const *)arg1)->get_codes(arg2);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1get_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jintArray jresult = 0 ;
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  faiss::InvertedLists::idx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::InvertedLists::idx_t *)((faiss::InvertedLists const *)arg1)->get_ids(arg2);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1release_1codes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  ((faiss::InvertedLists const *)arg1)->release_codes((uint8_t const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1release_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  faiss::InvertedLists::idx_t *arg2 = (faiss::InvertedLists::idx_t *) 0 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return ; 
  ((faiss::InvertedLists const *)arg1)->release_ids((faiss::InvertedLists::idx_t const *)arg2);
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1get_1single_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::InvertedLists::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (faiss::InvertedLists::idx_t)((faiss::InvertedLists const *)arg1)->get_single_id(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1get_1single_1code(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (uint8_t *)((faiss::InvertedLists const *)arg1)->get_single_code(arg2,arg3);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1prefetch_1lists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jint jarg3) {
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  long *arg2 = (long *) 0 ;
  int arg3 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return ; 
  arg3 = (int)jarg3; 
  ((faiss::InvertedLists const *)arg1)->prefetch_lists((long const *)arg2,arg3);
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1add_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  faiss::InvertedLists::idx_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (faiss::InvertedLists::idx_t)jarg3; 
  arg4 = *(uint8_t **)&jarg4; 
  result = (size_t)(arg1)->add_entry(arg2,arg3,(uint8_t const *)arg4);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1add_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jintArray jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::InvertedLists::idx_t *arg4 = (faiss::InvertedLists::idx_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  jint *jarr4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return 0; 
  arg5 = *(uint8_t **)&jarg5; 
  result = (size_t)(arg1)->add_entries(arg2,arg3,(faiss::InvertedLists::idx_t const *)arg4,(uint8_t const *)arg5);
  jresult = (jlong)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1update_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jlong jarg5) {
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::InvertedLists::idx_t arg4 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (faiss::InvertedLists::idx_t)jarg4; 
  arg5 = *(uint8_t **)&jarg5; 
  (arg1)->update_entry(arg2,arg3,arg4,(uint8_t const *)arg5);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1update_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jintArray jarg5, jlong jarg6) {
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  faiss::InvertedLists::idx_t *arg5 = (faiss::InvertedLists::idx_t *) 0 ;
  uint8_t *arg6 = (uint8_t *) 0 ;
  jint *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  arg6 = *(uint8_t **)&jarg6; 
  (arg1)->update_entries(arg2,arg3,arg4,(faiss::InvertedLists::idx_t const *)arg5,(uint8_t const *)arg6);
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1merge_1from(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  faiss::InvertedLists *arg2 = (faiss::InvertedLists *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = *(faiss::InvertedLists **)&jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->merge_from(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1InvertedLists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1ScopedIds_1il_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::InvertedLists::ScopedIds *arg1 = (faiss::InvertedLists::ScopedIds *) 0 ;
  faiss::InvertedLists *arg2 = (faiss::InvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::InvertedLists::ScopedIds **)&jarg1; 
  arg2 = *(faiss::InvertedLists **)&jarg2; 
  if (arg1) (arg1)->il = (faiss::InvertedLists const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1ScopedIds_1il_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::InvertedLists::ScopedIds *arg1 = (faiss::InvertedLists::ScopedIds *) 0 ;
  faiss::InvertedLists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists::ScopedIds **)&jarg1; 
  result = (faiss::InvertedLists *) ((arg1)->il);
  *(faiss::InvertedLists **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1ScopedIds_1ids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  faiss::InvertedLists::ScopedIds *arg1 = (faiss::InvertedLists::ScopedIds *) 0 ;
  faiss::InvertedLists::idx_t *arg2 = (faiss::InvertedLists::idx_t *) 0 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists::ScopedIds **)&jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->ids = (faiss::InvertedLists::idx_t const *)arg2;
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1ScopedIds_1ids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  faiss::InvertedLists::ScopedIds *arg1 = (faiss::InvertedLists::ScopedIds *) 0 ;
  faiss::InvertedLists::idx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists::ScopedIds **)&jarg1; 
  result = (faiss::InvertedLists::idx_t *) ((arg1)->ids);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1InvertedLists_1ScopedIds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  faiss::InvertedLists::ScopedIds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::InvertedLists::ScopedIds *)new faiss::InvertedLists::ScopedIds((faiss::InvertedLists const *)arg1,arg2);
  *(faiss::InvertedLists::ScopedIds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1ScopedIds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  faiss::InvertedLists::ScopedIds *arg1 = (faiss::InvertedLists::ScopedIds *) 0 ;
  faiss::InvertedLists::idx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists::ScopedIds **)&jarg1; 
  result = (faiss::InvertedLists::idx_t *)(arg1)->get();
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1InvertedLists_1ScopedIds(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::InvertedLists::ScopedIds *arg1 = (faiss::InvertedLists::ScopedIds *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::InvertedLists::ScopedIds **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1ScopedCodes_1il_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::InvertedLists::ScopedCodes *arg1 = (faiss::InvertedLists::ScopedCodes *) 0 ;
  faiss::InvertedLists *arg2 = (faiss::InvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::InvertedLists::ScopedCodes **)&jarg1; 
  arg2 = *(faiss::InvertedLists **)&jarg2; 
  if (arg1) (arg1)->il = (faiss::InvertedLists const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1ScopedCodes_1il_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::InvertedLists::ScopedCodes *arg1 = (faiss::InvertedLists::ScopedCodes *) 0 ;
  faiss::InvertedLists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists::ScopedCodes **)&jarg1; 
  result = (faiss::InvertedLists *) ((arg1)->il);
  *(faiss::InvertedLists **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1ScopedCodes_1codes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::InvertedLists::ScopedCodes *arg1 = (faiss::InvertedLists::ScopedCodes *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists::ScopedCodes **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (arg1) (arg1)->codes = (uint8_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1ScopedCodes_1codes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::InvertedLists::ScopedCodes *arg1 = (faiss::InvertedLists::ScopedCodes *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists::ScopedCodes **)&jarg1; 
  result = (uint8_t *) ((arg1)->codes);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1InvertedLists_1ScopedCodes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  faiss::InvertedLists::ScopedCodes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::InvertedLists::ScopedCodes *)new faiss::InvertedLists::ScopedCodes((faiss::InvertedLists const *)arg1,arg2);
  *(faiss::InvertedLists::ScopedCodes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1InvertedLists_1ScopedCodes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::InvertedLists::ScopedCodes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (faiss::InvertedLists::ScopedCodes *)new faiss::InvertedLists::ScopedCodes((faiss::InvertedLists const *)arg1,arg2,arg3);
  *(faiss::InvertedLists::ScopedCodes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_InvertedLists_1ScopedCodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::InvertedLists::ScopedCodes *arg1 = (faiss::InvertedLists::ScopedCodes *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::InvertedLists::ScopedCodes **)&jarg1; 
  result = (uint8_t *)(arg1)->get();
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1InvertedLists_1ScopedCodes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::InvertedLists::ScopedCodes *arg1 = (faiss::InvertedLists::ScopedCodes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::InvertedLists::ScopedCodes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ArrayInvertedLists_1codes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ArrayInvertedLists *arg1 = (faiss::ArrayInvertedLists *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = (std::vector< std::vector< uint8_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ArrayInvertedLists **)&jarg1; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&jarg2; 
  if (arg1) (arg1)->codes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ArrayInvertedLists_1codes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ArrayInvertedLists *arg1 = (faiss::ArrayInvertedLists *) 0 ;
  std::vector< std::vector< uint8_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ArrayInvertedLists **)&jarg1; 
  result = (std::vector< std::vector< uint8_t > > *)& ((arg1)->codes);
  *(std::vector< std::vector< uint8_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ArrayInvertedLists_1ids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ArrayInvertedLists *arg1 = (faiss::ArrayInvertedLists *) 0 ;
  std::vector< std::vector< faiss::InvertedLists::idx_t > > *arg2 = (std::vector< std::vector< faiss::InvertedLists::idx_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ArrayInvertedLists **)&jarg1; 
  arg2 = *(std::vector< std::vector< faiss::InvertedLists::idx_t > > **)&jarg2; 
  if (arg1) (arg1)->ids = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ArrayInvertedLists_1ids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ArrayInvertedLists *arg1 = (faiss::ArrayInvertedLists *) 0 ;
  std::vector< std::vector< faiss::InvertedLists::idx_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ArrayInvertedLists **)&jarg1; 
  result = (std::vector< std::vector< faiss::InvertedLists::idx_t > > *)& ((arg1)->ids);
  *(std::vector< std::vector< faiss::InvertedLists::idx_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ArrayInvertedLists(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  faiss::ArrayInvertedLists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::ArrayInvertedLists *)new faiss::ArrayInvertedLists(arg1,arg2);
  *(faiss::ArrayInvertedLists **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ArrayInvertedLists_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::ArrayInvertedLists *arg1 = (faiss::ArrayInvertedLists *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ArrayInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (size_t)((faiss::ArrayInvertedLists const *)arg1)->list_size(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ArrayInvertedLists_1get_1codes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::ArrayInvertedLists *arg1 = (faiss::ArrayInvertedLists *) 0 ;
  size_t arg2 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ArrayInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (uint8_t *)((faiss::ArrayInvertedLists const *)arg1)->get_codes(arg2);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ArrayInvertedLists_1get_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jintArray jresult = 0 ;
  faiss::ArrayInvertedLists *arg1 = (faiss::ArrayInvertedLists *) 0 ;
  size_t arg2 ;
  faiss::InvertedLists::idx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ArrayInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::InvertedLists::idx_t *)((faiss::ArrayInvertedLists const *)arg1)->get_ids(arg2);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ArrayInvertedLists_1add_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jintArray jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  faiss::ArrayInvertedLists *arg1 = (faiss::ArrayInvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::InvertedLists::idx_t *arg4 = (faiss::InvertedLists::idx_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  jint *jarr4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ArrayInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return 0; 
  arg5 = *(uint8_t **)&jarg5; 
  result = (size_t)(arg1)->add_entries(arg2,arg3,(faiss::InvertedLists::idx_t const *)arg4,(uint8_t const *)arg5);
  jresult = (jlong)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ArrayInvertedLists_1update_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jintArray jarg5, jlong jarg6) {
  faiss::ArrayInvertedLists *arg1 = (faiss::ArrayInvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  faiss::InvertedLists::idx_t *arg5 = (faiss::InvertedLists::idx_t *) 0 ;
  uint8_t *arg6 = (uint8_t *) 0 ;
  jint *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ArrayInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  arg6 = *(uint8_t **)&jarg6; 
  (arg1)->update_entries(arg2,arg3,arg4,(faiss::InvertedLists::idx_t const *)arg5,(uint8_t const *)arg6);
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ArrayInvertedLists_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  faiss::ArrayInvertedLists *arg1 = (faiss::ArrayInvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ArrayInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1ArrayInvertedLists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::ArrayInvertedLists *arg1 = (faiss::ArrayInvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::ArrayInvertedLists **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ConcatenatedInvertedLists_1ils_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ConcatenatedInvertedLists *arg1 = (faiss::ConcatenatedInvertedLists *) 0 ;
  std::vector< faiss::InvertedLists const * > *arg2 = (std::vector< faiss::InvertedLists const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ConcatenatedInvertedLists **)&jarg1; 
  arg2 = *(std::vector< faiss::InvertedLists const * > **)&jarg2; 
  if (arg1) (arg1)->ils = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ConcatenatedInvertedLists_1ils_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ConcatenatedInvertedLists *arg1 = (faiss::ConcatenatedInvertedLists *) 0 ;
  std::vector< faiss::InvertedLists const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ConcatenatedInvertedLists **)&jarg1; 
  result = (std::vector< faiss::InvertedLists const * > *)& ((arg1)->ils);
  *(std::vector< faiss::InvertedLists const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ConcatenatedInvertedLists(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  faiss::InvertedLists **arg2 = (faiss::InvertedLists **) 0 ;
  faiss::ConcatenatedInvertedLists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(faiss::InvertedLists ***)&jarg2; 
  result = (faiss::ConcatenatedInvertedLists *)new faiss::ConcatenatedInvertedLists(arg1,(faiss::InvertedLists const **)arg2);
  *(faiss::ConcatenatedInvertedLists **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ConcatenatedInvertedLists_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::ConcatenatedInvertedLists *arg1 = (faiss::ConcatenatedInvertedLists *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ConcatenatedInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (size_t)((faiss::ConcatenatedInvertedLists const *)arg1)->list_size(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ConcatenatedInvertedLists_1get_1codes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::ConcatenatedInvertedLists *arg1 = (faiss::ConcatenatedInvertedLists *) 0 ;
  size_t arg2 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ConcatenatedInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (uint8_t *)((faiss::ConcatenatedInvertedLists const *)arg1)->get_codes(arg2);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ConcatenatedInvertedLists_1get_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jintArray jresult = 0 ;
  faiss::ConcatenatedInvertedLists *arg1 = (faiss::ConcatenatedInvertedLists *) 0 ;
  size_t arg2 ;
  faiss::InvertedLists::idx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ConcatenatedInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::InvertedLists::idx_t *)((faiss::ConcatenatedInvertedLists const *)arg1)->get_ids(arg2);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ConcatenatedInvertedLists_1release_1codes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ConcatenatedInvertedLists *arg1 = (faiss::ConcatenatedInvertedLists *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ConcatenatedInvertedLists **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  ((faiss::ConcatenatedInvertedLists const *)arg1)->release_codes((uint8_t const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ConcatenatedInvertedLists_1release_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  faiss::ConcatenatedInvertedLists *arg1 = (faiss::ConcatenatedInvertedLists *) 0 ;
  faiss::InvertedLists::idx_t *arg2 = (faiss::InvertedLists::idx_t *) 0 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ConcatenatedInvertedLists **)&jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return ; 
  ((faiss::ConcatenatedInvertedLists const *)arg1)->release_ids((faiss::InvertedLists::idx_t const *)arg2);
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ConcatenatedInvertedLists_1get_1single_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  faiss::ConcatenatedInvertedLists *arg1 = (faiss::ConcatenatedInvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::InvertedLists::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ConcatenatedInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (faiss::InvertedLists::idx_t)((faiss::ConcatenatedInvertedLists const *)arg1)->get_single_id(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ConcatenatedInvertedLists_1get_1single_1code(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  faiss::ConcatenatedInvertedLists *arg1 = (faiss::ConcatenatedInvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ConcatenatedInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (uint8_t *)((faiss::ConcatenatedInvertedLists const *)arg1)->get_single_code(arg2,arg3);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ConcatenatedInvertedLists_1add_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jintArray jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  faiss::ConcatenatedInvertedLists *arg1 = (faiss::ConcatenatedInvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::InvertedLists::idx_t *arg4 = (faiss::InvertedLists::idx_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  jint *jarr4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ConcatenatedInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return 0; 
  arg5 = *(uint8_t **)&jarg5; 
  result = (size_t)(arg1)->add_entries(arg2,arg3,(faiss::InvertedLists::idx_t const *)arg4,(uint8_t const *)arg5);
  jresult = (jlong)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ConcatenatedInvertedLists_1update_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jintArray jarg5, jlong jarg6) {
  faiss::ConcatenatedInvertedLists *arg1 = (faiss::ConcatenatedInvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  faiss::InvertedLists::idx_t *arg5 = (faiss::InvertedLists::idx_t *) 0 ;
  uint8_t *arg6 = (uint8_t *) 0 ;
  jint *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ConcatenatedInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  arg6 = *(uint8_t **)&jarg6; 
  (arg1)->update_entries(arg2,arg3,arg4,(faiss::InvertedLists::idx_t const *)arg5,(uint8_t const *)arg6);
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ConcatenatedInvertedLists_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  faiss::ConcatenatedInvertedLists *arg1 = (faiss::ConcatenatedInvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ConcatenatedInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1ConcatenatedInvertedLists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::ConcatenatedInvertedLists *arg1 = (faiss::ConcatenatedInvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::ConcatenatedInvertedLists **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Level1Quantizer_1quantizer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  if (arg1) (arg1)->quantizer = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Level1Quantizer_1quantizer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  result = (faiss::Index *) ((arg1)->quantizer);
  *(faiss::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Level1Quantizer_1nlist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nlist = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Level1Quantizer_1nlist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  result = (size_t) ((arg1)->nlist);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Level1Quantizer_1quantizer_1trains_1alone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->quantizer_trains_alone = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Level1Quantizer_1quantizer_1trains_1alone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  result = (char) ((arg1)->quantizer_trains_alone);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Level1Quantizer_1own_1fields_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->own_fields = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Level1Quantizer_1own_1fields_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  result = (bool) ((arg1)->own_fields);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Level1Quantizer_1cp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  faiss::ClusteringParameters *arg2 = (faiss::ClusteringParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  arg2 = *(faiss::ClusteringParameters **)&jarg2; 
  if (arg1) (arg1)->cp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Level1Quantizer_1cp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  faiss::ClusteringParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  result = (faiss::ClusteringParameters *)& ((arg1)->cp);
  *(faiss::ClusteringParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Level1Quantizer_1clustering_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  if (arg1) (arg1)->clustering_index = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Level1Quantizer_1clustering_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  result = (faiss::Index *) ((arg1)->clustering_index);
  *(faiss::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Level1Quantizer_1train_1q1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jboolean jarg4, jint jarg5) {
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  bool arg4 ;
  faiss::MetricType arg5 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = jarg4 ? true : false; 
  arg5 = (faiss::MetricType)jarg5; 
  (arg1)->train_q1(arg2,(float const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1Level1Quantizer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  size_t arg2 ;
  faiss::Level1Quantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::Level1Quantizer *)new faiss::Level1Quantizer(arg1,arg2);
  *(faiss::Level1Quantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1Level1Quantizer_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::Level1Quantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::Level1Quantizer *)new faiss::Level1Quantizer();
  *(faiss::Level1Quantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1Level1Quantizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::Level1Quantizer *arg1 = (faiss::Level1Quantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::Level1Quantizer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IVFSearchParameters_1nprobe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IVFSearchParameters *arg1 = (faiss::IVFSearchParameters *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IVFSearchParameters **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nprobe = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IVFSearchParameters_1nprobe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IVFSearchParameters *arg1 = (faiss::IVFSearchParameters *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IVFSearchParameters **)&jarg1; 
  result = (size_t) ((arg1)->nprobe);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IVFSearchParameters_1max_1codes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IVFSearchParameters *arg1 = (faiss::IVFSearchParameters *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IVFSearchParameters **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->max_codes = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IVFSearchParameters_1max_1codes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IVFSearchParameters *arg1 = (faiss::IVFSearchParameters *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IVFSearchParameters **)&jarg1; 
  result = (size_t) ((arg1)->max_codes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IVFSearchParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IVFSearchParameters *arg1 = (faiss::IVFSearchParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IVFSearchParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IVFSearchParameters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IVFSearchParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IVFSearchParameters *)new faiss::IVFSearchParameters();
  *(faiss::IVFSearchParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1invlists_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::InvertedLists *arg2 = (faiss::InvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = *(faiss::InvertedLists **)&jarg2; 
  if (arg1) (arg1)->invlists = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1invlists_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::InvertedLists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  result = (faiss::InvertedLists *) ((arg1)->invlists);
  *(faiss::InvertedLists **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1own_1invlists_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->own_invlists = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1own_1invlists_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  result = (bool) ((arg1)->own_invlists);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1code_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->code_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1code_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  result = (size_t) ((arg1)->code_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1nprobe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nprobe = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1nprobe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  result = (size_t) ((arg1)->nprobe);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1max_1codes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->max_codes = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1max_1codes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  result = (size_t) ((arg1)->max_codes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1maintain_1direct_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->maintain_direct_map = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1maintain_1direct_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  result = (bool) ((arg1)->maintain_direct_map);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1direct_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  std::vector< long > *arg2 = (std::vector< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = *(std::vector< long > **)&jarg2; 
  if (arg1) (arg1)->direct_map = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1direct_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  std::vector< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  result = (std::vector< long > *)& ((arg1)->direct_map);
  *(std::vector< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1encode_1vectors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4, jlong jarg5) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t *arg4 = (faiss::Index::idx_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = *(uint8_t **)&jarg5; 
  ((faiss::IndexIVF const *)arg1)->encode_vectors(arg2,(float const *)arg3,(faiss::Index::idx_t const *)arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1train_1residual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train_residual(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1search_1preassigned_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jintArray jarg5, jfloatArray jarg6, jfloatArray jarg7, jintArray jarg8, jboolean jarg9, jlong jarg10, jobject jarg10_) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  faiss::Index::idx_t *arg5 = (faiss::Index::idx_t *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  faiss::Index::idx_t *arg8 = (faiss::Index::idx_t *) 0 ;
  bool arg9 ;
  faiss::IVFSearchParameters *arg10 = (faiss::IVFSearchParameters *) 0 ;
  jfloat *jarr3 ;
  jint *jarr5 ;
  jfloat *jarr6 ;
  jfloat *jarr7 ;
  jint *jarr8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg10_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr8, (long **)&arg8, jarg8)) return ; 
  arg9 = jarg9 ? true : false; 
  arg10 = *(faiss::IVFSearchParameters **)&jarg10; 
  ((faiss::IndexIVF const *)arg1)->search_preassigned(arg2,(float const *)arg3,arg4,(faiss::Index::idx_t const *)arg5,(float const *)arg6,arg7,arg8,arg9,(faiss::IVFSearchParameters const *)arg10);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  SWIG_JavaArrayArgoutLong(jenv, jarr8, (long *)arg8, jarg8); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
  delete [] arg8; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1search_1preassigned_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jintArray jarg5, jfloatArray jarg6, jfloatArray jarg7, jintArray jarg8, jboolean jarg9) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  faiss::Index::idx_t *arg5 = (faiss::Index::idx_t *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  faiss::Index::idx_t *arg8 = (faiss::Index::idx_t *) 0 ;
  bool arg9 ;
  jfloat *jarr3 ;
  jint *jarr5 ;
  jfloat *jarr6 ;
  jfloat *jarr7 ;
  jint *jarr8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr8, (long **)&arg8, jarg8)) return ; 
  arg9 = jarg9 ? true : false; 
  ((faiss::IndexIVF const *)arg1)->search_preassigned(arg2,(float const *)arg3,arg4,(faiss::Index::idx_t const *)arg5,(float const *)arg6,arg7,arg8,arg9);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  SWIG_JavaArrayArgoutLong(jenv, jarr8, (long *)arg8, jarg8); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
  delete [] arg8; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexIVF const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1get_1InvertedListScanner_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  bool arg2 ;
  faiss::InvertedListScanner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (faiss::InvertedListScanner *)((faiss::IndexIVF const *)arg1)->get_InvertedListScanner(arg2);
  *(faiss::InvertedListScanner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1get_1InvertedListScanner_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::InvertedListScanner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  result = (faiss::InvertedListScanner *)((faiss::IndexIVF const *)arg1)->get_InvertedListScanner();
  *(faiss::InvertedListScanner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::IndexIVF const *)arg1)->reconstruct(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1reconstruct_1n(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloatArray jarg4) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::Index::idx_t arg2 ;
  faiss::Index::idx_t arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  arg3 = (faiss::Index::idx_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::IndexIVF const *)arg1)->reconstruct_n(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1search_1and_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6, jfloatArray jarg7) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  float *arg7 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  jfloat *jarr7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  ((faiss::IndexIVF const *)arg1)->search_and_reconstruct(arg2,(float const *)arg3,arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1reconstruct_1from_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloatArray jarg4) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  long arg2 ;
  long arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::IndexIVF const *)arg1)->reconstruct_from_offset(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1remove_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::IDSelector *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = *(faiss::IDSelector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IDSelector const & reference is null");
    return 0;
  } 
  result = (long)(arg1)->remove_ids((faiss::IDSelector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1check_1compatible_1for_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::IndexIVF *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = *(faiss::IndexIVF **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IndexIVF const & reference is null");
    return ;
  } 
  ((faiss::IndexIVF const *)arg1)->check_compatible_for_merge((faiss::IndexIVF const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1merge_1from(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::IndexIVF *arg2 = 0 ;
  faiss::Index::idx_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = *(faiss::IndexIVF **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IndexIVF & reference is null");
    return ;
  } 
  arg3 = (faiss::Index::idx_t)jarg3; 
  (arg1)->merge_from(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1copy_1subset_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::IndexIVF *arg2 = 0 ;
  int arg3 ;
  long arg4 ;
  long arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = *(faiss::IndexIVF **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IndexIVF & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (long)jarg5; 
  ((faiss::IndexIVF const *)arg1)->copy_subset_to(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexIVF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1get_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (size_t)((faiss::IndexIVF const *)arg1)->get_list_size(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1make_1direct_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->make_direct_map(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1make_1direct_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  (arg1)->make_direct_map();
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1imbalance_1factor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  result = (double)((faiss::IndexIVF const *)arg1)->imbalance_factor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1print_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  ((faiss::IndexIVF const *)arg1)->print_stats();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1replace_1invlists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::InvertedLists *arg2 = (faiss::InvertedLists *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = *(faiss::InvertedLists **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->replace_invlists(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1replace_1invlists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexIVF *arg1 = (faiss::IndexIVF *) 0 ;
  faiss::InvertedLists *arg2 = (faiss::InvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVF **)&jarg1; 
  arg2 = *(faiss::InvertedLists **)&jarg2; 
  (arg1)->replace_invlists(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFStats_1nq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIVFStats *arg1 = (faiss::IndexIVFStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nq = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFStats_1nq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFStats *arg1 = (faiss::IndexIVFStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFStats **)&jarg1; 
  result = (size_t) ((arg1)->nq);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFStats_1nlist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIVFStats *arg1 = (faiss::IndexIVFStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nlist = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFStats_1nlist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFStats *arg1 = (faiss::IndexIVFStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFStats **)&jarg1; 
  result = (size_t) ((arg1)->nlist);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFStats_1ndis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIVFStats *arg1 = (faiss::IndexIVFStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->ndis = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFStats_1ndis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFStats *arg1 = (faiss::IndexIVFStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFStats **)&jarg1; 
  result = (size_t) ((arg1)->ndis);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFStats_1nheap_1updates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIVFStats *arg1 = (faiss::IndexIVFStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nheap_updates = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFStats_1nheap_1updates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFStats *arg1 = (faiss::IndexIVFStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFStats **)&jarg1; 
  result = (size_t) ((arg1)->nheap_updates);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFStats(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexIVFStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexIVFStats *)new faiss::IndexIVFStats();
  *(faiss::IndexIVFStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFStats_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexIVFStats *arg1 = (faiss::IndexIVFStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFStats **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexIVFStats(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexIVFStats *arg1 = (faiss::IndexIVFStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexIVFStats **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_indexIVF_1stats_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexIVFStats *arg1 = (faiss::IndexIVFStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFStats **)&jarg1; 
  faiss::indexIVF_stats = *arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_indexIVF_1stats_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexIVFStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexIVFStats *)&faiss::indexIVF_stats;
  *(faiss::IndexIVFStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_check_1compatible_1for_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  faiss::ivflib::check_compatible_for_merge((faiss::Index const *)arg1,(faiss::Index const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_extract_1index_1ivf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::IndexIVF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (faiss::IndexIVF *)faiss::ivflib::extract_index_ivf((faiss::Index const *)arg1);
  *(faiss::IndexIVF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_merge_1into(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  faiss::ivflib::merge_into(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_search_1centroid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jint jarg3, jintArray jarg4) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  faiss::ivflib::idx_t *arg4 = (faiss::ivflib::idx_t *) 0 ;
  jfloat *jarr2 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (int)jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  faiss::ivflib::search_centroid(arg1,(float const *)arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg2; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_search_1and_1return_1centroids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6, jintArray jarg7, jintArray jarg8) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  long arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::ivflib::idx_t *arg6 = (faiss::ivflib::idx_t *) 0 ;
  faiss::ivflib::idx_t *arg7 = (faiss::ivflib::idx_t *) 0 ;
  faiss::ivflib::idx_t *arg8 = (faiss::ivflib::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  jint *jarr7 ;
  jint *jarr8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (long)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr7, (long **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr8, (long **)&arg8, jarg8)) return ; 
  faiss::ivflib::search_and_return_centroids(arg1,arg2,(float const *)arg3,arg4,arg5,arg6,arg7,arg8);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  SWIG_JavaArrayArgoutLong(jenv, jarr7, (long *)arg7, jarg7); 
  SWIG_JavaArrayArgoutLong(jenv, jarr8, (long *)arg8, jarg8); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
  delete [] arg8; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SlidingIndexWindow_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ivflib::SlidingIndexWindow *arg1 = (faiss::ivflib::SlidingIndexWindow *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ivflib::SlidingIndexWindow **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SlidingIndexWindow_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ivflib::SlidingIndexWindow *arg1 = (faiss::ivflib::SlidingIndexWindow *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ivflib::SlidingIndexWindow **)&jarg1; 
  result = (faiss::Index *) ((arg1)->index);
  *(faiss::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SlidingIndexWindow_1ils_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ivflib::SlidingIndexWindow *arg1 = (faiss::ivflib::SlidingIndexWindow *) 0 ;
  faiss::ArrayInvertedLists *arg2 = (faiss::ArrayInvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ivflib::SlidingIndexWindow **)&jarg1; 
  arg2 = *(faiss::ArrayInvertedLists **)&jarg2; 
  if (arg1) (arg1)->ils = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SlidingIndexWindow_1ils_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ivflib::SlidingIndexWindow *arg1 = (faiss::ivflib::SlidingIndexWindow *) 0 ;
  faiss::ArrayInvertedLists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ivflib::SlidingIndexWindow **)&jarg1; 
  result = (faiss::ArrayInvertedLists *) ((arg1)->ils);
  *(faiss::ArrayInvertedLists **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SlidingIndexWindow_1n_1slice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::ivflib::SlidingIndexWindow *arg1 = (faiss::ivflib::SlidingIndexWindow *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ivflib::SlidingIndexWindow **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n_slice = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SlidingIndexWindow_1n_1slice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::ivflib::SlidingIndexWindow *arg1 = (faiss::ivflib::SlidingIndexWindow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ivflib::SlidingIndexWindow **)&jarg1; 
  result = (int) ((arg1)->n_slice);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SlidingIndexWindow_1nlist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ivflib::SlidingIndexWindow *arg1 = (faiss::ivflib::SlidingIndexWindow *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ivflib::SlidingIndexWindow **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nlist = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SlidingIndexWindow_1nlist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ivflib::SlidingIndexWindow *arg1 = (faiss::ivflib::SlidingIndexWindow *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ivflib::SlidingIndexWindow **)&jarg1; 
  result = (size_t) ((arg1)->nlist);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SlidingIndexWindow_1sizes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ivflib::SlidingIndexWindow *arg1 = (faiss::ivflib::SlidingIndexWindow *) 0 ;
  std::vector< std::vector< size_t > > *arg2 = (std::vector< std::vector< size_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ivflib::SlidingIndexWindow **)&jarg1; 
  arg2 = *(std::vector< std::vector< size_t > > **)&jarg2; 
  if (arg1) (arg1)->sizes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SlidingIndexWindow_1sizes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ivflib::SlidingIndexWindow *arg1 = (faiss::ivflib::SlidingIndexWindow *) 0 ;
  std::vector< std::vector< size_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ivflib::SlidingIndexWindow **)&jarg1; 
  result = (std::vector< std::vector< size_t > > *)& ((arg1)->sizes);
  *(std::vector< std::vector< size_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1SlidingIndexWindow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::ivflib::SlidingIndexWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (faiss::ivflib::SlidingIndexWindow *)new faiss::ivflib::SlidingIndexWindow(arg1);
  *(faiss::ivflib::SlidingIndexWindow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SlidingIndexWindow_1step(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  faiss::ivflib::SlidingIndexWindow *arg1 = (faiss::ivflib::SlidingIndexWindow *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ivflib::SlidingIndexWindow **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->step((faiss::Index const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1SlidingIndexWindow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::ivflib::SlidingIndexWindow *arg1 = (faiss::ivflib::SlidingIndexWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::ivflib::SlidingIndexWindow **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_get_1invlist_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  long arg2 ;
  long arg3 ;
  faiss::ArrayInvertedLists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  result = (faiss::ArrayInvertedLists *)faiss::ivflib::get_invlist_range((faiss::Index const *)arg1,arg2,arg3);
  *(faiss::ArrayInvertedLists **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_set_1invlist_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  long arg2 ;
  long arg3 ;
  faiss::ArrayInvertedLists *arg4 = (faiss::ArrayInvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = *(faiss::ArrayInvertedLists **)&jarg4; 
  faiss::ivflib::set_invlist_range(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_search_1with_1parameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6, jlong jarg7, jobject jarg7_) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::ivflib::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::ivflib::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::ivflib::idx_t *arg6 = (faiss::ivflib::idx_t *) 0 ;
  faiss::IVFSearchParameters *arg7 = (faiss::IVFSearchParameters *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (faiss::ivflib::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::ivflib::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  arg7 = *(faiss::IVFSearchParameters **)&jarg7; 
  faiss::ivflib::search_with_parameters((faiss::Index const *)arg1,arg2,(float const *)arg3,arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1qtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  faiss::ScalarQuantizer::QuantizerType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  arg2 = (faiss::ScalarQuantizer::QuantizerType)jarg2; 
  if (arg1) (arg1)->qtype = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1qtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  faiss::ScalarQuantizer::QuantizerType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  result = (faiss::ScalarQuantizer::QuantizerType) ((arg1)->qtype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1rangestat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  faiss::ScalarQuantizer::RangeStat arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  arg2 = (faiss::ScalarQuantizer::RangeStat)jarg2; 
  if (arg1) (arg1)->rangestat = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1rangestat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  faiss::ScalarQuantizer::RangeStat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  result = (faiss::ScalarQuantizer::RangeStat) ((arg1)->rangestat);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1rangestat_1arg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rangestat_arg = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1rangestat_1arg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  result = (float) ((arg1)->rangestat_arg);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  result = (size_t) ((arg1)->d);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1code_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->code_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1code_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  result = (size_t) ((arg1)->code_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1trained_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->trained = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1trained_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->trained);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ScalarQuantizer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  faiss::ScalarQuantizer::QuantizerType arg2 ;
  faiss::ScalarQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (faiss::ScalarQuantizer::QuantizerType)jarg2; 
  result = (faiss::ScalarQuantizer *)new faiss::ScalarQuantizer(arg1,arg2);
  *(faiss::ScalarQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ScalarQuantizer_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::ScalarQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::ScalarQuantizer *)new faiss::ScalarQuantizer();
  *(faiss::ScalarQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3) {
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1compute_1codes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3, jlong jarg4) {
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  float *arg2 = (float *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (size_t)jarg4; 
  ((faiss::ScalarQuantizer const *)arg1)->compute_codes((float const *)arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1decode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jlong jarg4) {
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  float *arg3 = (float *) 0 ;
  size_t arg4 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (size_t)jarg4; 
  ((faiss::ScalarQuantizer const *)arg1)->decode((uint8_t const *)arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1DistanceComputer_1compute_1distance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jlong jarg3) {
  jfloat jresult = 0 ;
  faiss::ScalarQuantizer::DistanceComputer *arg1 = (faiss::ScalarQuantizer::DistanceComputer *) 0 ;
  float *arg2 = (float *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  jfloat *jarr2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer::DistanceComputer **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return 0; 
  arg3 = *(uint8_t **)&jarg3; 
  result = (float)((faiss::ScalarQuantizer::DistanceComputer const *)arg1)->compute_distance((float const *)arg2,(uint8_t const *)arg3);
  jresult = (jfloat)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1DistanceComputer_1compute_1code_1distance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jfloat jresult = 0 ;
  faiss::ScalarQuantizer::DistanceComputer *arg1 = (faiss::ScalarQuantizer::DistanceComputer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer::DistanceComputer **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  result = (float)((faiss::ScalarQuantizer::DistanceComputer const *)arg1)->compute_code_distance((uint8_t const *)arg2,(uint8_t const *)arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1ScalarQuantizer_1DistanceComputer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::ScalarQuantizer::DistanceComputer *arg1 = (faiss::ScalarQuantizer::DistanceComputer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::ScalarQuantizer::DistanceComputer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1get_1distance_1computer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  faiss::MetricType arg2 ;
  faiss::ScalarQuantizer::DistanceComputer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  arg2 = (faiss::MetricType)jarg2; 
  result = (faiss::ScalarQuantizer::DistanceComputer *)((faiss::ScalarQuantizer const *)arg1)->get_distance_computer(arg2);
  *(faiss::ScalarQuantizer::DistanceComputer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ScalarQuantizer_1get_1distance_1computer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  faiss::ScalarQuantizer::DistanceComputer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  result = (faiss::ScalarQuantizer::DistanceComputer *)((faiss::ScalarQuantizer const *)arg1)->get_distance_computer();
  *(faiss::ScalarQuantizer::DistanceComputer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1ScalarQuantizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::ScalarQuantizer *arg1 = (faiss::ScalarQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::ScalarQuantizer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexScalarQuantizer_1sq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexScalarQuantizer *arg1 = (faiss::IndexScalarQuantizer *) 0 ;
  faiss::ScalarQuantizer *arg2 = (faiss::ScalarQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexScalarQuantizer **)&jarg1; 
  arg2 = *(faiss::ScalarQuantizer **)&jarg2; 
  if (arg1) (arg1)->sq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexScalarQuantizer_1sq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexScalarQuantizer *arg1 = (faiss::IndexScalarQuantizer *) 0 ;
  faiss::ScalarQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexScalarQuantizer **)&jarg1; 
  result = (faiss::ScalarQuantizer *)& ((arg1)->sq);
  *(faiss::ScalarQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexScalarQuantizer_1codes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexScalarQuantizer *arg1 = (faiss::IndexScalarQuantizer *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexScalarQuantizer **)&jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2; 
  if (arg1) (arg1)->codes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexScalarQuantizer_1codes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexScalarQuantizer *arg1 = (faiss::IndexScalarQuantizer *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexScalarQuantizer **)&jarg1; 
  result = (std::vector< uint8_t > *)& ((arg1)->codes);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexScalarQuantizer_1code_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexScalarQuantizer *arg1 = (faiss::IndexScalarQuantizer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexScalarQuantizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->code_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexScalarQuantizer_1code_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexScalarQuantizer *arg1 = (faiss::IndexScalarQuantizer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexScalarQuantizer **)&jarg1; 
  result = (size_t) ((arg1)->code_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexScalarQuantizer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  faiss::ScalarQuantizer::QuantizerType arg2 ;
  faiss::MetricType arg3 ;
  faiss::IndexScalarQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (faiss::ScalarQuantizer::QuantizerType)jarg2; 
  arg3 = (faiss::MetricType)jarg3; 
  result = (faiss::IndexScalarQuantizer *)new faiss::IndexScalarQuantizer(arg1,arg2,arg3);
  *(faiss::IndexScalarQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexScalarQuantizer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  faiss::ScalarQuantizer::QuantizerType arg2 ;
  faiss::IndexScalarQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (faiss::ScalarQuantizer::QuantizerType)jarg2; 
  result = (faiss::IndexScalarQuantizer *)new faiss::IndexScalarQuantizer(arg1,arg2);
  *(faiss::IndexScalarQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexScalarQuantizer_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexScalarQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexScalarQuantizer *)new faiss::IndexScalarQuantizer();
  *(faiss::IndexScalarQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexScalarQuantizer_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexScalarQuantizer *arg1 = (faiss::IndexScalarQuantizer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexScalarQuantizer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexScalarQuantizer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexScalarQuantizer *arg1 = (faiss::IndexScalarQuantizer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexScalarQuantizer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexScalarQuantizer_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexScalarQuantizer *arg1 = (faiss::IndexScalarQuantizer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexScalarQuantizer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexScalarQuantizer const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexScalarQuantizer_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexScalarQuantizer *arg1 = (faiss::IndexScalarQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexScalarQuantizer **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexScalarQuantizer_1reconstruct_1n(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloatArray jarg4) {
  faiss::IndexScalarQuantizer *arg1 = (faiss::IndexScalarQuantizer *) 0 ;
  faiss::Index::idx_t arg2 ;
  faiss::Index::idx_t arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexScalarQuantizer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  arg3 = (faiss::Index::idx_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::IndexScalarQuantizer const *)arg1)->reconstruct_n(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexScalarQuantizer_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexScalarQuantizer *arg1 = (faiss::IndexScalarQuantizer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexScalarQuantizer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::IndexScalarQuantizer const *)arg1)->reconstruct(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexScalarQuantizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexScalarQuantizer *arg1 = (faiss::IndexScalarQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexScalarQuantizer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFScalarQuantizer_1sq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexIVFScalarQuantizer *arg1 = (faiss::IndexIVFScalarQuantizer *) 0 ;
  faiss::ScalarQuantizer *arg2 = (faiss::ScalarQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVFScalarQuantizer **)&jarg1; 
  arg2 = *(faiss::ScalarQuantizer **)&jarg2; 
  if (arg1) (arg1)->sq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFScalarQuantizer_1sq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFScalarQuantizer *arg1 = (faiss::IndexIVFScalarQuantizer *) 0 ;
  faiss::ScalarQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFScalarQuantizer **)&jarg1; 
  result = (faiss::ScalarQuantizer *)& ((arg1)->sq);
  *(faiss::ScalarQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFScalarQuantizer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::ScalarQuantizer::QuantizerType arg4 ;
  faiss::MetricType arg5 ;
  faiss::IndexIVFScalarQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (faiss::ScalarQuantizer::QuantizerType)jarg4; 
  arg5 = (faiss::MetricType)jarg5; 
  result = (faiss::IndexIVFScalarQuantizer *)new faiss::IndexIVFScalarQuantizer(arg1,arg2,arg3,arg4,arg5);
  *(faiss::IndexIVFScalarQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFScalarQuantizer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::ScalarQuantizer::QuantizerType arg4 ;
  faiss::IndexIVFScalarQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (faiss::ScalarQuantizer::QuantizerType)jarg4; 
  result = (faiss::IndexIVFScalarQuantizer *)new faiss::IndexIVFScalarQuantizer(arg1,arg2,arg3,arg4);
  *(faiss::IndexIVFScalarQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFScalarQuantizer_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexIVFScalarQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexIVFScalarQuantizer *)new faiss::IndexIVFScalarQuantizer();
  *(faiss::IndexIVFScalarQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFScalarQuantizer_1train_1residual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexIVFScalarQuantizer *arg1 = (faiss::IndexIVFScalarQuantizer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFScalarQuantizer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train_residual(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFScalarQuantizer_1encode_1vectors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4, jlong jarg5) {
  faiss::IndexIVFScalarQuantizer *arg1 = (faiss::IndexIVFScalarQuantizer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t *arg4 = (faiss::Index::idx_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFScalarQuantizer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = *(uint8_t **)&jarg5; 
  ((faiss::IndexIVFScalarQuantizer const *)arg1)->encode_vectors(arg2,(float const *)arg3,(faiss::Index::idx_t const *)arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFScalarQuantizer_1add_1with_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::IndexIVFScalarQuantizer *arg1 = (faiss::IndexIVFScalarQuantizer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFScalarQuantizer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add_with_ids(arg2,(float const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFScalarQuantizer_1get_1InvertedListScanner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  faiss::IndexIVFScalarQuantizer *arg1 = (faiss::IndexIVFScalarQuantizer *) 0 ;
  bool arg2 ;
  faiss::InvertedListScanner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFScalarQuantizer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (faiss::InvertedListScanner *)((faiss::IndexIVFScalarQuantizer const *)arg1)->get_InvertedListScanner(arg2);
  *(faiss::InvertedListScanner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFScalarQuantizer_1reconstruct_1from_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloatArray jarg4) {
  faiss::IndexIVFScalarQuantizer *arg1 = (faiss::IndexIVFScalarQuantizer *) 0 ;
  long arg2 ;
  long arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFScalarQuantizer **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::IndexIVFScalarQuantizer const *)arg1)->reconstruct_from_offset(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexIVFScalarQuantizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexIVFScalarQuantizer *arg1 = (faiss::IndexIVFScalarQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexIVFScalarQuantizer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1DistanceComputer_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HNSW::DistanceComputer *arg1 = (faiss::HNSW::DistanceComputer *) 0 ;
  faiss::HNSW::idx_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::DistanceComputer **)&jarg1; 
  arg2 = (faiss::HNSW::idx_t)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1DistanceComputer_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HNSW::DistanceComputer *arg1 = (faiss::HNSW::DistanceComputer *) 0 ;
  faiss::HNSW::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::DistanceComputer **)&jarg1; 
  result = (faiss::HNSW::idx_t) ((arg1)->d);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1DistanceComputer_1set_1query(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  faiss::HNSW::DistanceComputer *arg1 = (faiss::HNSW::DistanceComputer *) 0 ;
  float *arg2 = (float *) 0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::DistanceComputer **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  (arg1)->set_query((float const *)arg2);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1DistanceComputer_1symmetric_1dis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  faiss::HNSW::DistanceComputer *arg1 = (faiss::HNSW::DistanceComputer *) 0 ;
  faiss::HNSW::storage_idx_t arg2 ;
  faiss::HNSW::storage_idx_t arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::DistanceComputer **)&jarg1; 
  arg2 = (faiss::HNSW::storage_idx_t)jarg2; 
  arg3 = (faiss::HNSW::storage_idx_t)jarg3; 
  result = (float)(arg1)->symmetric_dis(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HNSW_1DistanceComputer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HNSW::DistanceComputer *arg1 = (faiss::HNSW::DistanceComputer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HNSW::DistanceComputer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  result = (int) ((arg1)->n);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1k_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->k = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1k_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  result = (int) ((arg1)->k);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1ids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  std::vector< faiss::HNSW::storage_idx_t > *arg2 = (std::vector< faiss::HNSW::storage_idx_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  arg2 = *(std::vector< faiss::HNSW::storage_idx_t > **)&jarg2; 
  if (arg1) (arg1)->ids = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1ids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  std::vector< faiss::HNSW::storage_idx_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  result = (std::vector< faiss::HNSW::storage_idx_t > *)& ((arg1)->ids);
  *(std::vector< faiss::HNSW::storage_idx_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1dis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->dis = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1dis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->dis);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HNSW_1MinimaxHeap(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  faiss::HNSW::MinimaxHeap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (faiss::HNSW::MinimaxHeap *)new faiss::HNSW::MinimaxHeap(arg1);
  *(faiss::HNSW::MinimaxHeap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1push(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  faiss::HNSW::storage_idx_t arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  arg2 = (faiss::HNSW::storage_idx_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->push(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1max(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  result = (float)((faiss::HNSW::MinimaxHeap const *)arg1)->max();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  result = (int)((faiss::HNSW::MinimaxHeap const *)arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1pop_1min_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  jint jresult = 0 ;
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  float *arg2 = (float *) 0 ;
  jfloat *jarr2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return 0; 
  result = (int)(arg1)->pop_min(arg2);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1pop_1min_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  result = (int)(arg1)->pop_min();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1MinimaxHeap_1count_1below(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jint jresult = 0 ;
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  float arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (int)(arg1)->count_below(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HNSW_1MinimaxHeap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HNSW::MinimaxHeap *arg1 = (faiss::HNSW::MinimaxHeap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HNSW::MinimaxHeap **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1NodeDistCloser_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  faiss::HNSW::NodeDistCloser *arg1 = (faiss::HNSW::NodeDistCloser *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::NodeDistCloser **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1NodeDistCloser_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  faiss::HNSW::NodeDistCloser *arg1 = (faiss::HNSW::NodeDistCloser *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::NodeDistCloser **)&jarg1; 
  result = (float) ((arg1)->d);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1NodeDistCloser_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HNSW::NodeDistCloser *arg1 = (faiss::HNSW::NodeDistCloser *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::NodeDistCloser **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1NodeDistCloser_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HNSW::NodeDistCloser *arg1 = (faiss::HNSW::NodeDistCloser *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::NodeDistCloser **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HNSW_1NodeDistCloser(JNIEnv *jenv, jclass jcls, jfloat jarg1, jint jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  int arg2 ;
  faiss::HNSW::NodeDistCloser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::HNSW::NodeDistCloser *)new faiss::HNSW::NodeDistCloser(arg1,arg2);
  *(faiss::HNSW::NodeDistCloser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HNSW_1NodeDistCloser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HNSW::NodeDistCloser *arg1 = (faiss::HNSW::NodeDistCloser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HNSW::NodeDistCloser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1NodeDistFarther_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  faiss::HNSW::NodeDistFarther *arg1 = (faiss::HNSW::NodeDistFarther *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::NodeDistFarther **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1NodeDistFarther_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  faiss::HNSW::NodeDistFarther *arg1 = (faiss::HNSW::NodeDistFarther *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::NodeDistFarther **)&jarg1; 
  result = (float) ((arg1)->d);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1NodeDistFarther_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HNSW::NodeDistFarther *arg1 = (faiss::HNSW::NodeDistFarther *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::NodeDistFarther **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1NodeDistFarther_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HNSW::NodeDistFarther *arg1 = (faiss::HNSW::NodeDistFarther *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::NodeDistFarther **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HNSW_1NodeDistFarther(JNIEnv *jenv, jclass jcls, jfloat jarg1, jint jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  int arg2 ;
  faiss::HNSW::NodeDistFarther *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::HNSW::NodeDistFarther *)new faiss::HNSW::NodeDistFarther(arg1,arg2);
  *(faiss::HNSW::NodeDistFarther **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HNSW_1NodeDistFarther(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HNSW::NodeDistFarther *arg1 = (faiss::HNSW::NodeDistFarther *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HNSW::NodeDistFarther **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1assign_1probas_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->assign_probas = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1assign_1probas_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->assign_probas);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1cum_1nneighbor_1per_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2; 
  if (arg1) (arg1)->cum_nneighbor_per_level = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1cum_1nneighbor_1per_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  result = (std::vector< int > *)& ((arg1)->cum_nneighbor_per_level);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1levels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2; 
  if (arg1) (arg1)->levels = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1levels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  result = (std::vector< int > *)& ((arg1)->levels);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1offsets_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  std::vector< size_t > *arg2 = (std::vector< size_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = *(std::vector< size_t > **)&jarg2; 
  if (arg1) (arg1)->offsets = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1offsets_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  std::vector< size_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  result = (std::vector< size_t > *)& ((arg1)->offsets);
  *(std::vector< size_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1neighbors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  std::vector< faiss::HNSW::storage_idx_t > *arg2 = (std::vector< faiss::HNSW::storage_idx_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = *(std::vector< faiss::HNSW::storage_idx_t > **)&jarg2; 
  if (arg1) (arg1)->neighbors = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1neighbors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  std::vector< faiss::HNSW::storage_idx_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  result = (std::vector< faiss::HNSW::storage_idx_t > *)& ((arg1)->neighbors);
  *(std::vector< faiss::HNSW::storage_idx_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1entry_1point_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  faiss::HNSW::storage_idx_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (faiss::HNSW::storage_idx_t)jarg2; 
  if (arg1) (arg1)->entry_point = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1entry_1point_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  faiss::HNSW::storage_idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  result = (faiss::HNSW::storage_idx_t) ((arg1)->entry_point);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1rng_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  faiss::RandomGenerator *arg2 = (faiss::RandomGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = *(faiss::RandomGenerator **)&jarg2; 
  if (arg1) (arg1)->rng = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1rng_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  faiss::RandomGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  result = (faiss::RandomGenerator *)& ((arg1)->rng);
  *(faiss::RandomGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1max_1level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_level = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1max_1level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  result = (int) ((arg1)->max_level);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1efConstruction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->efConstruction = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1efConstruction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  result = (int) ((arg1)->efConstruction);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1efSearch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->efSearch = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1efSearch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  result = (int) ((arg1)->efSearch);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1upper_1beam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upper_beam = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1upper_1beam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  result = (int) ((arg1)->upper_beam);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1set_1default_1probas(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_default_probas(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1set_1nb_1neighbors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set_nb_neighbors(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1nb_1neighbors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((faiss::HNSW const *)arg1)->nb_neighbors(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1cum_1nb_1neighbors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((faiss::HNSW const *)arg1)->cum_nb_neighbors(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1neighbor_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  faiss::HNSW::idx_t arg2 ;
  int arg3 ;
  size_t *arg4 = (size_t *) 0 ;
  size_t *arg5 = (size_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (faiss::HNSW::idx_t)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(size_t **)&jarg4; 
  arg5 = *(size_t **)&jarg5; 
  ((faiss::HNSW const *)arg1)->neighbor_range(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HNSW_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  faiss::HNSW *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (faiss::HNSW *)new faiss::HNSW(arg1);
  *(faiss::HNSW **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HNSW_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HNSW *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HNSW *)new faiss::HNSW();
  *(faiss::HNSW **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1random_1level(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  result = (int)(arg1)->random_level();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1fill_1with_1random_1links(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->fill_with_random_links(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1add_1links_1starting_1from(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jfloat jarg5, jint jarg6, jlong jarg7, jlong jarg8, jobject jarg8_) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  faiss::HNSW::DistanceComputer *arg2 = 0 ;
  faiss::HNSW::storage_idx_t arg3 ;
  faiss::HNSW::storage_idx_t arg4 ;
  float arg5 ;
  int arg6 ;
  omp_lock_t *arg7 = (omp_lock_t *) 0 ;
  faiss::VisitedTable *arg8 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg8_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = *(faiss::HNSW::DistanceComputer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::HNSW::DistanceComputer & reference is null");
    return ;
  } 
  arg3 = (faiss::HNSW::storage_idx_t)jarg3; 
  arg4 = (faiss::HNSW::storage_idx_t)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(omp_lock_t **)&jarg7; 
  arg8 = *(faiss::VisitedTable **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::VisitedTable & reference is null");
    return ;
  } 
  (arg1)->add_links_starting_from(*arg2,arg3,arg4,arg5,arg6,arg7,*arg8);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1add_1with_1locks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  faiss::HNSW::DistanceComputer *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  std::vector< omp_lock_t > *arg5 = 0 ;
  faiss::VisitedTable *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = *(faiss::HNSW::DistanceComputer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::HNSW::DistanceComputer & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(std::vector< omp_lock_t > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< omp_lock_t > & reference is null");
    return ;
  } 
  arg6 = *(faiss::VisitedTable **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::VisitedTable & reference is null");
    return ;
  } 
  (arg1)->add_with_locks(*arg2,arg3,arg4,*arg5,*arg6);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1search_1from_1candidates_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jintArray jarg4, jfloatArray jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jint jarg8, jint jarg9) {
  jint jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  faiss::HNSW::DistanceComputer *arg2 = 0 ;
  int arg3 ;
  faiss::HNSW::idx_t *arg4 = (faiss::HNSW::idx_t *) 0 ;
  float *arg5 = (float *) 0 ;
  faiss::HNSW::MinimaxHeap *arg6 = 0 ;
  faiss::VisitedTable *arg7 = 0 ;
  int arg8 ;
  int arg9 ;
  jint *jarr4 ;
  jfloat *jarr5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = *(faiss::HNSW::DistanceComputer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::HNSW::DistanceComputer & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return 0; 
  arg6 = *(faiss::HNSW::MinimaxHeap **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::HNSW::MinimaxHeap & reference is null");
    return 0;
  } 
  arg7 = *(faiss::VisitedTable **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::VisitedTable & reference is null");
    return 0;
  } 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (int)((faiss::HNSW const *)arg1)->search_from_candidates(*arg2,arg3,arg4,arg5,*arg6,*arg7,arg8,arg9);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  delete [] arg4; 
  delete [] arg5; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1search_1from_1candidates_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jintArray jarg4, jfloatArray jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jint jarg8) {
  jint jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  faiss::HNSW::DistanceComputer *arg2 = 0 ;
  int arg3 ;
  faiss::HNSW::idx_t *arg4 = (faiss::HNSW::idx_t *) 0 ;
  float *arg5 = (float *) 0 ;
  faiss::HNSW::MinimaxHeap *arg6 = 0 ;
  faiss::VisitedTable *arg7 = 0 ;
  int arg8 ;
  jint *jarr4 ;
  jfloat *jarr5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = *(faiss::HNSW::DistanceComputer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::HNSW::DistanceComputer & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return 0; 
  arg6 = *(faiss::HNSW::MinimaxHeap **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::HNSW::MinimaxHeap & reference is null");
    return 0;
  } 
  arg7 = *(faiss::VisitedTable **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::VisitedTable & reference is null");
    return 0;
  } 
  arg8 = (int)jarg8; 
  result = (int)((faiss::HNSW const *)arg1)->search_from_candidates(*arg2,arg3,arg4,arg5,*arg6,*arg7,arg8);
  jresult = (jint)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  delete [] arg4; 
  delete [] arg5; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1search_1from(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  faiss::HNSW::Node *arg2 = 0 ;
  faiss::HNSW::DistanceComputer *arg3 = 0 ;
  int arg4 ;
  faiss::VisitedTable *arg5 = (faiss::VisitedTable *) 0 ;
  std::priority_queue< faiss::HNSW::Node > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = *(faiss::HNSW::Node **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::HNSW::Node const & reference is null");
    return 0;
  } 
  arg3 = *(faiss::HNSW::DistanceComputer **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::HNSW::DistanceComputer & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = *(faiss::VisitedTable **)&jarg5; 
  result = ((faiss::HNSW const *)arg1)->search_from((faiss::HNSW::Node const &)*arg2,*arg3,arg4,arg5);
  *(std::priority_queue< faiss::HNSW::Node > **)&jresult = new std::priority_queue< faiss::HNSW::Node >((const std::priority_queue< faiss::HNSW::Node > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jintArray jarg4, jfloatArray jarg5, jlong jarg6, jobject jarg6_) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  faiss::HNSW::DistanceComputer *arg2 = 0 ;
  int arg3 ;
  faiss::HNSW::idx_t *arg4 = (faiss::HNSW::idx_t *) 0 ;
  float *arg5 = (float *) 0 ;
  faiss::VisitedTable *arg6 = 0 ;
  jint *jarr4 ;
  jfloat *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = *(faiss::HNSW::DistanceComputer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::HNSW::DistanceComputer & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  arg6 = *(faiss::VisitedTable **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::VisitedTable & reference is null");
    return ;
  } 
  ((faiss::HNSW const *)arg1)->search(*arg2,arg3,arg4,arg5,*arg6);
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1clear_1neighbor_1tables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->clear_neighbor_tables(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1print_1neighbor_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (int)jarg2; 
  ((faiss::HNSW const *)arg1)->print_neighbor_stats(arg2);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1prepare_1level_1tab_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->prepare_level_tab(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1prepare_1level_1tab_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  size_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (int)(arg1)->prepare_level_tab(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSW_1shrink_1neighbor_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  faiss::HNSW::DistanceComputer *arg1 = 0 ;
  std::priority_queue< faiss::HNSW::NodeDistFarther > *arg2 = 0 ;
  std::vector< faiss::HNSW::NodeDistFarther > *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSW::DistanceComputer **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::HNSW::DistanceComputer & reference is null");
    return ;
  } 
  arg2 = *(std::priority_queue< faiss::HNSW::NodeDistFarther > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::priority_queue< faiss::HNSW::NodeDistFarther > & reference is null");
    return ;
  } 
  arg3 = *(std::vector< faiss::HNSW::NodeDistFarther > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< faiss::HNSW::NodeDistFarther > & reference is null");
    return ;
  } 
  arg4 = (int)jarg4; 
  faiss::HNSW::shrink_neighbor_list(*arg1,*arg2,*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HNSW(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HNSW *arg1 = (faiss::HNSW *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HNSW **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VisitedTable_1visited_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::VisitedTable *arg1 = (faiss::VisitedTable *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::VisitedTable **)&jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2; 
  if (arg1) (arg1)->visited = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VisitedTable_1visited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::VisitedTable *arg1 = (faiss::VisitedTable *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VisitedTable **)&jarg1; 
  result = (std::vector< uint8_t > *)& ((arg1)->visited);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VisitedTable_1visno_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::VisitedTable *arg1 = (faiss::VisitedTable *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VisitedTable **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->visno = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VisitedTable_1visno_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::VisitedTable *arg1 = (faiss::VisitedTable *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VisitedTable **)&jarg1; 
  result = (int) ((arg1)->visno);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1VisitedTable(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  faiss::VisitedTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (faiss::VisitedTable *)new faiss::VisitedTable(arg1);
  *(faiss::VisitedTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VisitedTable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::VisitedTable *arg1 = (faiss::VisitedTable *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VisitedTable **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VisitedTable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  faiss::VisitedTable *arg1 = (faiss::VisitedTable *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VisitedTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((faiss::VisitedTable const *)arg1)->get(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VisitedTable_1advance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::VisitedTable *arg1 = (faiss::VisitedTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VisitedTable **)&jarg1; 
  (arg1)->advance();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1VisitedTable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::VisitedTable *arg1 = (faiss::VisitedTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::VisitedTable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSWStats_1n1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->n1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSWStats_1n1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  result = (size_t) ((arg1)->n1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSWStats_1n2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->n2 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSWStats_1n2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  result = (size_t) ((arg1)->n2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSWStats_1n3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->n3 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSWStats_1n3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  result = (size_t) ((arg1)->n3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSWStats_1ndis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->ndis = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSWStats_1ndis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  result = (size_t) ((arg1)->ndis);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSWStats_1nreorder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nreorder = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSWStats_1nreorder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  result = (size_t) ((arg1)->nreorder);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSWStats_1view_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->view = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSWStats_1view_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  result = (bool) ((arg1)->view);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1HNSWStats(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HNSWStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HNSWStats *)new faiss::HNSWStats();
  *(faiss::HNSWStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_HNSWStats_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1HNSWStats(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_hnsw_1stats_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::HNSWStats *arg1 = (faiss::HNSWStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HNSWStats **)&jarg1; 
  faiss::hnsw_stats = *arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_hnsw_1stats_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HNSWStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HNSWStats *)&faiss::hnsw_stats;
  *(faiss::HNSWStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  faiss::IndexHNSW *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  result = (faiss::IndexHNSW *) &(faiss::IndexHNSW const &) ((arg1)->index);
  *(faiss::IndexHNSW **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1M_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->M = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1M_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  result = (size_t) ((arg1)->M);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1k_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->k = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1k_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  result = (size_t) ((arg1)->k);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1nsq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nsq = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1nsq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  result = (size_t) ((arg1)->nsq);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1code_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->code_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1code_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  result = (size_t) ((arg1)->code_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1k_1reorder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->k_reorder = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1k_1reorder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  result = (int) ((arg1)->k_reorder);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1codebook_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->codebook = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1codebook_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->codebook);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1codes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2; 
  if (arg1) (arg1)->codes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1codes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  result = (std::vector< uint8_t > *)& ((arg1)->codes);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1ntotal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->ntotal = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1ntotal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  result = (size_t) ((arg1)->ntotal);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  result = (size_t) ((arg1)->d);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1dsub_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->dsub = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1dsub_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  result = (size_t) ((arg1)->dsub);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ReconstructFromNeighbors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  faiss::IndexHNSW *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::ReconstructFromNeighbors *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IndexHNSW const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (faiss::ReconstructFromNeighbors *)new faiss::ReconstructFromNeighbors((faiss::IndexHNSW const &)*arg1,arg2,arg3);
  *(faiss::ReconstructFromNeighbors **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ReconstructFromNeighbors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::IndexHNSW *arg1 = 0 ;
  size_t arg2 ;
  faiss::ReconstructFromNeighbors *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IndexHNSW const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  result = (faiss::ReconstructFromNeighbors *)new faiss::ReconstructFromNeighbors((faiss::IndexHNSW const &)*arg1,arg2);
  *(faiss::ReconstructFromNeighbors **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ReconstructFromNeighbors_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexHNSW *arg1 = 0 ;
  faiss::ReconstructFromNeighbors *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IndexHNSW const & reference is null");
    return 0;
  } 
  result = (faiss::ReconstructFromNeighbors *)new faiss::ReconstructFromNeighbors((faiss::IndexHNSW const &)*arg1);
  *(faiss::ReconstructFromNeighbors **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1add_1codes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add_codes(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1compute_1distances(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jfloatArray jarg4, jfloatArray jarg5) {
  jlong jresult = 0 ;
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  size_t arg2 ;
  faiss::ReconstructFromNeighbors::idx_t *arg3 = (faiss::ReconstructFromNeighbors::idx_t *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  jint *jarr3 ;
  jfloat *jarr4 ;
  jfloat *jarr5 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return 0; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return 0; 
  result = (size_t)((faiss::ReconstructFromNeighbors const *)arg1)->compute_distances(arg2,(faiss::ReconstructFromNeighbors::idx_t const *)arg3,(float const *)arg4,arg5);
  jresult = (jlong)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1estimate_1code(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jint jarg3, jlong jarg4) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  float *arg2 = (float *) 0 ;
  faiss::ReconstructFromNeighbors::storage_idx_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (faiss::ReconstructFromNeighbors::storage_idx_t)jarg3; 
  arg4 = *(uint8_t **)&jarg4; 
  ((faiss::ReconstructFromNeighbors const *)arg1)->estimate_code((float const *)arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  faiss::ReconstructFromNeighbors::storage_idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = (faiss::ReconstructFromNeighbors::storage_idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::ReconstructFromNeighbors const *)arg1)->reconstruct(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1reconstruct_1n(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloatArray jarg4) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  faiss::ReconstructFromNeighbors::storage_idx_t arg2 ;
  faiss::ReconstructFromNeighbors::storage_idx_t arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = (faiss::ReconstructFromNeighbors::storage_idx_t)jarg2; 
  arg3 = (faiss::ReconstructFromNeighbors::storage_idx_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::ReconstructFromNeighbors const *)arg1)->reconstruct_n(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReconstructFromNeighbors_1get_1neighbor_1table(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  faiss::ReconstructFromNeighbors::storage_idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  arg2 = (faiss::ReconstructFromNeighbors::storage_idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::ReconstructFromNeighbors const *)arg1)->get_neighbor_table(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1ReconstructFromNeighbors(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::ReconstructFromNeighbors *arg1 = (faiss::ReconstructFromNeighbors *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::ReconstructFromNeighbors **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1hnsw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::HNSW *arg2 = (faiss::HNSW *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = *(faiss::HNSW **)&jarg2; 
  if (arg1) (arg1)->hnsw = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1hnsw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::HNSW *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  result = (faiss::HNSW *)& ((arg1)->hnsw);
  *(faiss::HNSW **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1own_1fields_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->own_fields = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1own_1fields_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  result = (bool) ((arg1)->own_fields);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1storage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  if (arg1) (arg1)->storage = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1storage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  result = (faiss::Index *) ((arg1)->storage);
  *(faiss::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1reconstruct_1from_1neighbors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::ReconstructFromNeighbors *arg2 = (faiss::ReconstructFromNeighbors *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = *(faiss::ReconstructFromNeighbors **)&jarg2; 
  if (arg1) (arg1)->reconstruct_from_neighbors = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1reconstruct_1from_1neighbors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::ReconstructFromNeighbors *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  result = (faiss::ReconstructFromNeighbors *) ((arg1)->reconstruct_from_neighbors);
  *(faiss::ReconstructFromNeighbors **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexHNSW(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1get_1distance_1computer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::HNSW::DistanceComputer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  result = (faiss::HNSW::DistanceComputer *)((faiss::IndexHNSW const *)arg1)->get_distance_computer();
  *(faiss::HNSW::DistanceComputer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexHNSW const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::IndexHNSW const *)arg1)->reconstruct(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1shrink_1level_10_1neighbors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->shrink_level_0_neighbors(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1search_1level_10_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jintArray jarg5, jfloatArray jarg6, jfloatArray jarg7, jintArray jarg8, jint jarg9, jint jarg10) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  faiss::IndexHNSW::storage_idx_t *arg5 = (faiss::IndexHNSW::storage_idx_t *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  faiss::Index::idx_t *arg8 = (faiss::Index::idx_t *) 0 ;
  int arg9 ;
  int arg10 ;
  jfloat *jarr3 ;
  jint *jarr5 ;
  jfloat *jarr6 ;
  jfloat *jarr7 ;
  jint *jarr8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr8, (long **)&arg8, jarg8)) return ; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  ((faiss::IndexHNSW const *)arg1)->search_level_0(arg2,(float const *)arg3,arg4,(faiss::IndexHNSW::storage_idx_t const *)arg5,(float const *)arg6,arg7,arg8,arg9,arg10);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  SWIG_JavaArrayArgoutLong(jenv, jarr8, (long *)arg8, jarg8); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
  delete [] arg8; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1search_1level_10_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jintArray jarg5, jfloatArray jarg6, jfloatArray jarg7, jintArray jarg8, jint jarg9) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  faiss::IndexHNSW::storage_idx_t *arg5 = (faiss::IndexHNSW::storage_idx_t *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  faiss::Index::idx_t *arg8 = (faiss::Index::idx_t *) 0 ;
  int arg9 ;
  jfloat *jarr3 ;
  jint *jarr5 ;
  jfloat *jarr6 ;
  jfloat *jarr7 ;
  jint *jarr8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr8, (long **)&arg8, jarg8)) return ; 
  arg9 = (int)jarg9; 
  ((faiss::IndexHNSW const *)arg1)->search_level_0(arg2,(float const *)arg3,arg4,(faiss::IndexHNSW::storage_idx_t const *)arg5,(float const *)arg6,arg7,arg8,arg9);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  SWIG_JavaArrayArgoutLong(jenv, jarr8, (long *)arg8, jarg8); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
  delete [] arg8; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1search_1level_10_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jintArray jarg5, jfloatArray jarg6, jfloatArray jarg7, jintArray jarg8) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  faiss::IndexHNSW::storage_idx_t *arg5 = (faiss::IndexHNSW::storage_idx_t *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  faiss::Index::idx_t *arg8 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jint *jarr5 ;
  jfloat *jarr6 ;
  jfloat *jarr7 ;
  jint *jarr8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr8, (long **)&arg8, jarg8)) return ; 
  ((faiss::IndexHNSW const *)arg1)->search_level_0(arg2,(float const *)arg3,arg4,(faiss::IndexHNSW::storage_idx_t const *)arg5,(float const *)arg6,arg7,arg8);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  SWIG_JavaArrayArgoutLong(jenv, jarr8, (long *)arg8, jarg8); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
  delete [] arg8; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1init_1level_10_1from_1knngraph(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t *arg4 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->init_level_0_from_knngraph(arg2,(float const *)arg3,(faiss::Index::idx_t const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1init_1level_10_1from_1entry_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jintArray jarg3, jintArray jarg4) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  int arg2 ;
  faiss::IndexHNSW::storage_idx_t *arg3 = (faiss::IndexHNSW::storage_idx_t *) 0 ;
  faiss::IndexHNSW::storage_idx_t *arg4 = (faiss::IndexHNSW::storage_idx_t *) 0 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, (int **)&arg4, jarg4)) return ; 
  (arg1)->init_level_0_from_entry_points(arg2,(faiss::IndexHNSW::storage_idx_t const *)arg3,(faiss::IndexHNSW::storage_idx_t const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  SWIG_JavaArrayArgoutInt(jenv, jarr4, (int *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1reorder_1links(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  (arg1)->reorder_links();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1link_1singletons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexHNSW *arg1 = (faiss::IndexHNSW *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW **)&jarg1; 
  (arg1)->link_singletons();
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexHNSWFlat_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexHNSWFlat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexHNSWFlat *)new faiss::IndexHNSWFlat();
  *(faiss::IndexHNSWFlat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexHNSWFlat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  faiss::IndexHNSWFlat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::IndexHNSWFlat *)new faiss::IndexHNSWFlat(arg1,arg2);
  *(faiss::IndexHNSWFlat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSWFlat_1get_1distance_1computer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexHNSWFlat *arg1 = (faiss::IndexHNSWFlat *) 0 ;
  faiss::HNSW::DistanceComputer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSWFlat **)&jarg1; 
  result = (faiss::HNSW::DistanceComputer *)((faiss::IndexHNSWFlat const *)arg1)->get_distance_computer();
  *(faiss::HNSW::DistanceComputer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexHNSWFlat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexHNSWFlat *arg1 = (faiss::IndexHNSWFlat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexHNSWFlat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexHNSWPQ_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexHNSWPQ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexHNSWPQ *)new faiss::IndexHNSWPQ();
  *(faiss::IndexHNSWPQ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexHNSWPQ_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  faiss::IndexHNSWPQ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (faiss::IndexHNSWPQ *)new faiss::IndexHNSWPQ(arg1,arg2,arg3);
  *(faiss::IndexHNSWPQ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSWPQ_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexHNSWPQ *arg1 = (faiss::IndexHNSWPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSWPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSWPQ_1get_1distance_1computer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexHNSWPQ *arg1 = (faiss::IndexHNSWPQ *) 0 ;
  faiss::HNSW::DistanceComputer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSWPQ **)&jarg1; 
  result = (faiss::HNSW::DistanceComputer *)((faiss::IndexHNSWPQ const *)arg1)->get_distance_computer();
  *(faiss::HNSW::DistanceComputer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexHNSWPQ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexHNSWPQ *arg1 = (faiss::IndexHNSWPQ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexHNSWPQ **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexHNSWSQ_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexHNSWSQ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexHNSWSQ *)new faiss::IndexHNSWSQ();
  *(faiss::IndexHNSWSQ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexHNSWSQ_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  faiss::ScalarQuantizer::QuantizerType arg2 ;
  int arg3 ;
  faiss::IndexHNSWSQ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (faiss::ScalarQuantizer::QuantizerType)jarg2; 
  arg3 = (int)jarg3; 
  result = (faiss::IndexHNSWSQ *)new faiss::IndexHNSWSQ(arg1,arg2,arg3);
  *(faiss::IndexHNSWSQ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSWSQ_1get_1distance_1computer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexHNSWSQ *arg1 = (faiss::IndexHNSWSQ *) 0 ;
  faiss::HNSW::DistanceComputer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSWSQ **)&jarg1; 
  result = (faiss::HNSW::DistanceComputer *)((faiss::IndexHNSWSQ const *)arg1)->get_distance_computer();
  *(faiss::HNSW::DistanceComputer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexHNSWSQ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexHNSWSQ *arg1 = (faiss::IndexHNSWSQ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexHNSWSQ **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexHNSW2Level_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexHNSW2Level *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexHNSW2Level *)new faiss::IndexHNSW2Level();
  *(faiss::IndexHNSW2Level **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexHNSW2Level_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  size_t arg2 ;
  int arg3 ;
  int arg4 ;
  faiss::IndexHNSW2Level *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (faiss::IndexHNSW2Level *)new faiss::IndexHNSW2Level(arg1,arg2,arg3,arg4);
  *(faiss::IndexHNSW2Level **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW2Level_1get_1distance_1computer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexHNSW2Level *arg1 = (faiss::IndexHNSW2Level *) 0 ;
  faiss::HNSW::DistanceComputer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW2Level **)&jarg1; 
  result = (faiss::HNSW::DistanceComputer *)((faiss::IndexHNSW2Level const *)arg1)->get_distance_computer();
  *(faiss::HNSW::DistanceComputer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW2Level_1flip_1to_1ivf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexHNSW2Level *arg1 = (faiss::IndexHNSW2Level *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW2Level **)&jarg1; 
  (arg1)->flip_to_ivf();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW2Level_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexHNSW2Level *arg1 = (faiss::IndexHNSW2Level *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexHNSW2Level **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexHNSW2Level const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexHNSW2Level(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexHNSW2Level *arg1 = (faiss::IndexHNSW2Level *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexHNSW2Level **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFFlat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::MetricType arg4 ;
  faiss::IndexIVFFlat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (faiss::MetricType)jarg4; 
  result = (faiss::IndexIVFFlat *)new faiss::IndexIVFFlat(arg1,arg2,arg3,arg4);
  *(faiss::IndexIVFFlat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFFlat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::IndexIVFFlat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (faiss::IndexIVFFlat *)new faiss::IndexIVFFlat(arg1,arg2,arg3);
  *(faiss::IndexIVFFlat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlat_1add_1core(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4, jintArray jarg5) {
  faiss::IndexIVFFlat *arg1 = (faiss::IndexIVFFlat *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  jint *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFFlat **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  (arg1)->add_core(arg2,(float const *)arg3,(long const *)arg4,(long const *)arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlat_1add_1with_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::IndexIVFFlat *arg1 = (faiss::IndexIVFFlat *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFFlat **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add_with_ids(arg2,(float const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlat_1encode_1vectors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4, jlong jarg5) {
  faiss::IndexIVFFlat *arg1 = (faiss::IndexIVFFlat *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t *arg4 = (faiss::Index::idx_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFFlat **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = *(uint8_t **)&jarg5; 
  ((faiss::IndexIVFFlat const *)arg1)->encode_vectors(arg2,(float const *)arg3,(faiss::Index::idx_t const *)arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlat_1get_1InvertedListScanner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  faiss::IndexIVFFlat *arg1 = (faiss::IndexIVFFlat *) 0 ;
  bool arg2 ;
  faiss::InvertedListScanner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFFlat **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (faiss::InvertedListScanner *)((faiss::IndexIVFFlat const *)arg1)->get_InvertedListScanner(arg2);
  *(faiss::InvertedListScanner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlat_1range_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_) {
  faiss::IndexIVFFlat *arg1 = (faiss::IndexIVFFlat *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  faiss::RangeSearchResult *arg5 = (faiss::RangeSearchResult *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(faiss::IndexIVFFlat **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (float)jarg4; 
  arg5 = *(faiss::RangeSearchResult **)&jarg5; 
  ((faiss::IndexIVFFlat const *)arg1)->range_search(arg2,(float const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlat_1update_1vectors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jintArray jarg3, jfloatArray jarg4) {
  faiss::IndexIVFFlat *arg1 = (faiss::IndexIVFFlat *) 0 ;
  int arg2 ;
  faiss::Index::idx_t *arg3 = (faiss::Index::idx_t *) 0 ;
  float *arg4 = (float *) 0 ;
  jint *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFFlat **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  (arg1)->update_vectors(arg2,arg3,(float const *)arg4);
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlat_1reconstruct_1from_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloatArray jarg4) {
  faiss::IndexIVFFlat *arg1 = (faiss::IndexIVFFlat *) 0 ;
  long arg2 ;
  long arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFFlat **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::IndexIVFFlat const *)arg1)->reconstruct_from_offset(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFFlat_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexIVFFlat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexIVFFlat *)new faiss::IndexIVFFlat();
  *(faiss::IndexIVFFlat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexIVFFlat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexIVFFlat *arg1 = (faiss::IndexIVFFlat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexIVFFlat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlatDedup_1instances_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIVFFlatDedup *arg1 = (faiss::IndexIVFFlatDedup *) 0 ;
  std::unordered_multimap< faiss::Index::idx_t,faiss::Index::idx_t > arg2 ;
  std::unordered_multimap< faiss::Index::idx_t,faiss::Index::idx_t > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFFlatDedup **)&jarg1; 
  argp2 = *(std::unordered_multimap< faiss::Index::idx_t,faiss::Index::idx_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::unordered_multimap< faiss::Index::idx_t,faiss::Index::idx_t >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->instances = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlatDedup_1instances_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFFlatDedup *arg1 = (faiss::IndexIVFFlatDedup *) 0 ;
  std::unordered_multimap< faiss::Index::idx_t,faiss::Index::idx_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFFlatDedup **)&jarg1; 
  result =  ((arg1)->instances);
  *(std::unordered_multimap< faiss::Index::idx_t,faiss::Index::idx_t > **)&jresult = new std::unordered_multimap< faiss::Index::idx_t,faiss::Index::idx_t >((const std::unordered_multimap< faiss::Index::idx_t,faiss::Index::idx_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFFlatDedup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::MetricType arg4 ;
  faiss::IndexIVFFlatDedup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (faiss::MetricType)jarg4; 
  result = (faiss::IndexIVFFlatDedup *)new faiss::IndexIVFFlatDedup(arg1,arg2,arg3,arg4);
  *(faiss::IndexIVFFlatDedup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFFlatDedup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::IndexIVFFlatDedup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (faiss::IndexIVFFlatDedup *)new faiss::IndexIVFFlatDedup(arg1,arg2,arg3);
  *(faiss::IndexIVFFlatDedup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlatDedup_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexIVFFlatDedup *arg1 = (faiss::IndexIVFFlatDedup *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFFlatDedup **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlatDedup_1add_1with_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::IndexIVFFlatDedup *arg1 = (faiss::IndexIVFFlatDedup *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFFlatDedup **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add_with_ids(arg2,(float const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlatDedup_1search_1preassigned_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jintArray jarg5, jfloatArray jarg6, jfloatArray jarg7, jintArray jarg8, jboolean jarg9, jlong jarg10, jobject jarg10_) {
  faiss::IndexIVFFlatDedup *arg1 = (faiss::IndexIVFFlatDedup *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  faiss::Index::idx_t *arg5 = (faiss::Index::idx_t *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  faiss::Index::idx_t *arg8 = (faiss::Index::idx_t *) 0 ;
  bool arg9 ;
  faiss::IVFSearchParameters *arg10 = (faiss::IVFSearchParameters *) 0 ;
  jfloat *jarr3 ;
  jint *jarr5 ;
  jfloat *jarr6 ;
  jfloat *jarr7 ;
  jint *jarr8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg10_;
  arg1 = *(faiss::IndexIVFFlatDedup **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr8, (long **)&arg8, jarg8)) return ; 
  arg9 = jarg9 ? true : false; 
  arg10 = *(faiss::IVFSearchParameters **)&jarg10; 
  ((faiss::IndexIVFFlatDedup const *)arg1)->search_preassigned(arg2,(float const *)arg3,arg4,(faiss::Index::idx_t const *)arg5,(float const *)arg6,arg7,arg8,arg9,(faiss::IVFSearchParameters const *)arg10);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  SWIG_JavaArrayArgoutLong(jenv, jarr8, (long *)arg8, jarg8); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
  delete [] arg8; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlatDedup_1search_1preassigned_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jintArray jarg5, jfloatArray jarg6, jfloatArray jarg7, jintArray jarg8, jboolean jarg9) {
  faiss::IndexIVFFlatDedup *arg1 = (faiss::IndexIVFFlatDedup *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  faiss::Index::idx_t *arg5 = (faiss::Index::idx_t *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  faiss::Index::idx_t *arg8 = (faiss::Index::idx_t *) 0 ;
  bool arg9 ;
  jfloat *jarr3 ;
  jint *jarr5 ;
  jfloat *jarr6 ;
  jfloat *jarr7 ;
  jint *jarr8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFFlatDedup **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr8, (long **)&arg8, jarg8)) return ; 
  arg9 = jarg9 ? true : false; 
  ((faiss::IndexIVFFlatDedup const *)arg1)->search_preassigned(arg2,(float const *)arg3,arg4,(faiss::Index::idx_t const *)arg5,(float const *)arg6,arg7,arg8,arg9);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  SWIG_JavaArrayArgoutLong(jenv, jarr8, (long *)arg8, jarg8); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
  delete [] arg8; 
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlatDedup_1remove_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  faiss::IndexIVFFlatDedup *arg1 = (faiss::IndexIVFFlatDedup *) 0 ;
  faiss::IDSelector *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVFFlatDedup **)&jarg1; 
  arg2 = *(faiss::IDSelector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IDSelector const & reference is null");
    return 0;
  } 
  result = (long)(arg1)->remove_ids((faiss::IDSelector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlatDedup_1range_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_) {
  faiss::IndexIVFFlatDedup *arg1 = (faiss::IndexIVFFlatDedup *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  faiss::RangeSearchResult *arg5 = (faiss::RangeSearchResult *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(faiss::IndexIVFFlatDedup **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (float)jarg4; 
  arg5 = *(faiss::RangeSearchResult **)&jarg5; 
  ((faiss::IndexIVFFlatDedup const *)arg1)->range_search(arg2,(float const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlatDedup_1update_1vectors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jintArray jarg3, jfloatArray jarg4) {
  faiss::IndexIVFFlatDedup *arg1 = (faiss::IndexIVFFlatDedup *) 0 ;
  int arg2 ;
  faiss::Index::idx_t *arg3 = (faiss::Index::idx_t *) 0 ;
  float *arg4 = (float *) 0 ;
  jint *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFFlatDedup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  (arg1)->update_vectors(arg2,arg3,(float const *)arg4);
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlatDedup_1reconstruct_1from_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloatArray jarg4) {
  faiss::IndexIVFFlatDedup *arg1 = (faiss::IndexIVFFlatDedup *) 0 ;
  long arg2 ;
  long arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFFlatDedup **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::IndexIVFFlatDedup const *)arg1)->reconstruct_from_offset(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFFlatDedup_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexIVFFlatDedup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexIVFFlatDedup *)new faiss::IndexIVFFlatDedup();
  *(faiss::IndexIVFFlatDedup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexIVFFlatDedup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexIVFFlatDedup *arg1 = (faiss::IndexIVFFlatDedup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexIVFFlatDedup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1List_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::OnDiskInvertedLists::List *arg1 = (faiss::OnDiskInvertedLists::List *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists::List **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1List_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists::List *arg1 = (faiss::OnDiskInvertedLists::List *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists::List **)&jarg1; 
  result = (size_t) ((arg1)->size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1List_1capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::OnDiskInvertedLists::List *arg1 = (faiss::OnDiskInvertedLists::List *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists::List **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1List_1capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists::List *arg1 = (faiss::OnDiskInvertedLists::List *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists::List **)&jarg1; 
  result = (size_t) ((arg1)->capacity);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1List_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::OnDiskInvertedLists::List *arg1 = (faiss::OnDiskInvertedLists::List *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists::List **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1List_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists::List *arg1 = (faiss::OnDiskInvertedLists::List *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists::List **)&jarg1; 
  result = (size_t) ((arg1)->offset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1OnDiskInvertedLists_1List(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists::List *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::OnDiskInvertedLists::List *)new faiss::OnDiskInvertedLists::List();
  *(faiss::OnDiskInvertedLists::List **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1OnDiskInvertedLists_1List(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::OnDiskInvertedLists::List *arg1 = (faiss::OnDiskInvertedLists::List *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::OnDiskInvertedLists::List **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1lists_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  std::vector< faiss::OnDiskInvertedLists::List > *arg2 = (std::vector< faiss::OnDiskInvertedLists::List > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = *(std::vector< faiss::OnDiskInvertedLists::List > **)&jarg2; 
  if (arg1) (arg1)->lists = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1lists_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  std::vector< faiss::OnDiskInvertedLists::List > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  result = (std::vector< faiss::OnDiskInvertedLists::List > *)& ((arg1)->lists);
  *(std::vector< faiss::OnDiskInvertedLists::List > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1Slot_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::OnDiskInvertedLists::Slot *arg1 = (faiss::OnDiskInvertedLists::Slot *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists::Slot **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1Slot_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists::Slot *arg1 = (faiss::OnDiskInvertedLists::Slot *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists::Slot **)&jarg1; 
  result = (size_t) ((arg1)->offset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1Slot_1capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::OnDiskInvertedLists::Slot *arg1 = (faiss::OnDiskInvertedLists::Slot *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists::Slot **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->capacity = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1Slot_1capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists::Slot *arg1 = (faiss::OnDiskInvertedLists::Slot *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists::Slot **)&jarg1; 
  result = (size_t) ((arg1)->capacity);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1OnDiskInvertedLists_1Slot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  faiss::OnDiskInvertedLists::Slot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::OnDiskInvertedLists::Slot *)new faiss::OnDiskInvertedLists::Slot(arg1,arg2);
  *(faiss::OnDiskInvertedLists::Slot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1OnDiskInvertedLists_1Slot_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists::Slot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::OnDiskInvertedLists::Slot *)new faiss::OnDiskInvertedLists::Slot();
  *(faiss::OnDiskInvertedLists::Slot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1OnDiskInvertedLists_1Slot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::OnDiskInvertedLists::Slot *arg1 = (faiss::OnDiskInvertedLists::Slot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::OnDiskInvertedLists::Slot **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1slots_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  std::list< faiss::OnDiskInvertedLists::Slot > *arg2 = (std::list< faiss::OnDiskInvertedLists::Slot > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = *(std::list< faiss::OnDiskInvertedLists::Slot > **)&jarg2; 
  if (arg1) (arg1)->slots = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1slots_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  std::list< faiss::OnDiskInvertedLists::Slot > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  result = (std::list< faiss::OnDiskInvertedLists::Slot > *)& ((arg1)->slots);
  *(std::list< faiss::OnDiskInvertedLists::Slot > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1filename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->filename = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1filename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  result = (std::string *) & ((arg1)->filename);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1totsize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->totsize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1totsize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  result = (size_t) ((arg1)->totsize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1ptr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (arg1) (arg1)->ptr = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1ptr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  result = (uint8_t *) ((arg1)->ptr);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1read_1only_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->read_only = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1read_1only_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  result = (bool) ((arg1)->read_only);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1OnDiskInvertedLists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  faiss::OnDiskInvertedLists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (faiss::OnDiskInvertedLists *)new faiss::OnDiskInvertedLists(arg1,arg2,(char const *)arg3);
  *(faiss::OnDiskInvertedLists **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (size_t)((faiss::OnDiskInvertedLists const *)arg1)->list_size(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1get_1codes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  size_t arg2 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (uint8_t *)((faiss::OnDiskInvertedLists const *)arg1)->get_codes(arg2);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1get_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jintArray jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  size_t arg2 ;
  faiss::InvertedLists::idx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::InvertedLists::idx_t *)((faiss::OnDiskInvertedLists const *)arg1)->get_ids(arg2);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1add_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jintArray jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::InvertedLists::idx_t *arg4 = (faiss::InvertedLists::idx_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  jint *jarr4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return 0; 
  arg5 = *(uint8_t **)&jarg5; 
  result = (size_t)(arg1)->add_entries(arg2,arg3,(faiss::InvertedLists::idx_t const *)arg4,(uint8_t const *)arg5);
  jresult = (jlong)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1update_1entries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jintArray jarg5, jlong jarg6) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  faiss::InvertedLists::idx_t *arg5 = (faiss::InvertedLists::idx_t *) 0 ;
  uint8_t *arg6 = (uint8_t *) 0 ;
  jint *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  arg6 = *(uint8_t **)&jarg6; 
  (arg1)->update_entries(arg2,arg3,arg4,(faiss::InvertedLists::idx_t const *)arg5,(uint8_t const *)arg6);
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1merge_1from(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  faiss::InvertedLists **arg2 = (faiss::InvertedLists **) 0 ;
  int arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = *(faiss::InvertedLists ***)&jarg2; 
  arg3 = (int)jarg3; 
  result = (size_t)(arg1)->merge_from((faiss::InvertedLists const **)arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1prefetch_1lists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jint jarg3) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  long *arg2 = (long *) 0 ;
  int arg3 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return ; 
  arg3 = (int)jarg3; 
  ((faiss::OnDiskInvertedLists const *)arg1)->prefetch_lists((long const *)arg2,arg3);
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1OnDiskInvertedLists(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1locks_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  faiss::LockLevels *arg2 = (faiss::LockLevels *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = *(faiss::LockLevels **)&jarg2; 
  if (arg1) (arg1)->locks = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1locks_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  faiss::LockLevels *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  result = (faiss::LockLevels *) ((arg1)->locks);
  *(faiss::LockLevels **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1pf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  faiss::OnDiskInvertedLists::OngoingPrefetch *arg2 = (faiss::OnDiskInvertedLists::OngoingPrefetch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = *(faiss::OnDiskInvertedLists::OngoingPrefetch **)&jarg2; 
  if (arg1) (arg1)->pf = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1pf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  faiss::OnDiskInvertedLists::OngoingPrefetch *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  result = (faiss::OnDiskInvertedLists::OngoingPrefetch *) ((arg1)->pf);
  *(faiss::OnDiskInvertedLists::OngoingPrefetch **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1do_1mmap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  (arg1)->do_mmap();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1update_1totsize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->update_totsize(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1resize_1locked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->resize_locked(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1allocate_1slot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (size_t)(arg1)->allocate_slot(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1free_1slot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  faiss::OnDiskInvertedLists *arg1 = (faiss::OnDiskInvertedLists *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OnDiskInvertedLists **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->free_slot(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1OnDiskInvertedLists_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::OnDiskInvertedLists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::OnDiskInvertedLists *)new faiss::OnDiskInvertedLists();
  *(faiss::OnDiskInvertedLists **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IVFPQSearchParameters_1scan_1table_1threshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IVFPQSearchParameters *arg1 = (faiss::IVFPQSearchParameters *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IVFPQSearchParameters **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->scan_table_threshold = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IVFPQSearchParameters_1scan_1table_1threshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IVFPQSearchParameters *arg1 = (faiss::IVFPQSearchParameters *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IVFPQSearchParameters **)&jarg1; 
  result = (size_t) ((arg1)->scan_table_threshold);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IVFPQSearchParameters_1polysemous_1ht_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IVFPQSearchParameters *arg1 = (faiss::IVFPQSearchParameters *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IVFPQSearchParameters **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->polysemous_ht = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IVFPQSearchParameters_1polysemous_1ht_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IVFPQSearchParameters *arg1 = (faiss::IVFPQSearchParameters *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IVFPQSearchParameters **)&jarg1; 
  result = (int) ((arg1)->polysemous_ht);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IVFPQSearchParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IVFPQSearchParameters *arg1 = (faiss::IVFPQSearchParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IVFPQSearchParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IVFPQSearchParameters(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IVFPQSearchParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IVFPQSearchParameters *)new faiss::IVFPQSearchParameters();
  *(faiss::IVFPQSearchParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1by_1residual_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->by_residual = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1by_1residual_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  result = (bool) ((arg1)->by_residual);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1pq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  faiss::ProductQuantizer *arg2 = (faiss::ProductQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = *(faiss::ProductQuantizer **)&jarg2; 
  if (arg1) (arg1)->pq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1pq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  faiss::ProductQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  result = (faiss::ProductQuantizer *)& ((arg1)->pq);
  *(faiss::ProductQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1do_1polysemous_1training_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->do_polysemous_training = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1do_1polysemous_1training_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  result = (bool) ((arg1)->do_polysemous_training);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1polysemous_1training_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  faiss::PolysemousTraining *arg2 = (faiss::PolysemousTraining *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = *(faiss::PolysemousTraining **)&jarg2; 
  if (arg1) (arg1)->polysemous_training = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1polysemous_1training_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  faiss::PolysemousTraining *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  result = (faiss::PolysemousTraining *) ((arg1)->polysemous_training);
  *(faiss::PolysemousTraining **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1scan_1table_1threshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->scan_table_threshold = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1scan_1table_1threshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  result = (size_t) ((arg1)->scan_table_threshold);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1polysemous_1ht_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->polysemous_ht = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1polysemous_1ht_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  result = (int) ((arg1)->polysemous_ht);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1use_1precomputed_1table_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->use_precomputed_table = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1use_1precomputed_1table_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  result = (int) ((arg1)->use_precomputed_table);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1precomputed_1table_1max_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  size_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  faiss::IndexIVFPQ::precomputed_table_max_bytes = arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1precomputed_1table_1max_1bytes_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = (size_t)faiss::IndexIVFPQ::precomputed_table_max_bytes;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1precomputed_1table_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->precomputed_table = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1precomputed_1table_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->precomputed_table);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFPQ_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  faiss::IndexIVFPQ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (faiss::IndexIVFPQ *)new faiss::IndexIVFPQ(arg1,arg2,arg3,arg4,arg5);
  *(faiss::IndexIVFPQ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1add_1with_1ids_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add_with_ids(arg2,(float const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1add_1with_1ids_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add_with_ids(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1encode_1vectors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4, jlong jarg5) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t *arg4 = (faiss::Index::idx_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = *(uint8_t **)&jarg5; 
  ((faiss::IndexIVFPQ const *)arg1)->encode_vectors(arg2,(float const *)arg3,(faiss::Index::idx_t const *)arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1add_1core_1o_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  float *arg5 = (float *) 0 ;
  long *arg6 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  (arg1)->add_core_o(arg2,(float const *)arg3,(long const *)arg4,arg5,(long const *)arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1add_1core_1o_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4, jfloatArray jarg5) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  float *arg5 = (float *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  jfloat *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  (arg1)->add_core_o(arg2,(float const *)arg3,(long const *)arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1train_1residual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train_residual(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1train_1residual_1o(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloatArray jarg4) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  (arg1)->train_residual_o(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1reconstruct_1from_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloatArray jarg4) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  long arg2 ;
  long arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::IndexIVFPQ const *)arg1)->reconstruct_from_offset(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1find_1duplicates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  faiss::Index::idx_t *arg2 = (faiss::Index::idx_t *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  jint *jarr2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return 0; 
  arg3 = *(size_t **)&jarg3; 
  result = (size_t)((faiss::IndexIVFPQ const *)arg1)->find_duplicates(arg2,arg3);
  jresult = (jlong)result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1encode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jlong jarg4) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  long arg2 ;
  float *arg3 = (float *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (long)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = *(uint8_t **)&jarg4; 
  ((faiss::IndexIVFPQ const *)arg1)->encode(arg2,(float const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1encode_1multiple_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jfloatArray jarg4, jlong jarg5, jboolean jarg6) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  size_t arg2 ;
  long *arg3 = (long *) 0 ;
  float *arg4 = (float *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  bool arg6 ;
  jint *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  arg5 = *(uint8_t **)&jarg5; 
  arg6 = jarg6 ? true : false; 
  ((faiss::IndexIVFPQ const *)arg1)->encode_multiple(arg2,arg3,(float const *)arg4,arg5,arg6);
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1encode_1multiple_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jfloatArray jarg4, jlong jarg5) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  size_t arg2 ;
  long *arg3 = (long *) 0 ;
  float *arg4 = (float *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  jint *jarr3 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  arg5 = *(uint8_t **)&jarg5; 
  ((faiss::IndexIVFPQ const *)arg1)->encode_multiple(arg2,arg3,(float const *)arg4,arg5);
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1decode_1multiple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jlong jarg4, jfloatArray jarg5) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  size_t arg2 ;
  long *arg3 = (long *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  float *arg5 = (float *) 0 ;
  jint *jarr3 ;
  jfloat *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return ; 
  arg4 = *(uint8_t **)&jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  ((faiss::IndexIVFPQ const *)arg1)->decode_multiple(arg2,(long const *)arg3,(uint8_t const *)arg4,arg5);
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1get_1InvertedListScanner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  bool arg2 ;
  faiss::InvertedListScanner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (faiss::InvertedListScanner *)((faiss::IndexIVFPQ const *)arg1)->get_InvertedListScanner(arg2);
  *(faiss::InvertedListScanner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1precompute_1table(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  (arg1)->precompute_table();
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFPQ_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexIVFPQ *)new faiss::IndexIVFPQ();
  *(faiss::IndexIVFPQ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexIVFPQ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexIVFPQ *arg1 = (faiss::IndexIVFPQ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexIVFPQ **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQStats_1nrefine_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIVFPQStats *arg1 = (faiss::IndexIVFPQStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nrefine = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQStats_1nrefine_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQStats *arg1 = (faiss::IndexIVFPQStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQStats **)&jarg1; 
  result = (size_t) ((arg1)->nrefine);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQStats_1n_1hamming_1pass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIVFPQStats *arg1 = (faiss::IndexIVFPQStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->n_hamming_pass = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQStats_1n_1hamming_1pass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQStats *arg1 = (faiss::IndexIVFPQStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQStats **)&jarg1; 
  result = (size_t) ((arg1)->n_hamming_pass);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQStats_1search_1cycles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIVFPQStats *arg1 = (faiss::IndexIVFPQStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->search_cycles = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQStats_1search_1cycles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQStats *arg1 = (faiss::IndexIVFPQStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQStats **)&jarg1; 
  result = (size_t) ((arg1)->search_cycles);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQStats_1refine_1cycles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIVFPQStats *arg1 = (faiss::IndexIVFPQStats *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQStats **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->refine_cycles = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQStats_1refine_1cycles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQStats *arg1 = (faiss::IndexIVFPQStats *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQStats **)&jarg1; 
  result = (size_t) ((arg1)->refine_cycles);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFPQStats(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexIVFPQStats *)new faiss::IndexIVFPQStats();
  *(faiss::IndexIVFPQStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQStats_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexIVFPQStats *arg1 = (faiss::IndexIVFPQStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQStats **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexIVFPQStats(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexIVFPQStats *arg1 = (faiss::IndexIVFPQStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexIVFPQStats **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_indexIVFPQ_1stats_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexIVFPQStats *arg1 = (faiss::IndexIVFPQStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQStats **)&jarg1; 
  faiss::indexIVFPQ_stats = *arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_indexIVFPQ_1stats_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexIVFPQStats *)&faiss::indexIVFPQ_stats;
  *(faiss::IndexIVFPQStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1refine_1pq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  faiss::ProductQuantizer *arg2 = (faiss::ProductQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  arg2 = *(faiss::ProductQuantizer **)&jarg2; 
  if (arg1) (arg1)->refine_pq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1refine_1pq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  faiss::ProductQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  result = (faiss::ProductQuantizer *)& ((arg1)->refine_pq);
  *(faiss::ProductQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1refine_1codes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2; 
  if (arg1) (arg1)->refine_codes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1refine_1codes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  result = (std::vector< uint8_t > *)& ((arg1)->refine_codes);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1k_1factor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->k_factor = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1k_1factor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  result = (float) ((arg1)->k_factor);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFPQR_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  faiss::IndexIVFPQR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (size_t)jarg7; 
  result = (faiss::IndexIVFPQR *)new faiss::IndexIVFPQR(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(faiss::IndexIVFPQR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1remove_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  faiss::IDSelector *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  arg2 = *(faiss::IDSelector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IDSelector const & reference is null");
    return 0;
  } 
  result = (long)(arg1)->remove_ids((faiss::IDSelector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1train_1residual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train_residual(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1add_1with_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add_with_ids(arg2,(float const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1add_1core_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4, jintArray jarg5) {
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  jint *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  (arg1)->add_core(arg2,(float const *)arg3,(long const *)arg4,(long const *)arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1add_1core_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add_core(arg2,(float const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1reconstruct_1from_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloatArray jarg4) {
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  long arg2 ;
  long arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::IndexIVFPQR const *)arg1)->reconstruct_from_offset(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1merge_1from(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  faiss::IndexIVF *arg2 = 0 ;
  faiss::Index::idx_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  arg2 = *(faiss::IndexIVF **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IndexIVF & reference is null");
    return ;
  } 
  arg3 = (faiss::Index::idx_t)jarg3; 
  (arg1)->merge_from(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1search_1preassigned_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jintArray jarg5, jfloatArray jarg6, jfloatArray jarg7, jintArray jarg8, jboolean jarg9, jlong jarg10, jobject jarg10_) {
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  faiss::Index::idx_t *arg5 = (faiss::Index::idx_t *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  faiss::Index::idx_t *arg8 = (faiss::Index::idx_t *) 0 ;
  bool arg9 ;
  faiss::IVFSearchParameters *arg10 = (faiss::IVFSearchParameters *) 0 ;
  jfloat *jarr3 ;
  jint *jarr5 ;
  jfloat *jarr6 ;
  jfloat *jarr7 ;
  jint *jarr8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg10_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr8, (long **)&arg8, jarg8)) return ; 
  arg9 = jarg9 ? true : false; 
  arg10 = *(faiss::IVFSearchParameters **)&jarg10; 
  ((faiss::IndexIVFPQR const *)arg1)->search_preassigned(arg2,(float const *)arg3,arg4,(faiss::Index::idx_t const *)arg5,(float const *)arg6,arg7,arg8,arg9,(faiss::IVFSearchParameters const *)arg10);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  SWIG_JavaArrayArgoutLong(jenv, jarr8, (long *)arg8, jarg8); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
  delete [] arg8; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1search_1preassigned_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jintArray jarg5, jfloatArray jarg6, jfloatArray jarg7, jintArray jarg8, jboolean jarg9) {
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  faiss::Index::idx_t *arg5 = (faiss::Index::idx_t *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  faiss::Index::idx_t *arg8 = (faiss::Index::idx_t *) 0 ;
  bool arg9 ;
  jfloat *jarr3 ;
  jint *jarr5 ;
  jfloat *jarr6 ;
  jfloat *jarr7 ;
  jint *jarr8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr6, (float **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr7, (float **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr8, (long **)&arg8, jarg8)) return ; 
  arg9 = jarg9 ? true : false; 
  ((faiss::IndexIVFPQR const *)arg1)->search_preassigned(arg2,(float const *)arg3,arg4,(faiss::Index::idx_t const *)arg5,(float const *)arg6,arg7,arg8,arg9);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr6, (float *)arg6, jarg6); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr7, (float *)arg7, jarg7); 
  SWIG_JavaArrayArgoutLong(jenv, jarr8, (long *)arg8, jarg8); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
  delete [] arg8; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIVFPQR_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexIVFPQR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexIVFPQR *)new faiss::IndexIVFPQR();
  *(faiss::IndexIVFPQR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexIVFPQR(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexIVFPQR *arg1 = (faiss::IndexIVFPQR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexIVFPQR **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1q1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  faiss::Level1Quantizer *arg2 = (faiss::Level1Quantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  arg2 = *(faiss::Level1Quantizer **)&jarg2; 
  if (arg1) (arg1)->q1 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1q1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  faiss::Level1Quantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  result = (faiss::Level1Quantizer *)& ((arg1)->q1);
  *(faiss::Level1Quantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1pq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  faiss::ProductQuantizer *arg2 = (faiss::ProductQuantizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  arg2 = *(faiss::ProductQuantizer **)&jarg2; 
  if (arg1) (arg1)->pq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1pq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  faiss::ProductQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  result = (faiss::ProductQuantizer *)& ((arg1)->pq);
  *(faiss::ProductQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1codes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2; 
  if (arg1) (arg1)->codes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1codes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  result = (std::vector< uint8_t > *)& ((arg1)->codes);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1code_1size_11_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->code_size_1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1code_1size_11_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  result = (size_t) ((arg1)->code_size_1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1code_1size_12_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->code_size_2 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1code_1size_12_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  result = (size_t) ((arg1)->code_size_2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1code_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->code_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1code_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  result = (size_t) ((arg1)->code_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1Index2Layer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  size_t arg2 ;
  int arg3 ;
  faiss::MetricType arg4 ;
  faiss::Index2Layer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (faiss::MetricType)jarg4; 
  result = (faiss::Index2Layer *)new faiss::Index2Layer(arg1,arg2,arg3,arg4);
  *(faiss::Index2Layer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1Index2Layer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  size_t arg2 ;
  int arg3 ;
  faiss::Index2Layer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (int)jarg3; 
  result = (faiss::Index2Layer *)new faiss::Index2Layer(arg1,arg2,arg3);
  *(faiss::Index2Layer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1Index2Layer_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::Index2Layer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::Index2Layer *)new faiss::Index2Layer();
  *(faiss::Index2Layer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1Index2Layer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::Index2Layer const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1reconstruct_1n(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloatArray jarg4) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  faiss::Index::idx_t arg2 ;
  faiss::Index::idx_t arg3 ;
  float *arg4 = (float *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  arg3 = (faiss::Index::idx_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  ((faiss::Index2Layer const *)arg1)->reconstruct_n(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::Index2Layer const *)arg1)->reconstruct(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1transfer_1to_1IVFPQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::Index2Layer *arg1 = (faiss::Index2Layer *) 0 ;
  faiss::IndexIVFPQ *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Index2Layer **)&jarg1; 
  arg2 = *(faiss::IndexIVFPQ **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IndexIVFPQ & reference is null");
    return ;
  } 
  ((faiss::Index2Layer const *)arg1)->transfer_to_IVFPQ(*arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  result = (int) ((arg1)->d);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1code_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->code_size = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1code_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  result = (int) ((arg1)->code_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1ntotal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  if (arg1) (arg1)->ntotal = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1ntotal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinary::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  result = (faiss::IndexBinary::idx_t) ((arg1)->ntotal);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1verbose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verbose = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1verbose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  result = (bool) ((arg1)->verbose);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1is_1trained_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_trained = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1is_1trained_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  result = (bool) ((arg1)->is_trained);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1metric_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::MetricType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (faiss::MetricType)jarg2; 
  if (arg1) (arg1)->metric_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1metric_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::MetricType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  result = (faiss::MetricType) ((arg1)->metric_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexBinary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  (arg1)->train(arg2,(uint8_t const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  (arg1)->add(arg2,(uint8_t const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1add_1with_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jintArray jarg4) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  long *arg4 = (long *) 0 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add_with_ids(arg2,(uint8_t const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4, jintArray jarg5, jintArray jarg6) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  faiss::IndexBinary::idx_t arg4 ;
  int32_t *arg5 = (int32_t *) 0 ;
  faiss::IndexBinary::idx_t *arg6 = (faiss::IndexBinary::idx_t *) 0 ;
  jint *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (faiss::IndexBinary::idx_t)jarg4; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexBinary const *)arg1)->search(arg2,(uint8_t const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1range_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  int arg4 ;
  faiss::RangeSearchResult *arg5 = (faiss::RangeSearchResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(faiss::RangeSearchResult **)&jarg5; 
  ((faiss::IndexBinary const *)arg1)->range_search(arg2,(uint8_t const *)arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1assign_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jintArray jarg4, jint jarg5) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  faiss::IndexBinary::idx_t *arg4 = (faiss::IndexBinary::idx_t *) 0 ;
  faiss::IndexBinary::idx_t arg5 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (faiss::IndexBinary::idx_t)jarg5; 
  (arg1)->assign(arg2,(uint8_t const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1assign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jintArray jarg4) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  faiss::IndexBinary::idx_t *arg4 = (faiss::IndexBinary::idx_t *) 0 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->assign(arg2,(uint8_t const *)arg3,arg4);
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1remove_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IDSelector *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = *(faiss::IDSelector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IDSelector const & reference is null");
    return 0;
  } 
  result = (long)(arg1)->remove_ids((faiss::IDSelector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  ((faiss::IndexBinary const *)arg1)->reconstruct(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1reconstruct_1n(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  faiss::IndexBinary::idx_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = (faiss::IndexBinary::idx_t)jarg3; 
  arg4 = *(uint8_t **)&jarg4; 
  ((faiss::IndexBinary const *)arg1)->reconstruct_n(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1search_1and_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4, jintArray jarg5, jintArray jarg6, jlong jarg7) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  faiss::IndexBinary::idx_t arg4 ;
  int32_t *arg5 = (int32_t *) 0 ;
  faiss::IndexBinary::idx_t *arg6 = (faiss::IndexBinary::idx_t *) 0 ;
  uint8_t *arg7 = (uint8_t *) 0 ;
  jint *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (faiss::IndexBinary::idx_t)jarg4; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  arg7 = *(uint8_t **)&jarg7; 
  ((faiss::IndexBinary const *)arg1)->search_and_reconstruct(arg2,(uint8_t const *)arg3,arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinary_1display(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  ((faiss::IndexBinary const *)arg1)->display();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFlat_1xb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexBinaryFlat *arg1 = (faiss::IndexBinaryFlat *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryFlat **)&jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2; 
  if (arg1) (arg1)->xb = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFlat_1xb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryFlat *arg1 = (faiss::IndexBinaryFlat *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFlat **)&jarg1; 
  result = (std::vector< uint8_t > *)& ((arg1)->xb);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFlat_1use_1heap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexBinaryFlat *arg1 = (faiss::IndexBinaryFlat *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFlat **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->use_heap = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFlat_1use_1heap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexBinaryFlat *arg1 = (faiss::IndexBinaryFlat *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFlat **)&jarg1; 
  result = (bool) ((arg1)->use_heap);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFlat_1query_1batch_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexBinaryFlat *arg1 = (faiss::IndexBinaryFlat *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFlat **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->query_batch_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFlat_1query_1batch_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryFlat *arg1 = (faiss::IndexBinaryFlat *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFlat **)&jarg1; 
  result = (size_t) ((arg1)->query_batch_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexBinaryFlat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  faiss::IndexBinary::idx_t arg1 ;
  faiss::IndexBinaryFlat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::IndexBinary::idx_t)jarg1; 
  result = (faiss::IndexBinaryFlat *)new faiss::IndexBinaryFlat(arg1);
  *(faiss::IndexBinaryFlat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFlat_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  faiss::IndexBinaryFlat *arg1 = (faiss::IndexBinaryFlat *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFlat **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  (arg1)->add(arg2,(uint8_t const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFlat_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexBinaryFlat *arg1 = (faiss::IndexBinaryFlat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFlat **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFlat_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4, jintArray jarg5, jintArray jarg6) {
  faiss::IndexBinaryFlat *arg1 = (faiss::IndexBinaryFlat *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  faiss::IndexBinary::idx_t arg4 ;
  int32_t *arg5 = (int32_t *) 0 ;
  faiss::IndexBinary::idx_t *arg6 = (faiss::IndexBinary::idx_t *) 0 ;
  jint *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFlat **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (faiss::IndexBinary::idx_t)jarg4; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexBinaryFlat const *)arg1)->search(arg2,(uint8_t const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFlat_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  faiss::IndexBinaryFlat *arg1 = (faiss::IndexBinaryFlat *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFlat **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  ((faiss::IndexBinaryFlat const *)arg1)->reconstruct(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFlat_1remove_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  faiss::IndexBinaryFlat *arg1 = (faiss::IndexBinaryFlat *) 0 ;
  faiss::IDSelector *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryFlat **)&jarg1; 
  arg2 = *(faiss::IDSelector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IDSelector const & reference is null");
    return 0;
  } 
  result = (long)(arg1)->remove_ids((faiss::IDSelector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexBinaryFlat_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexBinaryFlat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexBinaryFlat *)new faiss::IndexBinaryFlat();
  *(faiss::IndexBinaryFlat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexBinaryFlat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexBinaryFlat *arg1 = (faiss::IndexBinaryFlat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexBinaryFlat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1invlists_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::InvertedLists *arg2 = (faiss::InvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = *(faiss::InvertedLists **)&jarg2; 
  if (arg1) (arg1)->invlists = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1invlists_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::InvertedLists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (faiss::InvertedLists *) ((arg1)->invlists);
  *(faiss::InvertedLists **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1own_1invlists_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->own_invlists = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1own_1invlists_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (bool) ((arg1)->own_invlists);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1nprobe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nprobe = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1nprobe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (size_t) ((arg1)->nprobe);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1max_1codes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->max_codes = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1max_1codes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (size_t) ((arg1)->max_codes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1use_1heap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->use_heap = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1use_1heap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (bool) ((arg1)->use_heap);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1maintain_1direct_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->maintain_direct_map = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1maintain_1direct_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (bool) ((arg1)->maintain_direct_map);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1direct_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  std::vector< long > *arg2 = (std::vector< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = *(std::vector< long > **)&jarg2; 
  if (arg1) (arg1)->direct_map = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1direct_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  std::vector< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (std::vector< long > *)& ((arg1)->direct_map);
  *(std::vector< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1quantizer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IndexBinary *arg2 = (faiss::IndexBinary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = *(faiss::IndexBinary **)&jarg2; 
  if (arg1) (arg1)->quantizer = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1quantizer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IndexBinary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (faiss::IndexBinary *) ((arg1)->quantizer);
  *(faiss::IndexBinary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1nlist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nlist = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1nlist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (size_t) ((arg1)->nlist);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1own_1fields_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->own_fields = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1own_1fields_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (bool) ((arg1)->own_fields);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1cp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::ClusteringParameters *arg2 = (faiss::ClusteringParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = *(faiss::ClusteringParameters **)&jarg2; 
  if (arg1) (arg1)->cp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1cp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::ClusteringParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (faiss::ClusteringParameters *)& ((arg1)->cp);
  *(faiss::ClusteringParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1clustering_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  if (arg1) (arg1)->clustering_index = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1clustering_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (faiss::Index *) ((arg1)->clustering_index);
  *(faiss::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1train_1q1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  size_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->train_q1(arg2,(uint8_t const *)arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexBinaryIVF_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::IndexBinaryIVF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (faiss::IndexBinaryIVF *)new faiss::IndexBinaryIVF(arg1,arg2,arg3);
  *(faiss::IndexBinaryIVF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexBinaryIVF_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexBinaryIVF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexBinaryIVF *)new faiss::IndexBinaryIVF();
  *(faiss::IndexBinaryIVF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexBinaryIVF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  (arg1)->train(arg2,(uint8_t const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  (arg1)->add(arg2,(uint8_t const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1add_1with_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jintArray jarg4) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  long *arg4 = (long *) 0 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add_with_ids(arg2,(uint8_t const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1add_1core(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jintArray jarg4, jintArray jarg5) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  long *arg4 = (long *) 0 ;
  long *arg5 = (long *) 0 ;
  jint *jarr4 ;
  jint *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  (arg1)->add_core(arg2,(uint8_t const *)arg3,(long const *)arg4,(long const *)arg5);
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1search_1preassigned_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4, jintArray jarg5, jintArray jarg6, jintArray jarg7, jintArray jarg8, jboolean jarg9, jlong jarg10, jobject jarg10_) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  faiss::IndexBinary::idx_t arg4 ;
  faiss::IndexBinary::idx_t *arg5 = (faiss::IndexBinary::idx_t *) 0 ;
  int32_t *arg6 = (int32_t *) 0 ;
  int32_t *arg7 = (int32_t *) 0 ;
  faiss::IndexBinary::idx_t *arg8 = (faiss::IndexBinary::idx_t *) 0 ;
  bool arg9 ;
  faiss::IVFSearchParameters *arg10 = (faiss::IVFSearchParameters *) 0 ;
  jint *jarr5 ;
  jint *jarr6 ;
  jint *jarr7 ;
  jint *jarr8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg10_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (faiss::IndexBinary::idx_t)jarg4; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr6, (int **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr7, (int **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr8, (long **)&arg8, jarg8)) return ; 
  arg9 = jarg9 ? true : false; 
  arg10 = *(faiss::IVFSearchParameters **)&jarg10; 
  ((faiss::IndexBinaryIVF const *)arg1)->search_preassigned(arg2,(uint8_t const *)arg3,arg4,(faiss::IndexBinary::idx_t const *)arg5,(int32_t const *)arg6,arg7,arg8,arg9,(faiss::IVFSearchParameters const *)arg10);
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  SWIG_JavaArrayArgoutInt(jenv, jarr6, (int *)arg6, jarg6); 
  SWIG_JavaArrayArgoutInt(jenv, jarr7, (int *)arg7, jarg7); 
  SWIG_JavaArrayArgoutLong(jenv, jarr8, (long *)arg8, jarg8); 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
  delete [] arg8; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1search_1preassigned_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4, jintArray jarg5, jintArray jarg6, jintArray jarg7, jintArray jarg8, jboolean jarg9) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  faiss::IndexBinary::idx_t arg4 ;
  faiss::IndexBinary::idx_t *arg5 = (faiss::IndexBinary::idx_t *) 0 ;
  int32_t *arg6 = (int32_t *) 0 ;
  int32_t *arg7 = (int32_t *) 0 ;
  faiss::IndexBinary::idx_t *arg8 = (faiss::IndexBinary::idx_t *) 0 ;
  bool arg9 ;
  jint *jarr5 ;
  jint *jarr6 ;
  jint *jarr7 ;
  jint *jarr8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (faiss::IndexBinary::idx_t)jarg4; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr5, (long **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr6, (int **)&arg6, jarg6)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr7, (int **)&arg7, jarg7)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr8, (long **)&arg8, jarg8)) return ; 
  arg9 = jarg9 ? true : false; 
  ((faiss::IndexBinaryIVF const *)arg1)->search_preassigned(arg2,(uint8_t const *)arg3,arg4,(faiss::IndexBinary::idx_t const *)arg5,(int32_t const *)arg6,arg7,arg8,arg9);
  SWIG_JavaArrayArgoutLong(jenv, jarr5, (long *)arg5, jarg5); 
  SWIG_JavaArrayArgoutInt(jenv, jarr6, (int *)arg6, jarg6); 
  SWIG_JavaArrayArgoutInt(jenv, jarr7, (int *)arg7, jarg7); 
  SWIG_JavaArrayArgoutLong(jenv, jarr8, (long *)arg8, jarg8); 
  delete [] arg5; 
  delete [] arg6; 
  delete [] arg7; 
  delete [] arg8; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1get_1InvertedListScanner_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  bool arg2 ;
  faiss::BinaryInvertedListScanner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (faiss::BinaryInvertedListScanner *)((faiss::IndexBinaryIVF const *)arg1)->get_InvertedListScanner(arg2);
  *(faiss::BinaryInvertedListScanner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1get_1InvertedListScanner_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::BinaryInvertedListScanner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (faiss::BinaryInvertedListScanner *)((faiss::IndexBinaryIVF const *)arg1)->get_InvertedListScanner();
  *(faiss::BinaryInvertedListScanner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4, jintArray jarg5, jintArray jarg6) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  faiss::IndexBinary::idx_t arg4 ;
  int32_t *arg5 = (int32_t *) 0 ;
  faiss::IndexBinary::idx_t *arg6 = (faiss::IndexBinary::idx_t *) 0 ;
  jint *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (faiss::IndexBinary::idx_t)jarg4; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexBinaryIVF const *)arg1)->search(arg2,(uint8_t const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  ((faiss::IndexBinaryIVF const *)arg1)->reconstruct(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1reconstruct_1n(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  faiss::IndexBinary::idx_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = (faiss::IndexBinary::idx_t)jarg3; 
  arg4 = *(uint8_t **)&jarg4; 
  ((faiss::IndexBinaryIVF const *)arg1)->reconstruct_n(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1search_1and_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4, jintArray jarg5, jintArray jarg6, jlong jarg7) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  faiss::IndexBinary::idx_t arg4 ;
  int32_t *arg5 = (int32_t *) 0 ;
  faiss::IndexBinary::idx_t *arg6 = (faiss::IndexBinary::idx_t *) 0 ;
  uint8_t *arg7 = (uint8_t *) 0 ;
  jint *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (faiss::IndexBinary::idx_t)jarg4; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  arg7 = *(uint8_t **)&jarg7; 
  ((faiss::IndexBinaryIVF const *)arg1)->search_and_reconstruct(arg2,(uint8_t const *)arg3,arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1reconstruct_1from_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  long arg2 ;
  long arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = *(uint8_t **)&jarg4; 
  ((faiss::IndexBinaryIVF const *)arg1)->reconstruct_from_offset(arg2,arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1remove_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IDSelector *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = *(faiss::IDSelector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IDSelector const & reference is null");
    return 0;
  } 
  result = (long)(arg1)->remove_ids((faiss::IDSelector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1merge_1from(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::IndexBinaryIVF *arg2 = 0 ;
  faiss::IndexBinary::idx_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = *(faiss::IndexBinaryIVF **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IndexBinaryIVF & reference is null");
    return ;
  } 
  arg3 = (faiss::IndexBinary::idx_t)jarg3; 
  (arg1)->merge_from(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1get_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (size_t)((faiss::IndexBinaryIVF const *)arg1)->get_list_size(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1make_1direct_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->make_direct_map(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1make_1direct_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  (arg1)->make_direct_map();
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1imbalance_1factor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  result = (double)((faiss::IndexBinaryIVF const *)arg1)->imbalance_factor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1print_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  ((faiss::IndexBinaryIVF const *)arg1)->print_stats();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1replace_1invlists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::InvertedLists *arg2 = (faiss::InvertedLists *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = *(faiss::InvertedLists **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->replace_invlists(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1replace_1invlists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexBinaryIVF *arg1 = (faiss::IndexBinaryIVF *) 0 ;
  faiss::InvertedLists *arg2 = (faiss::InvertedLists *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryIVF **)&jarg1; 
  arg2 = *(faiss::InvertedLists **)&jarg2; 
  (arg1)->replace_invlists(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFromFloat_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexBinaryFromFloat *arg1 = (faiss::IndexBinaryFromFloat *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryFromFloat **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFromFloat_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryFromFloat *arg1 = (faiss::IndexBinaryFromFloat *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFromFloat **)&jarg1; 
  result = (faiss::Index *) ((arg1)->index);
  *(faiss::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFromFloat_1own_1fields_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexBinaryFromFloat *arg1 = (faiss::IndexBinaryFromFloat *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFromFloat **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->own_fields = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFromFloat_1own_1fields_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexBinaryFromFloat *arg1 = (faiss::IndexBinaryFromFloat *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFromFloat **)&jarg1; 
  result = (bool) ((arg1)->own_fields);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexBinaryFromFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexBinaryFromFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexBinaryFromFloat *)new faiss::IndexBinaryFromFloat();
  *(faiss::IndexBinaryFromFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexBinaryFromFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::IndexBinaryFromFloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (faiss::IndexBinaryFromFloat *)new faiss::IndexBinaryFromFloat(arg1);
  *(faiss::IndexBinaryFromFloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexBinaryFromFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexBinaryFromFloat *arg1 = (faiss::IndexBinaryFromFloat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexBinaryFromFloat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFromFloat_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  faiss::IndexBinaryFromFloat *arg1 = (faiss::IndexBinaryFromFloat *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFromFloat **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  (arg1)->add(arg2,(uint8_t const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFromFloat_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexBinaryFromFloat *arg1 = (faiss::IndexBinaryFromFloat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFromFloat **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFromFloat_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4, jintArray jarg5, jintArray jarg6) {
  faiss::IndexBinaryFromFloat *arg1 = (faiss::IndexBinaryFromFloat *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  faiss::IndexBinary::idx_t arg4 ;
  int32_t *arg5 = (int32_t *) 0 ;
  faiss::IndexBinary::idx_t *arg6 = (faiss::IndexBinary::idx_t *) 0 ;
  jint *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFromFloat **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (faiss::IndexBinary::idx_t)jarg4; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexBinaryFromFloat const *)arg1)->search(arg2,(uint8_t const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFromFloat_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  faiss::IndexBinaryFromFloat *arg1 = (faiss::IndexBinaryFromFloat *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryFromFloat **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  (arg1)->train(arg2,(uint8_t const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryHNSW_1hnsw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexBinaryHNSW *arg1 = (faiss::IndexBinaryHNSW *) 0 ;
  faiss::HNSW *arg2 = (faiss::HNSW *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryHNSW **)&jarg1; 
  arg2 = *(faiss::HNSW **)&jarg2; 
  if (arg1) (arg1)->hnsw = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryHNSW_1hnsw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryHNSW *arg1 = (faiss::IndexBinaryHNSW *) 0 ;
  faiss::HNSW *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryHNSW **)&jarg1; 
  result = (faiss::HNSW *)& ((arg1)->hnsw);
  *(faiss::HNSW **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryHNSW_1own_1fields_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexBinaryHNSW *arg1 = (faiss::IndexBinaryHNSW *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryHNSW **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->own_fields = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryHNSW_1own_1fields_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexBinaryHNSW *arg1 = (faiss::IndexBinaryHNSW *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryHNSW **)&jarg1; 
  result = (bool) ((arg1)->own_fields);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryHNSW_1storage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexBinaryHNSW *arg1 = (faiss::IndexBinaryHNSW *) 0 ;
  faiss::IndexBinary *arg2 = (faiss::IndexBinary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinaryHNSW **)&jarg1; 
  arg2 = *(faiss::IndexBinary **)&jarg2; 
  if (arg1) (arg1)->storage = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryHNSW_1storage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryHNSW *arg1 = (faiss::IndexBinaryHNSW *) 0 ;
  faiss::IndexBinary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryHNSW **)&jarg1; 
  result = (faiss::IndexBinary *) ((arg1)->storage);
  *(faiss::IndexBinary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexBinaryHNSW_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexBinaryHNSW *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexBinaryHNSW *)new faiss::IndexBinaryHNSW();
  *(faiss::IndexBinaryHNSW **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexBinaryHNSW_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  faiss::IndexBinaryHNSW *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::IndexBinaryHNSW *)new faiss::IndexBinaryHNSW(arg1,arg2);
  *(faiss::IndexBinaryHNSW **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexBinaryHNSW_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  faiss::IndexBinaryHNSW *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (faiss::IndexBinaryHNSW *)new faiss::IndexBinaryHNSW(arg1);
  *(faiss::IndexBinaryHNSW **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexBinaryHNSW_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  int arg2 ;
  faiss::IndexBinaryHNSW *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::IndexBinaryHNSW *)new faiss::IndexBinaryHNSW(arg1,arg2);
  *(faiss::IndexBinaryHNSW **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexBinaryHNSW_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinaryHNSW *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  result = (faiss::IndexBinaryHNSW *)new faiss::IndexBinaryHNSW(arg1);
  *(faiss::IndexBinaryHNSW **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexBinaryHNSW(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexBinaryHNSW *arg1 = (faiss::IndexBinaryHNSW *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexBinaryHNSW **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryHNSW_1get_1distance_1computer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinaryHNSW *arg1 = (faiss::IndexBinaryHNSW *) 0 ;
  faiss::HNSW::DistanceComputer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryHNSW **)&jarg1; 
  result = (faiss::HNSW::DistanceComputer *)((faiss::IndexBinaryHNSW const *)arg1)->get_distance_computer();
  *(faiss::HNSW::DistanceComputer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryHNSW_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  faiss::IndexBinaryHNSW *arg1 = (faiss::IndexBinaryHNSW *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryHNSW **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  (arg1)->add(arg2,(uint8_t const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryHNSW_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  faiss::IndexBinaryHNSW *arg1 = (faiss::IndexBinaryHNSW *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryHNSW **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  (arg1)->train(arg2,(uint8_t const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryHNSW_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4, jintArray jarg5, jintArray jarg6) {
  faiss::IndexBinaryHNSW *arg1 = (faiss::IndexBinaryHNSW *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  faiss::IndexBinary::idx_t arg4 ;
  int32_t *arg5 = (int32_t *) 0 ;
  faiss::IndexBinary::idx_t *arg6 = (faiss::IndexBinary::idx_t *) 0 ;
  jint *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryHNSW **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (faiss::IndexBinary::idx_t)jarg4; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr5, (int **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexBinaryHNSW const *)arg1)->search(arg2,(uint8_t const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutInt(jenv, jarr5, (int *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryHNSW_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  faiss::IndexBinaryHNSW *arg1 = (faiss::IndexBinaryHNSW *) 0 ;
  faiss::IndexBinary::idx_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryHNSW **)&jarg1; 
  arg2 = (faiss::IndexBinary::idx_t)jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  ((faiss::IndexBinaryHNSW const *)arg1)->reconstruct(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryHNSW_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexBinaryHNSW *arg1 = (faiss::IndexBinaryHNSW *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinaryHNSW **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  result = (faiss::Index *) ((arg1)->index);
  *(faiss::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1own_1fields_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->own_fields = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1own_1fields_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  result = (bool) ((arg1)->own_fields);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1id_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  std::vector< long > *arg2 = (std::vector< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  arg2 = *(std::vector< long > **)&jarg2; 
  if (arg1) (arg1)->id_map = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1id_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  std::vector< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  result = (std::vector< long > *)& ((arg1)->id_map);
  *(std::vector< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIDMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::IndexIDMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (faiss::IndexIDMap *)new faiss::IndexIDMap(arg1);
  *(faiss::IndexIDMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1add_1with_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add_with_ids(arg2,(float const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexIDMap const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1remove_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  faiss::IDSelector *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  arg2 = *(faiss::IDSelector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IDSelector const & reference is null");
    return 0;
  } 
  result = (long)(arg1)->remove_ids((faiss::IDSelector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1range_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_) {
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  faiss::RangeSearchResult *arg5 = (faiss::RangeSearchResult *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (float)jarg4; 
  arg5 = *(faiss::RangeSearchResult **)&jarg5; 
  ((faiss::IndexIDMap const *)arg1)->range_search(arg2,(float const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexIDMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexIDMap *arg1 = (faiss::IndexIDMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexIDMap **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIDMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexIDMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexIDMap *)new faiss::IndexIDMap();
  *(faiss::IndexIDMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap2_1rev_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexIDMap2 *arg1 = (faiss::IndexIDMap2 *) 0 ;
  std::unordered_map< faiss::Index::idx_t,faiss::Index::idx_t > arg2 ;
  std::unordered_map< faiss::Index::idx_t,faiss::Index::idx_t > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap2 **)&jarg1; 
  argp2 = *(std::unordered_map< faiss::Index::idx_t,faiss::Index::idx_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::unordered_map< faiss::Index::idx_t,faiss::Index::idx_t >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->rev_map = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap2_1rev_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexIDMap2 *arg1 = (faiss::IndexIDMap2 *) 0 ;
  std::unordered_map< faiss::Index::idx_t,faiss::Index::idx_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap2 **)&jarg1; 
  result =  ((arg1)->rev_map);
  *(std::unordered_map< faiss::Index::idx_t,faiss::Index::idx_t > **)&jresult = new std::unordered_map< faiss::Index::idx_t,faiss::Index::idx_t >((const std::unordered_map< faiss::Index::idx_t,faiss::Index::idx_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIDMap2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::IndexIDMap2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (faiss::IndexIDMap2 *)new faiss::IndexIDMap2(arg1);
  *(faiss::IndexIDMap2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap2_1construct_1rev_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexIDMap2 *arg1 = (faiss::IndexIDMap2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap2 **)&jarg1; 
  (arg1)->construct_rev_map();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap2_1add_1with_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::IndexIDMap2 *arg1 = (faiss::IndexIDMap2 *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap2 **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add_with_ids(arg2,(float const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap2_1remove_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  faiss::IndexIDMap2 *arg1 = (faiss::IndexIDMap2 *) 0 ;
  faiss::IDSelector *arg2 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexIDMap2 **)&jarg1; 
  arg2 = *(faiss::IDSelector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::IDSelector const & reference is null");
    return 0;
  } 
  result = (long)(arg1)->remove_ids((faiss::IDSelector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap2_1reconstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexIDMap2 *arg1 = (faiss::IndexIDMap2 *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexIDMap2 **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  ((faiss::IndexIDMap2 const *)arg1)->reconstruct(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexIDMap2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexIDMap2 *arg1 = (faiss::IndexIDMap2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexIDMap2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexIDMap2_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::IndexIDMap2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::IndexIDMap2 *)new faiss::IndexIDMap2();
  *(faiss::IndexIDMap2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1shard_1indexes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  std::vector< faiss::Index * > *arg2 = (std::vector< faiss::Index * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  arg2 = *(std::vector< faiss::Index * > **)&jarg2; 
  if (arg1) (arg1)->shard_indexes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1shard_1indexes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  std::vector< faiss::Index * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  result = (std::vector< faiss::Index * > *)& ((arg1)->shard_indexes);
  *(std::vector< faiss::Index * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1own_1fields_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->own_fields = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1own_1fields_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  result = (bool) ((arg1)->own_fields);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1threaded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->threaded = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1threaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  result = (bool) ((arg1)->threaded);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1successive_1ids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->successive_ids = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1successive_1ids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  result = (bool) ((arg1)->successive_ids);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexShards_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  faiss::Index::idx_t arg1 ;
  bool arg2 ;
  bool arg3 ;
  faiss::IndexShards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::Index::idx_t)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (faiss::IndexShards *)new faiss::IndexShards(arg1,arg2,arg3);
  *(faiss::IndexShards **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexShards_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  faiss::Index::idx_t arg1 ;
  bool arg2 ;
  faiss::IndexShards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::Index::idx_t)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (faiss::IndexShards *)new faiss::IndexShards(arg1,arg2);
  *(faiss::IndexShards **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexShards_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  faiss::Index::idx_t arg1 ;
  faiss::IndexShards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::Index::idx_t)jarg1; 
  result = (faiss::IndexShards *)new faiss::IndexShards(arg1);
  *(faiss::IndexShards **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1add_1shard(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  (arg1)->add_shard(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1sync_1with_1shard_1indexes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  (arg1)->sync_with_shard_indexes();
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  int arg2 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::Index *)(arg1)->at(arg2);
  *(faiss::Index **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1add_1with_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  long *arg4 = (long *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add_with_ids(arg2,(float const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexShards const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexShards(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexShards *arg1 = (faiss::IndexShards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexShards **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1own_1fields_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->own_fields = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1own_1fields_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  result = (bool) ((arg1)->own_fields);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1threaded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->threaded = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1threaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  result = (bool) ((arg1)->threaded);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1sub_1indexes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  std::vector< faiss::Index * > *arg2 = (std::vector< faiss::Index * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  arg2 = *(std::vector< faiss::Index * > **)&jarg2; 
  if (arg1) (arg1)->sub_indexes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1sub_1indexes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  std::vector< faiss::Index * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  result = (std::vector< faiss::Index * > *)& ((arg1)->sub_indexes);
  *(std::vector< faiss::Index * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1sum_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  faiss::Index::idx_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (arg1) (arg1)->sum_d = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1sum_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  faiss::Index::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  result = (faiss::Index::idx_t) ((arg1)->sum_d);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexSplitVectors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  faiss::Index::idx_t arg1 ;
  bool arg2 ;
  faiss::IndexSplitVectors *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::Index::idx_t)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (faiss::IndexSplitVectors *)new faiss::IndexSplitVectors(arg1,arg2);
  *(faiss::IndexSplitVectors **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IndexSplitVectors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  faiss::Index::idx_t arg1 ;
  faiss::IndexSplitVectors *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::Index::idx_t)jarg1; 
  result = (faiss::IndexSplitVectors *)new faiss::IndexSplitVectors(arg1);
  *(faiss::IndexSplitVectors **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1add_1sub_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  (arg1)->add_sub_index(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1sync_1with_1sub_1indexes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  (arg1)->sync_with_sub_indexes();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->add(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jint jarg4, jfloatArray jarg5, jintArray jarg6) {
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::Index::idx_t arg4 ;
  float *arg5 = (float *) 0 ;
  faiss::Index::idx_t *arg6 = (faiss::Index::idx_t *) 0 ;
  jfloat *jarr3 ;
  jfloat *jarr5 ;
  jint *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::Index::idx_t)jarg4; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr6, (long **)&arg6, jarg6)) return ; 
  ((faiss::IndexSplitVectors const *)arg1)->search(arg2,(float const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  SWIG_JavaArrayArgoutLong(jenv, jarr6, (long *)arg6, jarg6); 
  delete [] arg3; 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3) {
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  faiss::Index::idx_t arg2 ;
  float *arg3 = (float *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  arg2 = (faiss::Index::idx_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->train(arg2,(float const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IndexSplitVectors(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IndexSplitVectors *arg1 = (faiss::IndexSplitVectors *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IndexSplitVectors **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_downcast_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (faiss::Index *)downcast_index(arg1);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIDMap *> (result)) {
      faiss::IndexIDMap *instance_ptr = (faiss::IndexIDMap *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexShards *> (result)) {
      faiss::IndexShards *instance_ptr = (faiss::IndexShards *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQR *> (result)) {
      faiss::IndexIVFPQR *instance_ptr = (faiss::IndexIVFPQR *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQ *> (result)) {
      faiss::IndexIVFPQ *instance_ptr = (faiss::IndexIVFPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFScalarQuantizer *> (result)) {
      faiss::IndexIVFScalarQuantizer *instance_ptr = (faiss::IndexIVFScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlatDedup *> (result)) {
      faiss::IndexIVFFlatDedup *instance_ptr = (faiss::IndexIVFFlatDedup *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlat *> (result)) {
      faiss::IndexIVFFlat *instance_ptr = (faiss::IndexIVFFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVF *> (result)) {
      faiss::IndexIVF *instance_ptr = (faiss::IndexIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexFlat *> (result)) {
      faiss::IndexFlat *instance_ptr = (faiss::IndexFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPQ *> (result)) {
      faiss::IndexPQ *instance_ptr = (faiss::IndexPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexScalarQuantizer *> (result)) {
      faiss::IndexScalarQuantizer *instance_ptr = (faiss::IndexScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexLSH *> (result)) {
      faiss::IndexLSH *instance_ptr = (faiss::IndexLSH *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPreTransform *> (result)) {
      faiss::IndexPreTransform *instance_ptr = (faiss::IndexPreTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::MultiIndexQuantizer *> (result)) {
      faiss::MultiIndexQuantizer *instance_ptr = (faiss::MultiIndexQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWFlat *> (result)) {
      faiss::IndexHNSWFlat *instance_ptr = (faiss::IndexHNSWFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWPQ *> (result)) {
      faiss::IndexHNSWPQ *instance_ptr = (faiss::IndexHNSWPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWSQ *> (result)) {
      faiss::IndexHNSWSQ *instance_ptr = (faiss::IndexHNSWSQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSW2Level *> (result)) {
      faiss::IndexHNSW2Level *instance_ptr = (faiss::IndexHNSW2Level *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index2Layer *> (result)) {
      faiss::Index2Layer *instance_ptr = (faiss::Index2Layer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index *> (result)) {
      faiss::Index *instance_ptr = (faiss::Index *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_downcast_1VectorTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  faiss::VectorTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  result = (faiss::VectorTransform *)downcast_VectorTransform(arg1);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::RemapDimensionsTransform *> (result)) {
      faiss::RemapDimensionsTransform *instance_ptr = (faiss::RemapDimensionsTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::OPQMatrix *> (result)) {
      faiss::OPQMatrix *instance_ptr = (faiss::OPQMatrix *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::PCAMatrix *> (result)) {
      faiss::PCAMatrix *instance_ptr = (faiss::PCAMatrix *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::RandomRotationMatrix *> (result)) {
      faiss::RandomRotationMatrix *instance_ptr = (faiss::RandomRotationMatrix *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::LinearTransform *> (result)) {
      faiss::LinearTransform *instance_ptr = (faiss::LinearTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::NormalizationTransform *> (result)) {
      faiss::NormalizationTransform *instance_ptr = (faiss::NormalizationTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::VectorTransform *> (result)) {
      faiss::VectorTransform *instance_ptr = (faiss::VectorTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_downcast_1IndexBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IndexBinary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  result = (faiss::IndexBinary *)downcast_IndexBinary(arg1);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryIVF *> (result)) {
      faiss::IndexBinaryIVF *instance_ptr = (faiss::IndexBinaryIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFlat *> (result)) {
      faiss::IndexBinaryFlat *instance_ptr = (faiss::IndexBinaryFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFromFloat *> (result)) {
      faiss::IndexBinaryFromFloat *instance_ptr = (faiss::IndexBinaryFromFloat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryHNSW *> (result)) {
      faiss::IndexBinaryHNSW *instance_ptr = (faiss::IndexBinaryHNSW *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinary *> (result)) {
      faiss::IndexBinary *instance_ptr = (faiss::IndexBinary *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_write_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  faiss::write_index((faiss::Index const *)arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_write_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  faiss::write_index((faiss::Index const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_write_1index_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::IOWriter *arg2 = (faiss::IOWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Index **)&jarg1; 
  arg2 = *(faiss::IOWriter **)&jarg2; 
  faiss::write_index((faiss::Index const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_write_1index_1binary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  faiss::write_index_binary((faiss::IndexBinary const *)arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_write_1index_1binary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  faiss::write_index_binary((faiss::IndexBinary const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_write_1index_1binary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::IndexBinary *arg1 = (faiss::IndexBinary *) 0 ;
  faiss::IOWriter *arg2 = (faiss::IOWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::IndexBinary **)&jarg1; 
  arg2 = *(faiss::IOWriter **)&jarg2; 
  faiss::write_index_binary((faiss::IndexBinary const *)arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IO_1FLAG_1MMAP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)faiss::IO_FLAG_MMAP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IO_1FLAG_1READ_1ONLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)faiss::IO_FLAG_READ_ONLY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1index_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (faiss::Index *)faiss::read_index((char const *)arg1,arg2);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIDMap *> (result)) {
      faiss::IndexIDMap *instance_ptr = (faiss::IndexIDMap *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexShards *> (result)) {
      faiss::IndexShards *instance_ptr = (faiss::IndexShards *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQR *> (result)) {
      faiss::IndexIVFPQR *instance_ptr = (faiss::IndexIVFPQR *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQ *> (result)) {
      faiss::IndexIVFPQ *instance_ptr = (faiss::IndexIVFPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFScalarQuantizer *> (result)) {
      faiss::IndexIVFScalarQuantizer *instance_ptr = (faiss::IndexIVFScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlatDedup *> (result)) {
      faiss::IndexIVFFlatDedup *instance_ptr = (faiss::IndexIVFFlatDedup *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlat *> (result)) {
      faiss::IndexIVFFlat *instance_ptr = (faiss::IndexIVFFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVF *> (result)) {
      faiss::IndexIVF *instance_ptr = (faiss::IndexIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexFlat *> (result)) {
      faiss::IndexFlat *instance_ptr = (faiss::IndexFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPQ *> (result)) {
      faiss::IndexPQ *instance_ptr = (faiss::IndexPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexScalarQuantizer *> (result)) {
      faiss::IndexScalarQuantizer *instance_ptr = (faiss::IndexScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexLSH *> (result)) {
      faiss::IndexLSH *instance_ptr = (faiss::IndexLSH *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPreTransform *> (result)) {
      faiss::IndexPreTransform *instance_ptr = (faiss::IndexPreTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::MultiIndexQuantizer *> (result)) {
      faiss::MultiIndexQuantizer *instance_ptr = (faiss::MultiIndexQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWFlat *> (result)) {
      faiss::IndexHNSWFlat *instance_ptr = (faiss::IndexHNSWFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWPQ *> (result)) {
      faiss::IndexHNSWPQ *instance_ptr = (faiss::IndexHNSWPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWSQ *> (result)) {
      faiss::IndexHNSWSQ *instance_ptr = (faiss::IndexHNSWSQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSW2Level *> (result)) {
      faiss::IndexHNSW2Level *instance_ptr = (faiss::IndexHNSW2Level *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index2Layer *> (result)) {
      faiss::Index2Layer *instance_ptr = (faiss::Index2Layer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index *> (result)) {
      faiss::Index *instance_ptr = (faiss::Index *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1index_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (faiss::Index *)faiss::read_index((char const *)arg1);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIDMap *> (result)) {
      faiss::IndexIDMap *instance_ptr = (faiss::IndexIDMap *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexShards *> (result)) {
      faiss::IndexShards *instance_ptr = (faiss::IndexShards *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQR *> (result)) {
      faiss::IndexIVFPQR *instance_ptr = (faiss::IndexIVFPQR *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQ *> (result)) {
      faiss::IndexIVFPQ *instance_ptr = (faiss::IndexIVFPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFScalarQuantizer *> (result)) {
      faiss::IndexIVFScalarQuantizer *instance_ptr = (faiss::IndexIVFScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlatDedup *> (result)) {
      faiss::IndexIVFFlatDedup *instance_ptr = (faiss::IndexIVFFlatDedup *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlat *> (result)) {
      faiss::IndexIVFFlat *instance_ptr = (faiss::IndexIVFFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVF *> (result)) {
      faiss::IndexIVF *instance_ptr = (faiss::IndexIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexFlat *> (result)) {
      faiss::IndexFlat *instance_ptr = (faiss::IndexFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPQ *> (result)) {
      faiss::IndexPQ *instance_ptr = (faiss::IndexPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexScalarQuantizer *> (result)) {
      faiss::IndexScalarQuantizer *instance_ptr = (faiss::IndexScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexLSH *> (result)) {
      faiss::IndexLSH *instance_ptr = (faiss::IndexLSH *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPreTransform *> (result)) {
      faiss::IndexPreTransform *instance_ptr = (faiss::IndexPreTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::MultiIndexQuantizer *> (result)) {
      faiss::MultiIndexQuantizer *instance_ptr = (faiss::MultiIndexQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWFlat *> (result)) {
      faiss::IndexHNSWFlat *instance_ptr = (faiss::IndexHNSWFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWPQ *> (result)) {
      faiss::IndexHNSWPQ *instance_ptr = (faiss::IndexHNSWPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWSQ *> (result)) {
      faiss::IndexHNSWSQ *instance_ptr = (faiss::IndexHNSWSQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSW2Level *> (result)) {
      faiss::IndexHNSW2Level *instance_ptr = (faiss::IndexHNSW2Level *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index2Layer *> (result)) {
      faiss::Index2Layer *instance_ptr = (faiss::Index2Layer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index *> (result)) {
      faiss::Index *instance_ptr = (faiss::Index *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1index_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::Index *)faiss::read_index(arg1,arg2);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIDMap *> (result)) {
      faiss::IndexIDMap *instance_ptr = (faiss::IndexIDMap *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexShards *> (result)) {
      faiss::IndexShards *instance_ptr = (faiss::IndexShards *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQR *> (result)) {
      faiss::IndexIVFPQR *instance_ptr = (faiss::IndexIVFPQR *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQ *> (result)) {
      faiss::IndexIVFPQ *instance_ptr = (faiss::IndexIVFPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFScalarQuantizer *> (result)) {
      faiss::IndexIVFScalarQuantizer *instance_ptr = (faiss::IndexIVFScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlatDedup *> (result)) {
      faiss::IndexIVFFlatDedup *instance_ptr = (faiss::IndexIVFFlatDedup *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlat *> (result)) {
      faiss::IndexIVFFlat *instance_ptr = (faiss::IndexIVFFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVF *> (result)) {
      faiss::IndexIVF *instance_ptr = (faiss::IndexIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexFlat *> (result)) {
      faiss::IndexFlat *instance_ptr = (faiss::IndexFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPQ *> (result)) {
      faiss::IndexPQ *instance_ptr = (faiss::IndexPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexScalarQuantizer *> (result)) {
      faiss::IndexScalarQuantizer *instance_ptr = (faiss::IndexScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexLSH *> (result)) {
      faiss::IndexLSH *instance_ptr = (faiss::IndexLSH *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPreTransform *> (result)) {
      faiss::IndexPreTransform *instance_ptr = (faiss::IndexPreTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::MultiIndexQuantizer *> (result)) {
      faiss::MultiIndexQuantizer *instance_ptr = (faiss::MultiIndexQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWFlat *> (result)) {
      faiss::IndexHNSWFlat *instance_ptr = (faiss::IndexHNSWFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWPQ *> (result)) {
      faiss::IndexHNSWPQ *instance_ptr = (faiss::IndexHNSWPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWSQ *> (result)) {
      faiss::IndexHNSWSQ *instance_ptr = (faiss::IndexHNSWSQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSW2Level *> (result)) {
      faiss::IndexHNSW2Level *instance_ptr = (faiss::IndexHNSW2Level *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index2Layer *> (result)) {
      faiss::Index2Layer *instance_ptr = (faiss::Index2Layer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index *> (result)) {
      faiss::Index *instance_ptr = (faiss::Index *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1index_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  result = (faiss::Index *)faiss::read_index(arg1);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIDMap *> (result)) {
      faiss::IndexIDMap *instance_ptr = (faiss::IndexIDMap *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexShards *> (result)) {
      faiss::IndexShards *instance_ptr = (faiss::IndexShards *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQR *> (result)) {
      faiss::IndexIVFPQR *instance_ptr = (faiss::IndexIVFPQR *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQ *> (result)) {
      faiss::IndexIVFPQ *instance_ptr = (faiss::IndexIVFPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFScalarQuantizer *> (result)) {
      faiss::IndexIVFScalarQuantizer *instance_ptr = (faiss::IndexIVFScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlatDedup *> (result)) {
      faiss::IndexIVFFlatDedup *instance_ptr = (faiss::IndexIVFFlatDedup *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlat *> (result)) {
      faiss::IndexIVFFlat *instance_ptr = (faiss::IndexIVFFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVF *> (result)) {
      faiss::IndexIVF *instance_ptr = (faiss::IndexIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexFlat *> (result)) {
      faiss::IndexFlat *instance_ptr = (faiss::IndexFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPQ *> (result)) {
      faiss::IndexPQ *instance_ptr = (faiss::IndexPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexScalarQuantizer *> (result)) {
      faiss::IndexScalarQuantizer *instance_ptr = (faiss::IndexScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexLSH *> (result)) {
      faiss::IndexLSH *instance_ptr = (faiss::IndexLSH *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPreTransform *> (result)) {
      faiss::IndexPreTransform *instance_ptr = (faiss::IndexPreTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::MultiIndexQuantizer *> (result)) {
      faiss::MultiIndexQuantizer *instance_ptr = (faiss::MultiIndexQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWFlat *> (result)) {
      faiss::IndexHNSWFlat *instance_ptr = (faiss::IndexHNSWFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWPQ *> (result)) {
      faiss::IndexHNSWPQ *instance_ptr = (faiss::IndexHNSWPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWSQ *> (result)) {
      faiss::IndexHNSWSQ *instance_ptr = (faiss::IndexHNSWSQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSW2Level *> (result)) {
      faiss::IndexHNSW2Level *instance_ptr = (faiss::IndexHNSW2Level *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index2Layer *> (result)) {
      faiss::Index2Layer *instance_ptr = (faiss::Index2Layer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index *> (result)) {
      faiss::Index *instance_ptr = (faiss::Index *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1index_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  faiss::IOReader *arg1 = (faiss::IOReader *) 0 ;
  int arg2 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IOReader **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::Index *)faiss::read_index(arg1,arg2);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIDMap *> (result)) {
      faiss::IndexIDMap *instance_ptr = (faiss::IndexIDMap *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexShards *> (result)) {
      faiss::IndexShards *instance_ptr = (faiss::IndexShards *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQR *> (result)) {
      faiss::IndexIVFPQR *instance_ptr = (faiss::IndexIVFPQR *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQ *> (result)) {
      faiss::IndexIVFPQ *instance_ptr = (faiss::IndexIVFPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFScalarQuantizer *> (result)) {
      faiss::IndexIVFScalarQuantizer *instance_ptr = (faiss::IndexIVFScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlatDedup *> (result)) {
      faiss::IndexIVFFlatDedup *instance_ptr = (faiss::IndexIVFFlatDedup *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlat *> (result)) {
      faiss::IndexIVFFlat *instance_ptr = (faiss::IndexIVFFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVF *> (result)) {
      faiss::IndexIVF *instance_ptr = (faiss::IndexIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexFlat *> (result)) {
      faiss::IndexFlat *instance_ptr = (faiss::IndexFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPQ *> (result)) {
      faiss::IndexPQ *instance_ptr = (faiss::IndexPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexScalarQuantizer *> (result)) {
      faiss::IndexScalarQuantizer *instance_ptr = (faiss::IndexScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexLSH *> (result)) {
      faiss::IndexLSH *instance_ptr = (faiss::IndexLSH *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPreTransform *> (result)) {
      faiss::IndexPreTransform *instance_ptr = (faiss::IndexPreTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::MultiIndexQuantizer *> (result)) {
      faiss::MultiIndexQuantizer *instance_ptr = (faiss::MultiIndexQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWFlat *> (result)) {
      faiss::IndexHNSWFlat *instance_ptr = (faiss::IndexHNSWFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWPQ *> (result)) {
      faiss::IndexHNSWPQ *instance_ptr = (faiss::IndexHNSWPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWSQ *> (result)) {
      faiss::IndexHNSWSQ *instance_ptr = (faiss::IndexHNSWSQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSW2Level *> (result)) {
      faiss::IndexHNSW2Level *instance_ptr = (faiss::IndexHNSW2Level *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index2Layer *> (result)) {
      faiss::Index2Layer *instance_ptr = (faiss::Index2Layer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index *> (result)) {
      faiss::Index *instance_ptr = (faiss::Index *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1index_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IOReader *arg1 = (faiss::IOReader *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IOReader **)&jarg1; 
  result = (faiss::Index *)faiss::read_index(arg1);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIDMap *> (result)) {
      faiss::IndexIDMap *instance_ptr = (faiss::IndexIDMap *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexShards *> (result)) {
      faiss::IndexShards *instance_ptr = (faiss::IndexShards *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQR *> (result)) {
      faiss::IndexIVFPQR *instance_ptr = (faiss::IndexIVFPQR *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQ *> (result)) {
      faiss::IndexIVFPQ *instance_ptr = (faiss::IndexIVFPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFScalarQuantizer *> (result)) {
      faiss::IndexIVFScalarQuantizer *instance_ptr = (faiss::IndexIVFScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlatDedup *> (result)) {
      faiss::IndexIVFFlatDedup *instance_ptr = (faiss::IndexIVFFlatDedup *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlat *> (result)) {
      faiss::IndexIVFFlat *instance_ptr = (faiss::IndexIVFFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVF *> (result)) {
      faiss::IndexIVF *instance_ptr = (faiss::IndexIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexFlat *> (result)) {
      faiss::IndexFlat *instance_ptr = (faiss::IndexFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPQ *> (result)) {
      faiss::IndexPQ *instance_ptr = (faiss::IndexPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexScalarQuantizer *> (result)) {
      faiss::IndexScalarQuantizer *instance_ptr = (faiss::IndexScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexLSH *> (result)) {
      faiss::IndexLSH *instance_ptr = (faiss::IndexLSH *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPreTransform *> (result)) {
      faiss::IndexPreTransform *instance_ptr = (faiss::IndexPreTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::MultiIndexQuantizer *> (result)) {
      faiss::MultiIndexQuantizer *instance_ptr = (faiss::MultiIndexQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWFlat *> (result)) {
      faiss::IndexHNSWFlat *instance_ptr = (faiss::IndexHNSWFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWPQ *> (result)) {
      faiss::IndexHNSWPQ *instance_ptr = (faiss::IndexHNSWPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWSQ *> (result)) {
      faiss::IndexHNSWSQ *instance_ptr = (faiss::IndexHNSWSQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSW2Level *> (result)) {
      faiss::IndexHNSW2Level *instance_ptr = (faiss::IndexHNSW2Level *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index2Layer *> (result)) {
      faiss::Index2Layer *instance_ptr = (faiss::Index2Layer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index *> (result)) {
      faiss::Index *instance_ptr = (faiss::Index *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1index_1binary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  faiss::IndexBinary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (faiss::IndexBinary *)faiss::read_index_binary((char const *)arg1,arg2);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryIVF *> (result)) {
      faiss::IndexBinaryIVF *instance_ptr = (faiss::IndexBinaryIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFlat *> (result)) {
      faiss::IndexBinaryFlat *instance_ptr = (faiss::IndexBinaryFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFromFloat *> (result)) {
      faiss::IndexBinaryFromFloat *instance_ptr = (faiss::IndexBinaryFromFloat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryHNSW *> (result)) {
      faiss::IndexBinaryHNSW *instance_ptr = (faiss::IndexBinaryHNSW *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinary *> (result)) {
      faiss::IndexBinary *instance_ptr = (faiss::IndexBinary *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1index_1binary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  faiss::IndexBinary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (faiss::IndexBinary *)faiss::read_index_binary((char const *)arg1);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryIVF *> (result)) {
      faiss::IndexBinaryIVF *instance_ptr = (faiss::IndexBinaryIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFlat *> (result)) {
      faiss::IndexBinaryFlat *instance_ptr = (faiss::IndexBinaryFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFromFloat *> (result)) {
      faiss::IndexBinaryFromFloat *instance_ptr = (faiss::IndexBinaryFromFloat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryHNSW *> (result)) {
      faiss::IndexBinaryHNSW *instance_ptr = (faiss::IndexBinaryHNSW *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinary *> (result)) {
      faiss::IndexBinary *instance_ptr = (faiss::IndexBinary *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1index_1binary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  faiss::IndexBinary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::IndexBinary *)faiss::read_index_binary(arg1,arg2);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryIVF *> (result)) {
      faiss::IndexBinaryIVF *instance_ptr = (faiss::IndexBinaryIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFlat *> (result)) {
      faiss::IndexBinaryFlat *instance_ptr = (faiss::IndexBinaryFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFromFloat *> (result)) {
      faiss::IndexBinaryFromFloat *instance_ptr = (faiss::IndexBinaryFromFloat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryHNSW *> (result)) {
      faiss::IndexBinaryHNSW *instance_ptr = (faiss::IndexBinaryHNSW *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinary *> (result)) {
      faiss::IndexBinary *instance_ptr = (faiss::IndexBinary *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1index_1binary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  faiss::IndexBinary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  result = (faiss::IndexBinary *)faiss::read_index_binary(arg1);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryIVF *> (result)) {
      faiss::IndexBinaryIVF *instance_ptr = (faiss::IndexBinaryIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFlat *> (result)) {
      faiss::IndexBinaryFlat *instance_ptr = (faiss::IndexBinaryFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFromFloat *> (result)) {
      faiss::IndexBinaryFromFloat *instance_ptr = (faiss::IndexBinaryFromFloat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryHNSW *> (result)) {
      faiss::IndexBinaryHNSW *instance_ptr = (faiss::IndexBinaryHNSW *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinary *> (result)) {
      faiss::IndexBinary *instance_ptr = (faiss::IndexBinary *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1index_1binary_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  faiss::IOReader *arg1 = (faiss::IOReader *) 0 ;
  int arg2 ;
  faiss::IndexBinary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IOReader **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::IndexBinary *)faiss::read_index_binary(arg1,arg2);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryIVF *> (result)) {
      faiss::IndexBinaryIVF *instance_ptr = (faiss::IndexBinaryIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFlat *> (result)) {
      faiss::IndexBinaryFlat *instance_ptr = (faiss::IndexBinaryFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFromFloat *> (result)) {
      faiss::IndexBinaryFromFloat *instance_ptr = (faiss::IndexBinaryFromFloat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryHNSW *> (result)) {
      faiss::IndexBinaryHNSW *instance_ptr = (faiss::IndexBinaryHNSW *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinary *> (result)) {
      faiss::IndexBinary *instance_ptr = (faiss::IndexBinary *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1index_1binary_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IOReader *arg1 = (faiss::IOReader *) 0 ;
  faiss::IndexBinary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IOReader **)&jarg1; 
  result = (faiss::IndexBinary *)faiss::read_index_binary(arg1);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryIVF *> (result)) {
      faiss::IndexBinaryIVF *instance_ptr = (faiss::IndexBinaryIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFlat *> (result)) {
      faiss::IndexBinaryFlat *instance_ptr = (faiss::IndexBinaryFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFromFloat *> (result)) {
      faiss::IndexBinaryFromFloat *instance_ptr = (faiss::IndexBinaryFromFloat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryHNSW *> (result)) {
      faiss::IndexBinaryHNSW *instance_ptr = (faiss::IndexBinaryHNSW *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinary *> (result)) {
      faiss::IndexBinary *instance_ptr = (faiss::IndexBinary *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_write_1VectorTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  faiss::VectorTransform *arg1 = (faiss::VectorTransform *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorTransform **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  faiss::write_VectorTransform((faiss::VectorTransform const *)arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1VectorTransform(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  faiss::VectorTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (faiss::VectorTransform *)faiss::read_VectorTransform((char const *)arg1);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::RemapDimensionsTransform *> (result)) {
      faiss::RemapDimensionsTransform *instance_ptr = (faiss::RemapDimensionsTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::OPQMatrix *> (result)) {
      faiss::OPQMatrix *instance_ptr = (faiss::OPQMatrix *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::PCAMatrix *> (result)) {
      faiss::PCAMatrix *instance_ptr = (faiss::PCAMatrix *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::RandomRotationMatrix *> (result)) {
      faiss::RandomRotationMatrix *instance_ptr = (faiss::RandomRotationMatrix *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::LinearTransform *> (result)) {
      faiss::LinearTransform *instance_ptr = (faiss::LinearTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::NormalizationTransform *> (result)) {
      faiss::NormalizationTransform *instance_ptr = (faiss::NormalizationTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::VectorTransform *> (result)) {
      faiss::VectorTransform *instance_ptr = (faiss::VectorTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    {
      assert(false);
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1ProductQuantizer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  faiss::ProductQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (faiss::ProductQuantizer *)faiss::read_ProductQuantizer((char const *)arg1);
  *(faiss::ProductQuantizer **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1ProductQuantizer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IOReader *arg1 = (faiss::IOReader *) 0 ;
  faiss::ProductQuantizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IOReader **)&jarg1; 
  result = (faiss::ProductQuantizer *)faiss::read_ProductQuantizer(arg1);
  *(faiss::ProductQuantizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_write_1ProductQuantizer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  faiss::write_ProductQuantizer((faiss::ProductQuantizer const *)arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_write_1ProductQuantizer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ProductQuantizer *arg1 = (faiss::ProductQuantizer *) 0 ;
  faiss::IOWriter *arg2 = (faiss::IOWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ProductQuantizer **)&jarg1; 
  arg2 = *(faiss::IOWriter **)&jarg2; 
  faiss::write_ProductQuantizer((faiss::ProductQuantizer const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_write_1InvertedLists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::InvertedLists *arg1 = (faiss::InvertedLists *) 0 ;
  faiss::IOWriter *arg2 = (faiss::IOWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::InvertedLists **)&jarg1; 
  arg2 = *(faiss::IOWriter **)&jarg2; 
  faiss::write_InvertedLists((faiss::InvertedLists const *)arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1InvertedLists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  faiss::IOReader *arg1 = (faiss::IOReader *) 0 ;
  int arg2 ;
  faiss::InvertedLists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IOReader **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (faiss::InvertedLists *)faiss::read_InvertedLists(arg1,arg2);
  *(faiss::InvertedLists **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_read_1InvertedLists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::IOReader *arg1 = (faiss::IOReader *) 0 ;
  faiss::InvertedLists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IOReader **)&jarg1; 
  result = (faiss::InvertedLists *)faiss::read_InvertedLists(arg1);
  *(faiss::InvertedLists **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_clone_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::Index *arg1 = (faiss::Index *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::Index **)&jarg1; 
  result = (faiss::Index *)faiss::clone_index((faiss::Index const *)arg1);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIDMap *> (result)) {
      faiss::IndexIDMap *instance_ptr = (faiss::IndexIDMap *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexShards *> (result)) {
      faiss::IndexShards *instance_ptr = (faiss::IndexShards *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQR *> (result)) {
      faiss::IndexIVFPQR *instance_ptr = (faiss::IndexIVFPQR *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQ *> (result)) {
      faiss::IndexIVFPQ *instance_ptr = (faiss::IndexIVFPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFScalarQuantizer *> (result)) {
      faiss::IndexIVFScalarQuantizer *instance_ptr = (faiss::IndexIVFScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlatDedup *> (result)) {
      faiss::IndexIVFFlatDedup *instance_ptr = (faiss::IndexIVFFlatDedup *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlat *> (result)) {
      faiss::IndexIVFFlat *instance_ptr = (faiss::IndexIVFFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVF *> (result)) {
      faiss::IndexIVF *instance_ptr = (faiss::IndexIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexFlat *> (result)) {
      faiss::IndexFlat *instance_ptr = (faiss::IndexFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPQ *> (result)) {
      faiss::IndexPQ *instance_ptr = (faiss::IndexPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexScalarQuantizer *> (result)) {
      faiss::IndexScalarQuantizer *instance_ptr = (faiss::IndexScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexLSH *> (result)) {
      faiss::IndexLSH *instance_ptr = (faiss::IndexLSH *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPreTransform *> (result)) {
      faiss::IndexPreTransform *instance_ptr = (faiss::IndexPreTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::MultiIndexQuantizer *> (result)) {
      faiss::MultiIndexQuantizer *instance_ptr = (faiss::MultiIndexQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWFlat *> (result)) {
      faiss::IndexHNSWFlat *instance_ptr = (faiss::IndexHNSWFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWPQ *> (result)) {
      faiss::IndexHNSWPQ *instance_ptr = (faiss::IndexHNSWPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWSQ *> (result)) {
      faiss::IndexHNSWSQ *instance_ptr = (faiss::IndexHNSWSQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSW2Level *> (result)) {
      faiss::IndexHNSW2Level *instance_ptr = (faiss::IndexHNSW2Level *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index2Layer *> (result)) {
      faiss::Index2Layer *instance_ptr = (faiss::Index2Layer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index *> (result)) {
      faiss::Index *instance_ptr = (faiss::Index *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Cloner_1clone_1VectorTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  faiss::Cloner *arg1 = (faiss::Cloner *) 0 ;
  faiss::VectorTransform *arg2 = (faiss::VectorTransform *) 0 ;
  faiss::VectorTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Cloner **)&jarg1; 
  arg2 = *(faiss::VectorTransform **)&jarg2; 
  result = (faiss::VectorTransform *)(arg1)->clone_VectorTransform((faiss::VectorTransform const *)arg2);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::RemapDimensionsTransform *> (result)) {
      faiss::RemapDimensionsTransform *instance_ptr = (faiss::RemapDimensionsTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::OPQMatrix *> (result)) {
      faiss::OPQMatrix *instance_ptr = (faiss::OPQMatrix *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::PCAMatrix *> (result)) {
      faiss::PCAMatrix *instance_ptr = (faiss::PCAMatrix *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::RandomRotationMatrix *> (result)) {
      faiss::RandomRotationMatrix *instance_ptr = (faiss::RandomRotationMatrix *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::LinearTransform *> (result)) {
      faiss::LinearTransform *instance_ptr = (faiss::LinearTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::NormalizationTransform *> (result)) {
      faiss::NormalizationTransform *instance_ptr = (faiss::NormalizationTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::VectorTransform *> (result)) {
      faiss::VectorTransform *instance_ptr = (faiss::VectorTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Cloner_1clone_1Index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  faiss::Cloner *arg1 = (faiss::Cloner *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Cloner **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  result = (faiss::Index *)(arg1)->clone_Index((faiss::Index const *)arg2);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIDMap *> (result)) {
      faiss::IndexIDMap *instance_ptr = (faiss::IndexIDMap *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexShards *> (result)) {
      faiss::IndexShards *instance_ptr = (faiss::IndexShards *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQR *> (result)) {
      faiss::IndexIVFPQR *instance_ptr = (faiss::IndexIVFPQR *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQ *> (result)) {
      faiss::IndexIVFPQ *instance_ptr = (faiss::IndexIVFPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFScalarQuantizer *> (result)) {
      faiss::IndexIVFScalarQuantizer *instance_ptr = (faiss::IndexIVFScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlatDedup *> (result)) {
      faiss::IndexIVFFlatDedup *instance_ptr = (faiss::IndexIVFFlatDedup *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlat *> (result)) {
      faiss::IndexIVFFlat *instance_ptr = (faiss::IndexIVFFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVF *> (result)) {
      faiss::IndexIVF *instance_ptr = (faiss::IndexIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexFlat *> (result)) {
      faiss::IndexFlat *instance_ptr = (faiss::IndexFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPQ *> (result)) {
      faiss::IndexPQ *instance_ptr = (faiss::IndexPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexScalarQuantizer *> (result)) {
      faiss::IndexScalarQuantizer *instance_ptr = (faiss::IndexScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexLSH *> (result)) {
      faiss::IndexLSH *instance_ptr = (faiss::IndexLSH *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPreTransform *> (result)) {
      faiss::IndexPreTransform *instance_ptr = (faiss::IndexPreTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::MultiIndexQuantizer *> (result)) {
      faiss::MultiIndexQuantizer *instance_ptr = (faiss::MultiIndexQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWFlat *> (result)) {
      faiss::IndexHNSWFlat *instance_ptr = (faiss::IndexHNSWFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWPQ *> (result)) {
      faiss::IndexHNSWPQ *instance_ptr = (faiss::IndexHNSWPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWSQ *> (result)) {
      faiss::IndexHNSWSQ *instance_ptr = (faiss::IndexHNSWSQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSW2Level *> (result)) {
      faiss::IndexHNSW2Level *instance_ptr = (faiss::IndexHNSW2Level *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index2Layer *> (result)) {
      faiss::Index2Layer *instance_ptr = (faiss::Index2Layer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index *> (result)) {
      faiss::Index *instance_ptr = (faiss::Index *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Cloner_1clone_1IndexIVF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  faiss::Cloner *arg1 = (faiss::Cloner *) 0 ;
  faiss::IndexIVF *arg2 = (faiss::IndexIVF *) 0 ;
  faiss::IndexIVF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::Cloner **)&jarg1; 
  arg2 = *(faiss::IndexIVF **)&jarg2; 
  result = (faiss::IndexIVF *)(arg1)->clone_IndexIVF((faiss::IndexIVF const *)arg2);
  *(faiss::IndexIVF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1Cloner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::Cloner *arg1 = (faiss::Cloner *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::Cloner **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1Cloner(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::Cloner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::Cloner *)new faiss::Cloner();
  *(faiss::Cloner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_AutoTuneCriterion_1nq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::AutoTuneCriterion *arg1 = (faiss::AutoTuneCriterion *) 0 ;
  faiss::AutoTuneCriterion::idx_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::AutoTuneCriterion **)&jarg1; 
  arg2 = (faiss::AutoTuneCriterion::idx_t)jarg2; 
  if (arg1) (arg1)->nq = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_AutoTuneCriterion_1nq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::AutoTuneCriterion *arg1 = (faiss::AutoTuneCriterion *) 0 ;
  faiss::AutoTuneCriterion::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::AutoTuneCriterion **)&jarg1; 
  result = (faiss::AutoTuneCriterion::idx_t) ((arg1)->nq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_AutoTuneCriterion_1nnn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::AutoTuneCriterion *arg1 = (faiss::AutoTuneCriterion *) 0 ;
  faiss::AutoTuneCriterion::idx_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::AutoTuneCriterion **)&jarg1; 
  arg2 = (faiss::AutoTuneCriterion::idx_t)jarg2; 
  if (arg1) (arg1)->nnn = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_AutoTuneCriterion_1nnn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::AutoTuneCriterion *arg1 = (faiss::AutoTuneCriterion *) 0 ;
  faiss::AutoTuneCriterion::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::AutoTuneCriterion **)&jarg1; 
  result = (faiss::AutoTuneCriterion::idx_t) ((arg1)->nnn);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_AutoTuneCriterion_1gt_1nnn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::AutoTuneCriterion *arg1 = (faiss::AutoTuneCriterion *) 0 ;
  faiss::AutoTuneCriterion::idx_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::AutoTuneCriterion **)&jarg1; 
  arg2 = (faiss::AutoTuneCriterion::idx_t)jarg2; 
  if (arg1) (arg1)->gt_nnn = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_AutoTuneCriterion_1gt_1nnn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::AutoTuneCriterion *arg1 = (faiss::AutoTuneCriterion *) 0 ;
  faiss::AutoTuneCriterion::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::AutoTuneCriterion **)&jarg1; 
  result = (faiss::AutoTuneCriterion::idx_t) ((arg1)->gt_nnn);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_AutoTuneCriterion_1gt_1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::AutoTuneCriterion *arg1 = (faiss::AutoTuneCriterion *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::AutoTuneCriterion **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  if (arg1) (arg1)->gt_D = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_AutoTuneCriterion_1gt_1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::AutoTuneCriterion *arg1 = (faiss::AutoTuneCriterion *) 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::AutoTuneCriterion **)&jarg1; 
  result = (std::vector< float > *)& ((arg1)->gt_D);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_AutoTuneCriterion_1gt_1I_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::AutoTuneCriterion *arg1 = (faiss::AutoTuneCriterion *) 0 ;
  std::vector< faiss::AutoTuneCriterion::idx_t > *arg2 = (std::vector< faiss::AutoTuneCriterion::idx_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::AutoTuneCriterion **)&jarg1; 
  arg2 = *(std::vector< faiss::AutoTuneCriterion::idx_t > **)&jarg2; 
  if (arg1) (arg1)->gt_I = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_AutoTuneCriterion_1gt_1I_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::AutoTuneCriterion *arg1 = (faiss::AutoTuneCriterion *) 0 ;
  std::vector< faiss::AutoTuneCriterion::idx_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::AutoTuneCriterion **)&jarg1; 
  result = (std::vector< faiss::AutoTuneCriterion::idx_t > *)& ((arg1)->gt_I);
  *(std::vector< faiss::AutoTuneCriterion::idx_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_AutoTuneCriterion_1set_1groundtruth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::AutoTuneCriterion *arg1 = (faiss::AutoTuneCriterion *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  faiss::AutoTuneCriterion::idx_t *arg4 = (faiss::AutoTuneCriterion::idx_t *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::AutoTuneCriterion **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->set_groundtruth(arg2,(float const *)arg3,(faiss::AutoTuneCriterion::idx_t const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_AutoTuneCriterion_1evaluate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jintArray jarg3) {
  jdouble jresult = 0 ;
  faiss::AutoTuneCriterion *arg1 = (faiss::AutoTuneCriterion *) 0 ;
  float *arg2 = (float *) 0 ;
  faiss::AutoTuneCriterion::idx_t *arg3 = (faiss::AutoTuneCriterion::idx_t *) 0 ;
  jfloat *jarr2 ;
  jint *jarr3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::AutoTuneCriterion **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return 0; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return 0; 
  result = (double)((faiss::AutoTuneCriterion const *)arg1)->evaluate((float const *)arg2,(faiss::AutoTuneCriterion::idx_t const *)arg3);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1AutoTuneCriterion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::AutoTuneCriterion *arg1 = (faiss::AutoTuneCriterion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::AutoTuneCriterion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OneRecallAtRCriterion_1R_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::OneRecallAtRCriterion *arg1 = (faiss::OneRecallAtRCriterion *) 0 ;
  faiss::AutoTuneCriterion::idx_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OneRecallAtRCriterion **)&jarg1; 
  arg2 = (faiss::AutoTuneCriterion::idx_t)jarg2; 
  if (arg1) (arg1)->R = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OneRecallAtRCriterion_1R_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::OneRecallAtRCriterion *arg1 = (faiss::OneRecallAtRCriterion *) 0 ;
  faiss::AutoTuneCriterion::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OneRecallAtRCriterion **)&jarg1; 
  result = (faiss::AutoTuneCriterion::idx_t) ((arg1)->R);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1OneRecallAtRCriterion(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  faiss::AutoTuneCriterion::idx_t arg1 ;
  faiss::AutoTuneCriterion::idx_t arg2 ;
  faiss::OneRecallAtRCriterion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::AutoTuneCriterion::idx_t)jarg1; 
  arg2 = (faiss::AutoTuneCriterion::idx_t)jarg2; 
  result = (faiss::OneRecallAtRCriterion *)new faiss::OneRecallAtRCriterion(arg1,arg2);
  *(faiss::OneRecallAtRCriterion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OneRecallAtRCriterion_1evaluate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jintArray jarg3) {
  jdouble jresult = 0 ;
  faiss::OneRecallAtRCriterion *arg1 = (faiss::OneRecallAtRCriterion *) 0 ;
  float *arg2 = (float *) 0 ;
  faiss::AutoTuneCriterion::idx_t *arg3 = (faiss::AutoTuneCriterion::idx_t *) 0 ;
  jfloat *jarr2 ;
  jint *jarr3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OneRecallAtRCriterion **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return 0; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return 0; 
  result = (double)((faiss::OneRecallAtRCriterion const *)arg1)->evaluate((float const *)arg2,(faiss::AutoTuneCriterion::idx_t const *)arg3);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1OneRecallAtRCriterion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::OneRecallAtRCriterion *arg1 = (faiss::OneRecallAtRCriterion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::OneRecallAtRCriterion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IntersectionCriterion_1R_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IntersectionCriterion *arg1 = (faiss::IntersectionCriterion *) 0 ;
  faiss::AutoTuneCriterion::idx_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IntersectionCriterion **)&jarg1; 
  arg2 = (faiss::AutoTuneCriterion::idx_t)jarg2; 
  if (arg1) (arg1)->R = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IntersectionCriterion_1R_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IntersectionCriterion *arg1 = (faiss::IntersectionCriterion *) 0 ;
  faiss::AutoTuneCriterion::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IntersectionCriterion **)&jarg1; 
  result = (faiss::AutoTuneCriterion::idx_t) ((arg1)->R);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IntersectionCriterion(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  faiss::AutoTuneCriterion::idx_t arg1 ;
  faiss::AutoTuneCriterion::idx_t arg2 ;
  faiss::IntersectionCriterion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::AutoTuneCriterion::idx_t)jarg1; 
  arg2 = (faiss::AutoTuneCriterion::idx_t)jarg2; 
  result = (faiss::IntersectionCriterion *)new faiss::IntersectionCriterion(arg1,arg2);
  *(faiss::IntersectionCriterion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IntersectionCriterion_1evaluate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jintArray jarg3) {
  jdouble jresult = 0 ;
  faiss::IntersectionCriterion *arg1 = (faiss::IntersectionCriterion *) 0 ;
  float *arg2 = (float *) 0 ;
  faiss::AutoTuneCriterion::idx_t *arg3 = (faiss::AutoTuneCriterion::idx_t *) 0 ;
  jfloat *jarr2 ;
  jint *jarr3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IntersectionCriterion **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return 0; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return 0; 
  result = (double)((faiss::IntersectionCriterion const *)arg1)->evaluate((float const *)arg2,(faiss::AutoTuneCriterion::idx_t const *)arg3);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IntersectionCriterion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IntersectionCriterion *arg1 = (faiss::IntersectionCriterion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IntersectionCriterion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoint_1perf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  faiss::OperatingPoint *arg1 = (faiss::OperatingPoint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->perf = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoint_1perf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  faiss::OperatingPoint *arg1 = (faiss::OperatingPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoint **)&jarg1; 
  result = (double) ((arg1)->perf);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoint_1t_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  faiss::OperatingPoint *arg1 = (faiss::OperatingPoint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->t = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoint_1t_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  faiss::OperatingPoint *arg1 = (faiss::OperatingPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoint **)&jarg1; 
  result = (double) ((arg1)->t);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoint_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  faiss::OperatingPoint *arg1 = (faiss::OperatingPoint *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoint **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoint_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  faiss::OperatingPoint *arg1 = (faiss::OperatingPoint *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoint **)&jarg1; 
  result = (std::string *) & ((arg1)->key);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoint_1cno_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::OperatingPoint *arg1 = (faiss::OperatingPoint *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoint **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->cno = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoint_1cno_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::OperatingPoint *arg1 = (faiss::OperatingPoint *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoint **)&jarg1; 
  result = (long) ((arg1)->cno);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1OperatingPoint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::OperatingPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::OperatingPoint *)new faiss::OperatingPoint();
  *(faiss::OperatingPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1OperatingPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::OperatingPoint *arg1 = (faiss::OperatingPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::OperatingPoint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1all_1pts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  std::vector< faiss::OperatingPoint > *arg2 = (std::vector< faiss::OperatingPoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  arg2 = *(std::vector< faiss::OperatingPoint > **)&jarg2; 
  if (arg1) (arg1)->all_pts = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1all_1pts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  std::vector< faiss::OperatingPoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  result = (std::vector< faiss::OperatingPoint > *)& ((arg1)->all_pts);
  *(std::vector< faiss::OperatingPoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1optimal_1pts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  std::vector< faiss::OperatingPoint > *arg2 = (std::vector< faiss::OperatingPoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  arg2 = *(std::vector< faiss::OperatingPoint > **)&jarg2; 
  if (arg1) (arg1)->optimal_pts = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1optimal_1pts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  std::vector< faiss::OperatingPoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  result = (std::vector< faiss::OperatingPoint > *)& ((arg1)->optimal_pts);
  *(std::vector< faiss::OperatingPoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1OperatingPoints(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::OperatingPoints *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::OperatingPoints *)new faiss::OperatingPoints();
  *(faiss::OperatingPoints **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1merge_1with_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  faiss::OperatingPoints *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  arg2 = *(faiss::OperatingPoints **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::OperatingPoints const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->merge_with((faiss::OperatingPoints const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1merge_1with_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  faiss::OperatingPoints *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  arg2 = *(faiss::OperatingPoints **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::OperatingPoints const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->merge_with((faiss::OperatingPoints const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jstring jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  double arg2 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  size_t arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (size_t)jarg5; 
  result = (bool)(arg1)->add(arg2,arg3,(std::string const &)*arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  double arg2 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (bool)(arg1)->add(arg2,arg3,(std::string const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1t_1for_1perf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((faiss::OperatingPoints const *)arg1)->t_for_perf(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1display_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  ((faiss::OperatingPoints const *)arg1)->display(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1display_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  ((faiss::OperatingPoints const *)arg1)->display();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1all_1to_1gnuplot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  ((faiss::OperatingPoints const *)arg1)->all_to_gnuplot((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OperatingPoints_1optimal_1to_1gnuplot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  ((faiss::OperatingPoints const *)arg1)->optimal_to_gnuplot((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1OperatingPoints(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::OperatingPoints *arg1 = (faiss::OperatingPoints *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::OperatingPoints **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterRange_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  faiss::ParameterRange *arg1 = (faiss::ParameterRange *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterRange **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterRange_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  faiss::ParameterRange *arg1 = (faiss::ParameterRange *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterRange **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterRange_1values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ParameterRange *arg1 = (faiss::ParameterRange *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ParameterRange **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->values = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterRange_1values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ParameterRange *arg1 = (faiss::ParameterRange *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterRange **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->values);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ParameterRange(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::ParameterRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::ParameterRange *)new faiss::ParameterRange();
  *(faiss::ParameterRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1ParameterRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::ParameterRange *arg1 = (faiss::ParameterRange *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::ParameterRange **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1parameter_1ranges_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  std::vector< faiss::ParameterRange > *arg2 = (std::vector< faiss::ParameterRange > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = *(std::vector< faiss::ParameterRange > **)&jarg2; 
  if (arg1) (arg1)->parameter_ranges = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1parameter_1ranges_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  std::vector< faiss::ParameterRange > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  result = (std::vector< faiss::ParameterRange > *)& ((arg1)->parameter_ranges);
  *(std::vector< faiss::ParameterRange > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1verbose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->verbose = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1verbose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  result = (int) ((arg1)->verbose);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1n_1experiments_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n_experiments = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1n_1experiments_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  result = (int) ((arg1)->n_experiments);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1batchsize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->batchsize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1batchsize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  result = (size_t) ((arg1)->batchsize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1thread_1over_1batches_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->thread_over_batches = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1thread_1over_1batches_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  result = (bool) ((arg1)->thread_over_batches);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1min_1test_1duration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->min_test_duration = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1min_1test_1duration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  result = (double) ((arg1)->min_test_duration);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1ParameterSpace(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::ParameterSpace *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::ParameterSpace *)new faiss::ParameterSpace();
  *(faiss::ParameterSpace **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1n_1combinations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  result = (size_t)((faiss::ParameterSpace const *)arg1)->n_combinations();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1combination_1ge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)((faiss::ParameterSpace const *)arg1)->combination_ge(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1combination_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  size_t arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((faiss::ParameterSpace const *)arg1)->combination_name(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1display(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  ((faiss::ParameterSpace const *)arg1)->display();
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1add_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  char *arg2 = (char *) 0 ;
  faiss::ParameterRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (faiss::ParameterRange *) &(arg1)->add_range((char const *)arg2);
  *(faiss::ParameterRange **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  (arg1)->initialize((faiss::Index const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1set_1index_1parameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  arg3 = (size_t)jarg3; 
  ((faiss::ParameterSpace const *)arg1)->set_index_parameters(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1set_1index_1parameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  ((faiss::ParameterSpace const *)arg1)->set_index_parameters(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1set_1index_1parameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jdouble jarg4) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  ((faiss::ParameterSpace const *)arg1)->set_index_parameter(arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1update_1bounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jdoubleArray jarg4, jdoubleArray jarg5) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  size_t arg2 ;
  faiss::OperatingPoint *arg3 = 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(faiss::OperatingPoint **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::OperatingPoint const & reference is null");
    return ;
  } 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, (double **)&arg4, jarg4)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, (double **)&arg5, jarg5)) return ; 
  ((faiss::ParameterSpace const *)arg1)->update_bounds(arg2,(faiss::OperatingPoint const &)*arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, (double *)arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, (double *)arg5, jarg5); 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ParameterSpace_1explore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jfloatArray jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  faiss::Index *arg2 = (faiss::Index *) 0 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  faiss::AutoTuneCriterion *arg5 = 0 ;
  faiss::OperatingPoints *arg6 = (faiss::OperatingPoints *) 0 ;
  jfloat *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  arg2 = *(faiss::Index **)&jarg2; 
  arg3 = (size_t)jarg3; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr4, (float **)&arg4, jarg4)) return ; 
  arg5 = *(faiss::AutoTuneCriterion **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "faiss::AutoTuneCriterion const & reference is null");
    return ;
  } 
  arg6 = *(faiss::OperatingPoints **)&jarg6; 
  ((faiss::ParameterSpace const *)arg1)->explore(arg2,arg3,(float const *)arg4,(faiss::AutoTuneCriterion const &)*arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr4, (float *)arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1ParameterSpace(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::ParameterSpace *arg1 = (faiss::ParameterSpace *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::ParameterSpace **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_index_1factory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  faiss::MetricType arg3 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (faiss::MetricType)jarg3; 
  result = (faiss::Index *)faiss::index_factory(arg1,(char const *)arg2,arg3);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIDMap *> (result)) {
      faiss::IndexIDMap *instance_ptr = (faiss::IndexIDMap *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexShards *> (result)) {
      faiss::IndexShards *instance_ptr = (faiss::IndexShards *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQR *> (result)) {
      faiss::IndexIVFPQR *instance_ptr = (faiss::IndexIVFPQR *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQ *> (result)) {
      faiss::IndexIVFPQ *instance_ptr = (faiss::IndexIVFPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFScalarQuantizer *> (result)) {
      faiss::IndexIVFScalarQuantizer *instance_ptr = (faiss::IndexIVFScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlatDedup *> (result)) {
      faiss::IndexIVFFlatDedup *instance_ptr = (faiss::IndexIVFFlatDedup *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlat *> (result)) {
      faiss::IndexIVFFlat *instance_ptr = (faiss::IndexIVFFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVF *> (result)) {
      faiss::IndexIVF *instance_ptr = (faiss::IndexIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexFlat *> (result)) {
      faiss::IndexFlat *instance_ptr = (faiss::IndexFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPQ *> (result)) {
      faiss::IndexPQ *instance_ptr = (faiss::IndexPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexScalarQuantizer *> (result)) {
      faiss::IndexScalarQuantizer *instance_ptr = (faiss::IndexScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexLSH *> (result)) {
      faiss::IndexLSH *instance_ptr = (faiss::IndexLSH *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPreTransform *> (result)) {
      faiss::IndexPreTransform *instance_ptr = (faiss::IndexPreTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::MultiIndexQuantizer *> (result)) {
      faiss::MultiIndexQuantizer *instance_ptr = (faiss::MultiIndexQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWFlat *> (result)) {
      faiss::IndexHNSWFlat *instance_ptr = (faiss::IndexHNSWFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWPQ *> (result)) {
      faiss::IndexHNSWPQ *instance_ptr = (faiss::IndexHNSWPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWSQ *> (result)) {
      faiss::IndexHNSWSQ *instance_ptr = (faiss::IndexHNSWSQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSW2Level *> (result)) {
      faiss::IndexHNSW2Level *instance_ptr = (faiss::IndexHNSW2Level *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index2Layer *> (result)) {
      faiss::Index2Layer *instance_ptr = (faiss::Index2Layer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index *> (result)) {
      faiss::Index *instance_ptr = (faiss::Index *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_index_1factory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  faiss::Index *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (faiss::Index *)faiss::index_factory(arg1,(char const *)arg2);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIDMap *> (result)) {
      faiss::IndexIDMap *instance_ptr = (faiss::IndexIDMap *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexShards *> (result)) {
      faiss::IndexShards *instance_ptr = (faiss::IndexShards *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQR *> (result)) {
      faiss::IndexIVFPQR *instance_ptr = (faiss::IndexIVFPQR *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFPQ *> (result)) {
      faiss::IndexIVFPQ *instance_ptr = (faiss::IndexIVFPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFScalarQuantizer *> (result)) {
      faiss::IndexIVFScalarQuantizer *instance_ptr = (faiss::IndexIVFScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlatDedup *> (result)) {
      faiss::IndexIVFFlatDedup *instance_ptr = (faiss::IndexIVFFlatDedup *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVFFlat *> (result)) {
      faiss::IndexIVFFlat *instance_ptr = (faiss::IndexIVFFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexIVF *> (result)) {
      faiss::IndexIVF *instance_ptr = (faiss::IndexIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexFlat *> (result)) {
      faiss::IndexFlat *instance_ptr = (faiss::IndexFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPQ *> (result)) {
      faiss::IndexPQ *instance_ptr = (faiss::IndexPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexScalarQuantizer *> (result)) {
      faiss::IndexScalarQuantizer *instance_ptr = (faiss::IndexScalarQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexLSH *> (result)) {
      faiss::IndexLSH *instance_ptr = (faiss::IndexLSH *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexPreTransform *> (result)) {
      faiss::IndexPreTransform *instance_ptr = (faiss::IndexPreTransform *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::MultiIndexQuantizer *> (result)) {
      faiss::MultiIndexQuantizer *instance_ptr = (faiss::MultiIndexQuantizer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWFlat *> (result)) {
      faiss::IndexHNSWFlat *instance_ptr = (faiss::IndexHNSWFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWPQ *> (result)) {
      faiss::IndexHNSWPQ *instance_ptr = (faiss::IndexHNSWPQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSWSQ *> (result)) {
      faiss::IndexHNSWSQ *instance_ptr = (faiss::IndexHNSWSQ *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexHNSW2Level *> (result)) {
      faiss::IndexHNSW2Level *instance_ptr = (faiss::IndexHNSW2Level *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index2Layer *> (result)) {
      faiss::Index2Layer *instance_ptr = (faiss::Index2Layer *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::Index *> (result)) {
      faiss::Index *instance_ptr = (faiss::Index *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_index_1binary_1factory(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  faiss::IndexBinary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (faiss::IndexBinary *)faiss::index_binary_factory(arg1,(char const *)arg2);
  {
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryIVF *> (result)) {
      faiss::IndexBinaryIVF *instance_ptr = (faiss::IndexBinaryIVF *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFlat *> (result)) {
      faiss::IndexBinaryFlat *instance_ptr = (faiss::IndexBinaryFlat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryFromFloat *> (result)) {
      faiss::IndexBinaryFromFloat *instance_ptr = (faiss::IndexBinaryFromFloat *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinaryHNSW *> (result)) {
      faiss::IndexBinaryHNSW *instance_ptr = (faiss::IndexBinaryHNSW *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    
    
    
    // default for non-recognized classes
    /*@SWIG:swigfaiss4j.swig,262,DOWNCAST@*/
    if (dynamic_cast<faiss::IndexBinary *> (result)) {
      faiss::IndexBinary *instance_ptr = (faiss::IndexBinary *)result;
      jresult = (jlong)instance_ptr;
    } else
    /*@SWIG@*/
    if (result == NULL)
    {
      jresult = 0;
      
      // Lua does not need a push for nil
    } else {
      assert(false);
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1nh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nh = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1nh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  result = (size_t) ((arg1)->nh);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1k_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->k = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1k_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  result = (size_t) ((arg1)->k);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1ids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  faiss::HeapArray< faiss::CMin< float,long > >::TI *arg2 = (faiss::HeapArray< faiss::CMin< float,long > >::TI *) 0 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->ids = arg2;
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1ids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  faiss::HeapArray< faiss::CMin< float,long > >::TI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  result = (faiss::HeapArray< faiss::CMin< float,long > >::TI *) ((arg1)->ids);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  faiss::HeapArray< faiss::CMin< float,long > >::T *arg2 = (faiss::HeapArray< faiss::CMin< float,long > >::T *) 0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->val = arg2;
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  faiss::HeapArray< faiss::CMin< float,long > >::T *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  result = (faiss::HeapArray< faiss::CMin< float,long > >::T *) ((arg1)->val);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1get_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloatArray jresult = 0 ;
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< float,long > >::T *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::HeapArray< faiss::CMin< float,long > >::T *)(arg1)->get_val(arg2);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1get_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jintArray jresult = 0 ;
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< float,long > >::TI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::HeapArray< faiss::CMin< float,long > >::TI *)(arg1)->get_ids(arg2);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1heapify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  (arg1)->heapify();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1addn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jint jarg4, jlong jarg5, jint jarg6) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< float,long > >::TI arg4 ;
  size_t arg5 ;
  long arg6 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::HeapArray< faiss::CMin< float,long > >::TI)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (long)jarg6; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMin< float,long > >::T const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1addn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jint jarg4, jlong jarg5) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< float,long > >::TI arg4 ;
  size_t arg5 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::HeapArray< faiss::CMin< float,long > >::TI)jarg4; 
  arg5 = (size_t)jarg5; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMin< float,long > >::T const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1addn_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jint jarg4) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< float,long > >::TI arg4 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::HeapArray< faiss::CMin< float,long > >::TI)jarg4; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMin< float,long > >::T const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1addn_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< float,long > >::T *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMin< float,long > >::T const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1addn_1with_1ids_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jintArray jarg4, jint jarg5, jlong jarg6, jint jarg7) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< float,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMin< float,long > >::TI *) 0 ;
  long arg5 ;
  size_t arg6 ;
  long arg7 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (long)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (long)jarg7; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMin< float,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMin< float,long > >::TI const *)arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1addn_1with_1ids_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jintArray jarg4, jint jarg5, jlong jarg6) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< float,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMin< float,long > >::TI *) 0 ;
  long arg5 ;
  size_t arg6 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (long)jarg5; 
  arg6 = (size_t)jarg6; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMin< float,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMin< float,long > >::TI const *)arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1addn_1with_1ids_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jintArray jarg4, jint jarg5) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< float,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMin< float,long > >::TI *) 0 ;
  long arg5 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (long)jarg5; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMin< float,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMin< float,long > >::TI const *)arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1addn_1with_1ids_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< float,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMin< float,long > >::TI *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMin< float,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMin< float,long > >::TI const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1addn_1with_1ids_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< float,long > >::T *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMin< float,long > >::T const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1reorder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  (arg1)->reorder();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1minheap_1array_1t_1per_1line_1extrema(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jintArray jarg3) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  faiss::HeapArray< faiss::CMin< float,long > >::T *arg2 = (faiss::HeapArray< faiss::CMin< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< float,long > >::TI *arg3 = (faiss::HeapArray< faiss::CMin< float,long > >::TI *) 0 ;
  jfloat *jarr2 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return ; 
  ((faiss::HeapArray< faiss::CMin< float,long > > const *)arg1)->per_line_extrema(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1float_1minheap_1array_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HeapArray< faiss::CMin< float,long > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HeapArray< faiss::CMin< float,long > > *)new faiss::HeapArray< faiss::CMin< float,long > >();
  *(faiss::HeapArray< faiss::CMin< float,long > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1float_1minheap_1array_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HeapArray< faiss::CMin< float,long > > *arg1 = (faiss::HeapArray< faiss::CMin< float,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HeapArray< faiss::CMin< float,long > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1nh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nh = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1nh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  result = (size_t) ((arg1)->nh);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1k_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->k = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1k_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  result = (size_t) ((arg1)->k);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1ids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  faiss::HeapArray< faiss::CMin< int,long > >::TI *arg2 = (faiss::HeapArray< faiss::CMin< int,long > >::TI *) 0 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->ids = arg2;
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1ids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  faiss::HeapArray< faiss::CMin< int,long > >::TI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  result = (faiss::HeapArray< faiss::CMin< int,long > >::TI *) ((arg1)->ids);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  faiss::HeapArray< faiss::CMin< int,long > >::T *arg2 = (faiss::HeapArray< faiss::CMin< int,long > >::T *) 0 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->val = arg2;
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  faiss::HeapArray< faiss::CMin< int,long > >::T *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  result = (faiss::HeapArray< faiss::CMin< int,long > >::T *) ((arg1)->val);
  jresult = SWIG_JavaArrayOutInt(jenv, (int *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1get_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jintArray jresult = 0 ;
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< int,long > >::T *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::HeapArray< faiss::CMin< int,long > >::T *)(arg1)->get_val(arg2);
  jresult = SWIG_JavaArrayOutInt(jenv, (int *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1get_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jintArray jresult = 0 ;
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< int,long > >::TI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::HeapArray< faiss::CMin< int,long > >::TI *)(arg1)->get_ids(arg2);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1heapify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  (arg1)->heapify();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1addn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jint jarg4, jlong jarg5, jint jarg6) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< int,long > >::TI arg4 ;
  size_t arg5 ;
  long arg6 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  arg4 = (faiss::HeapArray< faiss::CMin< int,long > >::TI)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (long)jarg6; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMin< int,long > >::T const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1addn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jint jarg4, jlong jarg5) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< int,long > >::TI arg4 ;
  size_t arg5 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  arg4 = (faiss::HeapArray< faiss::CMin< int,long > >::TI)jarg4; 
  arg5 = (size_t)jarg5; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMin< int,long > >::T const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1addn_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jint jarg4) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< int,long > >::TI arg4 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  arg4 = (faiss::HeapArray< faiss::CMin< int,long > >::TI)jarg4; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMin< int,long > >::T const *)arg3,arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1addn_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< int,long > >::T *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMin< int,long > >::T const *)arg3);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1addn_1with_1ids_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jintArray jarg4, jint jarg5, jlong jarg6, jint jarg7) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< int,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMin< int,long > >::TI *) 0 ;
  long arg5 ;
  size_t arg6 ;
  long arg7 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (long)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (long)jarg7; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMin< int,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMin< int,long > >::TI const *)arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1addn_1with_1ids_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jintArray jarg4, jint jarg5, jlong jarg6) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< int,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMin< int,long > >::TI *) 0 ;
  long arg5 ;
  size_t arg6 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (long)jarg5; 
  arg6 = (size_t)jarg6; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMin< int,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMin< int,long > >::TI const *)arg4,arg5,arg6);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1addn_1with_1ids_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jintArray jarg4, jint jarg5) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< int,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMin< int,long > >::TI *) 0 ;
  long arg5 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (long)jarg5; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMin< int,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMin< int,long > >::TI const *)arg4,arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1addn_1with_1ids_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jintArray jarg4) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< int,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMin< int,long > >::TI *) 0 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMin< int,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMin< int,long > >::TI const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1addn_1with_1ids_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMin< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMin< int,long > >::T *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMin< int,long > >::T const *)arg3);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1reorder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  (arg1)->reorder();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1minheap_1array_1t_1per_1line_1extrema(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  faiss::HeapArray< faiss::CMin< int,long > >::T *arg2 = (faiss::HeapArray< faiss::CMin< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMin< int,long > >::TI *arg3 = (faiss::HeapArray< faiss::CMin< int,long > >::TI *) 0 ;
  jint *jarr2 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return ; 
  ((faiss::HeapArray< faiss::CMin< int,long > > const *)arg1)->per_line_extrema(arg2,arg3);
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1int_1minheap_1array_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HeapArray< faiss::CMin< int,long > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HeapArray< faiss::CMin< int,long > > *)new faiss::HeapArray< faiss::CMin< int,long > >();
  *(faiss::HeapArray< faiss::CMin< int,long > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1int_1minheap_1array_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HeapArray< faiss::CMin< int,long > > *arg1 = (faiss::HeapArray< faiss::CMin< int,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HeapArray< faiss::CMin< int,long > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1nh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nh = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1nh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  result = (size_t) ((arg1)->nh);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1k_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->k = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1k_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  result = (size_t) ((arg1)->k);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1ids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  faiss::HeapArray< faiss::CMax< float,long > >::TI *arg2 = (faiss::HeapArray< faiss::CMax< float,long > >::TI *) 0 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->ids = arg2;
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1ids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  faiss::HeapArray< faiss::CMax< float,long > >::TI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  result = (faiss::HeapArray< faiss::CMax< float,long > >::TI *) ((arg1)->ids);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  faiss::HeapArray< faiss::CMax< float,long > >::T *arg2 = (faiss::HeapArray< faiss::CMax< float,long > >::T *) 0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->val = arg2;
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  faiss::HeapArray< faiss::CMax< float,long > >::T *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  result = (faiss::HeapArray< faiss::CMax< float,long > >::T *) ((arg1)->val);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1get_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloatArray jresult = 0 ;
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< float,long > >::T *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::HeapArray< faiss::CMax< float,long > >::T *)(arg1)->get_val(arg2);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1get_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jintArray jresult = 0 ;
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< float,long > >::TI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::HeapArray< faiss::CMax< float,long > >::TI *)(arg1)->get_ids(arg2);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1heapify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  (arg1)->heapify();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1addn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jint jarg4, jlong jarg5, jint jarg6) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< float,long > >::TI arg4 ;
  size_t arg5 ;
  long arg6 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::HeapArray< faiss::CMax< float,long > >::TI)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (long)jarg6; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMax< float,long > >::T const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1addn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jint jarg4, jlong jarg5) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< float,long > >::TI arg4 ;
  size_t arg5 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::HeapArray< faiss::CMax< float,long > >::TI)jarg4; 
  arg5 = (size_t)jarg5; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMax< float,long > >::T const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1addn_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jint jarg4) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< float,long > >::TI arg4 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  arg4 = (faiss::HeapArray< faiss::CMax< float,long > >::TI)jarg4; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMax< float,long > >::T const *)arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1addn_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< float,long > >::T *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMax< float,long > >::T const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1addn_1with_1ids_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jintArray jarg4, jint jarg5, jlong jarg6, jint jarg7) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< float,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMax< float,long > >::TI *) 0 ;
  long arg5 ;
  size_t arg6 ;
  long arg7 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (long)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (long)jarg7; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMax< float,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMax< float,long > >::TI const *)arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1addn_1with_1ids_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jintArray jarg4, jint jarg5, jlong jarg6) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< float,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMax< float,long > >::TI *) 0 ;
  long arg5 ;
  size_t arg6 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (long)jarg5; 
  arg6 = (size_t)jarg6; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMax< float,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMax< float,long > >::TI const *)arg4,arg5,arg6);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1addn_1with_1ids_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jintArray jarg4, jint jarg5) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< float,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMax< float,long > >::TI *) 0 ;
  long arg5 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (long)jarg5; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMax< float,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMax< float,long > >::TI const *)arg4,arg5);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1addn_1with_1ids_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3, jintArray jarg4) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< float,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMax< float,long > >::TI *) 0 ;
  jfloat *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMax< float,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMax< float,long > >::TI const *)arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1addn_1with_1ids_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloatArray jarg3) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< float,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< float,long > >::T *) 0 ;
  jfloat *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, (float **)&arg3, jarg3)) return ; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMax< float,long > >::T const *)arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, (float *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1reorder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  (arg1)->reorder();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_float_1maxheap_1array_1t_1per_1line_1extrema(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jintArray jarg3) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  faiss::HeapArray< faiss::CMax< float,long > >::T *arg2 = (faiss::HeapArray< faiss::CMax< float,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< float,long > >::TI *arg3 = (faiss::HeapArray< faiss::CMax< float,long > >::TI *) 0 ;
  jfloat *jarr2 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return ; 
  ((faiss::HeapArray< faiss::CMax< float,long > > const *)arg1)->per_line_extrema(arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1float_1maxheap_1array_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HeapArray< faiss::CMax< float,long > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HeapArray< faiss::CMax< float,long > > *)new faiss::HeapArray< faiss::CMax< float,long > >();
  *(faiss::HeapArray< faiss::CMax< float,long > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1float_1maxheap_1array_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HeapArray< faiss::CMax< float,long > > *arg1 = (faiss::HeapArray< faiss::CMax< float,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HeapArray< faiss::CMax< float,long > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1nh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nh = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1nh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  result = (size_t) ((arg1)->nh);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1k_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->k = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1k_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  result = (size_t) ((arg1)->k);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1ids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  faiss::HeapArray< faiss::CMax< int,long > >::TI *arg2 = (faiss::HeapArray< faiss::CMax< int,long > >::TI *) 0 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->ids = arg2;
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1ids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  faiss::HeapArray< faiss::CMax< int,long > >::TI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  result = (faiss::HeapArray< faiss::CMax< int,long > >::TI *) ((arg1)->ids);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  faiss::HeapArray< faiss::CMax< int,long > >::T *arg2 = (faiss::HeapArray< faiss::CMax< int,long > >::T *) 0 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->val = arg2;
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  faiss::HeapArray< faiss::CMax< int,long > >::T *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  result = (faiss::HeapArray< faiss::CMax< int,long > >::T *) ((arg1)->val);
  jresult = SWIG_JavaArrayOutInt(jenv, (int *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1get_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jintArray jresult = 0 ;
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< int,long > >::T *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::HeapArray< faiss::CMax< int,long > >::T *)(arg1)->get_val(arg2);
  jresult = SWIG_JavaArrayOutInt(jenv, (int *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1get_1ids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jintArray jresult = 0 ;
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< int,long > >::TI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (faiss::HeapArray< faiss::CMax< int,long > >::TI *)(arg1)->get_ids(arg2);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1heapify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  (arg1)->heapify();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1addn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jint jarg4, jlong jarg5, jint jarg6) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< int,long > >::TI arg4 ;
  size_t arg5 ;
  long arg6 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  arg4 = (faiss::HeapArray< faiss::CMax< int,long > >::TI)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (long)jarg6; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMax< int,long > >::T const *)arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1addn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jint jarg4, jlong jarg5) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< int,long > >::TI arg4 ;
  size_t arg5 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  arg4 = (faiss::HeapArray< faiss::CMax< int,long > >::TI)jarg4; 
  arg5 = (size_t)jarg5; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMax< int,long > >::T const *)arg3,arg4,arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1addn_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jint jarg4) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< int,long > >::TI arg4 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  arg4 = (faiss::HeapArray< faiss::CMax< int,long > >::TI)jarg4; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMax< int,long > >::T const *)arg3,arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1addn_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< int,long > >::T *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  (arg1)->addn(arg2,(faiss::HeapArray< faiss::CMax< int,long > >::T const *)arg3);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1addn_1with_1ids_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jintArray jarg4, jint jarg5, jlong jarg6, jint jarg7) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< int,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMax< int,long > >::TI *) 0 ;
  long arg5 ;
  size_t arg6 ;
  long arg7 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (long)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (long)jarg7; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMax< int,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMax< int,long > >::TI const *)arg4,arg5,arg6,arg7);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1addn_1with_1ids_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jintArray jarg4, jint jarg5, jlong jarg6) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< int,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMax< int,long > >::TI *) 0 ;
  long arg5 ;
  size_t arg6 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (long)jarg5; 
  arg6 = (size_t)jarg6; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMax< int,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMax< int,long > >::TI const *)arg4,arg5,arg6);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1addn_1with_1ids_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jintArray jarg4, jint jarg5) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< int,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMax< int,long > >::TI *) 0 ;
  long arg5 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  arg5 = (long)jarg5; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMax< int,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMax< int,long > >::TI const *)arg4,arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1addn_1with_1ids_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jintArray jarg4) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< int,long > >::TI *arg4 = (faiss::HeapArray< faiss::CMax< int,long > >::TI *) 0 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMax< int,long > >::T const *)arg3,(faiss::HeapArray< faiss::CMax< int,long > >::TI const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1addn_1with_1ids_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  size_t arg2 ;
  faiss::HeapArray< faiss::CMax< int,long > >::T *arg3 = (faiss::HeapArray< faiss::CMax< int,long > >::T *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  (arg1)->addn_with_ids(arg2,(faiss::HeapArray< faiss::CMax< int,long > >::T const *)arg3);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1reorder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  (arg1)->reorder();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_int_1maxheap_1array_1t_1per_1line_1extrema(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  faiss::HeapArray< faiss::CMax< int,long > >::T *arg2 = (faiss::HeapArray< faiss::CMax< int,long > >::T *) 0 ;
  faiss::HeapArray< faiss::CMax< int,long > >::TI *arg3 = (faiss::HeapArray< faiss::CMax< int,long > >::TI *) 0 ;
  jint *jarr2 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return ; 
  ((faiss::HeapArray< faiss::CMax< int,long > > const *)arg1)->per_line_extrema(arg2,arg3);
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1int_1maxheap_1array_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::HeapArray< faiss::CMax< int,long > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::HeapArray< faiss::CMax< int,long > > *)new faiss::HeapArray< faiss::CMax< int,long > >();
  *(faiss::HeapArray< faiss::CMax< int,long > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1int_1maxheap_1array_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::HeapArray< faiss::CMax< int,long > > *arg1 = (faiss::HeapArray< faiss::CMax< int,long > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::HeapArray< faiss::CMax< int,long > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_omp_1set_1num_1threads(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  omp_set_num_threads(arg1);
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_omp_1get_1max_1threads(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)omp_get_max_threads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_memcpy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (void *)memcpy(arg1,(void const *)arg2,arg3);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_cast_1integer_1to_1float_1ptr(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jfloatArray jresult = 0 ;
  long arg1 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  result = (float *)cast_integer_to_float_ptr(arg1);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_cast_1integer_1to_1long_1ptr(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jintArray jresult = 0 ;
  long arg1 ;
  long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  result = (long *)cast_integer_to_long_ptr(arg1);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_cast_1integer_1to_1int_1ptr(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jintArray jresult = 0 ;
  long arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  result = (int *)cast_integer_to_int_ptr(arg1);
  jresult = SWIG_JavaArrayOutInt(jenv, (int *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchResult_1nq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::RangeSearchResult *arg1 = (faiss::RangeSearchResult *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchResult **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nq = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchResult_1nq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::RangeSearchResult *arg1 = (faiss::RangeSearchResult *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchResult **)&jarg1; 
  result = (size_t) ((arg1)->nq);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchResult_1lims_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::RangeSearchResult *arg1 = (faiss::RangeSearchResult *) 0 ;
  size_t *arg2 = (size_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchResult **)&jarg1; 
  arg2 = *(size_t **)&jarg2; 
  if (arg1) (arg1)->lims = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchResult_1lims_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::RangeSearchResult *arg1 = (faiss::RangeSearchResult *) 0 ;
  size_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchResult **)&jarg1; 
  result = (size_t *) ((arg1)->lims);
  *(size_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchResult_1labels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  faiss::RangeSearchResult *arg1 = (faiss::RangeSearchResult *) 0 ;
  faiss::RangeSearchResult::idx_t *arg2 = (faiss::RangeSearchResult::idx_t *) 0 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchResult **)&jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->labels = arg2;
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchResult_1labels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  faiss::RangeSearchResult *arg1 = (faiss::RangeSearchResult *) 0 ;
  faiss::RangeSearchResult::idx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchResult **)&jarg1; 
  result = (faiss::RangeSearchResult::idx_t *) ((arg1)->labels);
  jresult = SWIG_JavaArrayOutLong(jenv, (long *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchResult_1distances_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2) {
  faiss::RangeSearchResult *arg1 = (faiss::RangeSearchResult *) 0 ;
  float *arg2 = (float *) 0 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchResult **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->distances = arg2;
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jfloatArray JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchResult_1distances_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  faiss::RangeSearchResult *arg1 = (faiss::RangeSearchResult *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchResult **)&jarg1; 
  result = (float *) ((arg1)->distances);
  jresult = SWIG_JavaArrayOutFloat(jenv, (float *)result, FillMeInAsSizeCannotBeDeterminedAutomatically); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchResult_1buffer_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::RangeSearchResult *arg1 = (faiss::RangeSearchResult *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchResult **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->buffer_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchResult_1buffer_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::RangeSearchResult *arg1 = (faiss::RangeSearchResult *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchResult **)&jarg1; 
  result = (size_t) ((arg1)->buffer_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1RangeSearchResult_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  faiss::RangeSearchResult::idx_t arg1 ;
  bool arg2 ;
  faiss::RangeSearchResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::RangeSearchResult::idx_t)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (faiss::RangeSearchResult *)new faiss::RangeSearchResult(arg1,arg2);
  *(faiss::RangeSearchResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1RangeSearchResult_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  faiss::RangeSearchResult::idx_t arg1 ;
  faiss::RangeSearchResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::RangeSearchResult::idx_t)jarg1; 
  result = (faiss::RangeSearchResult *)new faiss::RangeSearchResult(arg1);
  *(faiss::RangeSearchResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchResult_1do_1allocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::RangeSearchResult *arg1 = (faiss::RangeSearchResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchResult **)&jarg1; 
  (arg1)->do_allocation();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1RangeSearchResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::RangeSearchResult *arg1 = (faiss::RangeSearchResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::RangeSearchResult **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IDSelector_1is_1member(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  faiss::IDSelector *arg1 = (faiss::IDSelector *) 0 ;
  faiss::IDSelector::idx_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IDSelector **)&jarg1; 
  arg2 = (faiss::IDSelector::idx_t)jarg2; 
  result = (bool)((faiss::IDSelector const *)arg1)->is_member(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IDSelector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IDSelector *arg1 = (faiss::IDSelector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IDSelector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IDSelectorRange_1imin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IDSelectorRange *arg1 = (faiss::IDSelectorRange *) 0 ;
  faiss::IDSelector::idx_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IDSelectorRange **)&jarg1; 
  arg2 = (faiss::IDSelector::idx_t)jarg2; 
  if (arg1) (arg1)->imin = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IDSelectorRange_1imin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IDSelectorRange *arg1 = (faiss::IDSelectorRange *) 0 ;
  faiss::IDSelector::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IDSelectorRange **)&jarg1; 
  result = (faiss::IDSelector::idx_t) ((arg1)->imin);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IDSelectorRange_1imax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IDSelectorRange *arg1 = (faiss::IDSelectorRange *) 0 ;
  faiss::IDSelector::idx_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IDSelectorRange **)&jarg1; 
  arg2 = (faiss::IDSelector::idx_t)jarg2; 
  if (arg1) (arg1)->imax = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IDSelectorRange_1imax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IDSelectorRange *arg1 = (faiss::IDSelectorRange *) 0 ;
  faiss::IDSelector::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IDSelectorRange **)&jarg1; 
  result = (faiss::IDSelector::idx_t) ((arg1)->imax);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IDSelectorRange(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  faiss::IDSelector::idx_t arg1 ;
  faiss::IDSelector::idx_t arg2 ;
  faiss::IDSelectorRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (faiss::IDSelector::idx_t)jarg1; 
  arg2 = (faiss::IDSelector::idx_t)jarg2; 
  result = (faiss::IDSelectorRange *)new faiss::IDSelectorRange(arg1,arg2);
  *(faiss::IDSelectorRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IDSelectorRange_1is_1member(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  faiss::IDSelectorRange *arg1 = (faiss::IDSelectorRange *) 0 ;
  faiss::IDSelector::idx_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IDSelectorRange **)&jarg1; 
  arg2 = (faiss::IDSelector::idx_t)jarg2; 
  result = (bool)((faiss::IDSelectorRange const *)arg1)->is_member(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IDSelectorRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IDSelectorRange *arg1 = (faiss::IDSelectorRange *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IDSelectorRange **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IDSelectorBatch_1nbits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IDSelectorBatch *arg1 = (faiss::IDSelectorBatch *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IDSelectorBatch **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nbits = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IDSelectorBatch_1nbits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IDSelectorBatch *arg1 = (faiss::IDSelectorBatch *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IDSelectorBatch **)&jarg1; 
  result = (int) ((arg1)->nbits);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IDSelectorBatch_1mask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  faiss::IDSelectorBatch *arg1 = (faiss::IDSelectorBatch *) 0 ;
  faiss::IDSelector::idx_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IDSelectorBatch **)&jarg1; 
  arg2 = (faiss::IDSelector::idx_t)jarg2; 
  if (arg1) (arg1)->mask = arg2;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IDSelectorBatch_1mask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IDSelectorBatch *arg1 = (faiss::IDSelectorBatch *) 0 ;
  faiss::IDSelector::idx_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IDSelectorBatch **)&jarg1; 
  result = (faiss::IDSelector::idx_t) ((arg1)->mask);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1IDSelectorBatch(JNIEnv *jenv, jclass jcls, jint jarg1, jintArray jarg2) {
  jlong jresult = 0 ;
  long arg1 ;
  faiss::IDSelector::idx_t *arg2 = (faiss::IDSelector::idx_t *) 0 ;
  jint *jarr2 ;
  faiss::IDSelectorBatch *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return 0; 
  result = (faiss::IDSelectorBatch *)new faiss::IDSelectorBatch(arg1,(faiss::IDSelector::idx_t const *)arg2);
  *(faiss::IDSelectorBatch **)&jresult = result; 
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IDSelectorBatch_1is_1member(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  faiss::IDSelectorBatch *arg1 = (faiss::IDSelectorBatch *) 0 ;
  faiss::IDSelector::idx_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IDSelectorBatch **)&jarg1; 
  arg2 = (faiss::IDSelector::idx_t)jarg2; 
  result = (bool)((faiss::IDSelectorBatch const *)arg1)->is_member(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IDSelectorBatch(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IDSelectorBatch *arg1 = (faiss::IDSelectorBatch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IDSelectorBatch **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_BufferList_1buffer_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::BufferList *arg1 = (faiss::BufferList *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::BufferList **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->buffer_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_BufferList_1buffer_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::BufferList *arg1 = (faiss::BufferList *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::BufferList **)&jarg1; 
  result = (size_t) ((arg1)->buffer_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_BufferList_1buffers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::BufferList *arg1 = (faiss::BufferList *) 0 ;
  std::vector< faiss::BufferList::Buffer > *arg2 = (std::vector< faiss::BufferList::Buffer > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::BufferList **)&jarg1; 
  arg2 = *(std::vector< faiss::BufferList::Buffer > **)&jarg2; 
  if (arg1) (arg1)->buffers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_BufferList_1buffers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::BufferList *arg1 = (faiss::BufferList *) 0 ;
  std::vector< faiss::BufferList::Buffer > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::BufferList **)&jarg1; 
  result = (std::vector< faiss::BufferList::Buffer > *)& ((arg1)->buffers);
  *(std::vector< faiss::BufferList::Buffer > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_BufferList_1wp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::BufferList *arg1 = (faiss::BufferList *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::BufferList **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->wp = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_BufferList_1wp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::BufferList *arg1 = (faiss::BufferList *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::BufferList **)&jarg1; 
  result = (size_t) ((arg1)->wp);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1BufferList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  faiss::BufferList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (faiss::BufferList *)new faiss::BufferList(arg1);
  *(faiss::BufferList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1BufferList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::BufferList *arg1 = (faiss::BufferList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::BufferList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_BufferList_1append_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::BufferList *arg1 = (faiss::BufferList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::BufferList **)&jarg1; 
  (arg1)->append_buffer();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_BufferList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  faiss::BufferList *arg1 = (faiss::BufferList *) 0 ;
  faiss::BufferList::idx_t arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::BufferList **)&jarg1; 
  arg2 = (faiss::BufferList::idx_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_BufferList_1copy_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jintArray jarg4, jfloatArray jarg5) {
  faiss::BufferList *arg1 = (faiss::BufferList *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  faiss::BufferList::idx_t *arg4 = (faiss::BufferList::idx_t *) 0 ;
  float *arg5 = (float *) 0 ;
  jint *jarr4 ;
  jfloat *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::BufferList **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr5, (float **)&arg5, jarg5)) return ; 
  (arg1)->copy_range(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  SWIG_JavaArrayArgoutFloat(jenv, jarr5, (float *)arg5, jarg5); 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchPartialResult_1res_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::RangeSearchPartialResult *arg1 = (faiss::RangeSearchPartialResult *) 0 ;
  faiss::RangeSearchResult *arg2 = (faiss::RangeSearchResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::RangeSearchPartialResult **)&jarg1; 
  arg2 = *(faiss::RangeSearchResult **)&jarg2; 
  if (arg1) (arg1)->res = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchPartialResult_1res_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::RangeSearchPartialResult *arg1 = (faiss::RangeSearchPartialResult *) 0 ;
  faiss::RangeSearchResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchPartialResult **)&jarg1; 
  result = (faiss::RangeSearchResult *) ((arg1)->res);
  *(faiss::RangeSearchResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1RangeSearchPartialResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::RangeSearchResult *arg1 = (faiss::RangeSearchResult *) 0 ;
  faiss::RangeSearchPartialResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchResult **)&jarg1; 
  result = (faiss::RangeSearchPartialResult *)new faiss::RangeSearchPartialResult(arg1);
  *(faiss::RangeSearchPartialResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchPartialResult_1queries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::RangeSearchPartialResult *arg1 = (faiss::RangeSearchPartialResult *) 0 ;
  std::vector< faiss::RangeSearchPartialResult::QueryResult > *arg2 = (std::vector< faiss::RangeSearchPartialResult::QueryResult > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchPartialResult **)&jarg1; 
  arg2 = *(std::vector< faiss::RangeSearchPartialResult::QueryResult > **)&jarg2; 
  if (arg1) (arg1)->queries = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchPartialResult_1queries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::RangeSearchPartialResult *arg1 = (faiss::RangeSearchPartialResult *) 0 ;
  std::vector< faiss::RangeSearchPartialResult::QueryResult > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchPartialResult **)&jarg1; 
  result = (std::vector< faiss::RangeSearchPartialResult::QueryResult > *)& ((arg1)->queries);
  *(std::vector< faiss::RangeSearchPartialResult::QueryResult > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchPartialResult_1new_1result(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  faiss::RangeSearchPartialResult *arg1 = (faiss::RangeSearchPartialResult *) 0 ;
  faiss::BufferList::idx_t arg2 ;
  faiss::RangeSearchPartialResult::QueryResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchPartialResult **)&jarg1; 
  arg2 = (faiss::BufferList::idx_t)jarg2; 
  result = (faiss::RangeSearchPartialResult::QueryResult *) &(arg1)->new_result(arg2);
  *(faiss::RangeSearchPartialResult::QueryResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchPartialResult_1finalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::RangeSearchPartialResult *arg1 = (faiss::RangeSearchPartialResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchPartialResult **)&jarg1; 
  (arg1)->finalize();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchPartialResult_1set_1lims(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::RangeSearchPartialResult *arg1 = (faiss::RangeSearchPartialResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchPartialResult **)&jarg1; 
  (arg1)->set_lims();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchPartialResult_1set_1result_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  faiss::RangeSearchPartialResult *arg1 = (faiss::RangeSearchPartialResult *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchPartialResult **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_result(arg2);
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchPartialResult_1set_1result_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  faiss::RangeSearchPartialResult *arg1 = (faiss::RangeSearchPartialResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::RangeSearchPartialResult **)&jarg1; 
  (arg1)->set_result();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1RangeSearchPartialResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::RangeSearchPartialResult *arg1 = (faiss::RangeSearchPartialResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::RangeSearchPartialResult **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IOReader_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  faiss::IOReader *arg1 = (faiss::IOReader *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IOReader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IOReader_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  faiss::IOReader *arg1 = (faiss::IOReader *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IOReader **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IOReader_1fileno(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IOReader *arg1 = (faiss::IOReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IOReader **)&jarg1; 
  result = (int)(arg1)->fileno();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IOReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IOReader *arg1 = (faiss::IOReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IOReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IOWriter_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  faiss::IOWriter *arg1 = (faiss::IOWriter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IOWriter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IOWriter_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  faiss::IOWriter *arg1 = (faiss::IOWriter *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IOWriter **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IOWriter_1fileno(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  faiss::IOWriter *arg1 = (faiss::IOWriter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::IOWriter **)&jarg1; 
  result = (int)(arg1)->fileno();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1IOWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::IOWriter *arg1 = (faiss::IOWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::IOWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorIOReader_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::VectorIOReader *arg1 = (faiss::VectorIOReader *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::VectorIOReader **)&jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorIOReader_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::VectorIOReader *arg1 = (faiss::VectorIOReader *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorIOReader **)&jarg1; 
  result = (std::vector< uint8_t > *)& ((arg1)->data);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorIOReader_1rp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  faiss::VectorIOReader *arg1 = (faiss::VectorIOReader *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorIOReader **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->rp = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorIOReader_1rp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::VectorIOReader *arg1 = (faiss::VectorIOReader *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorIOReader **)&jarg1; 
  result = (size_t) ((arg1)->rp);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1VectorIOReader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::VectorIOReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::VectorIOReader *)new faiss::VectorIOReader();
  *(faiss::VectorIOReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1VectorIOReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::VectorIOReader *arg1 = (faiss::VectorIOReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::VectorIOReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorIOWriter_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  faiss::VectorIOWriter *arg1 = (faiss::VectorIOWriter *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(faiss::VectorIOWriter **)&jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorIOWriter_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  faiss::VectorIOWriter *arg1 = (faiss::VectorIOWriter *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(faiss::VectorIOWriter **)&jarg1; 
  result = (std::vector< uint8_t > *)& ((arg1)->data);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1VectorIOWriter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  faiss::VectorIOWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (faiss::VectorIOWriter *)new faiss::VectorIOWriter();
  *(faiss::VectorIOWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1VectorIOWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  faiss::VectorIOWriter *arg1 = (faiss::VectorIOWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(faiss::VectorIOWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ignore_1SIGTTIN(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ignore_SIGTTIN();
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MapLong2Long_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MapLong2Long *arg1 = (MapLong2Long *) 0 ;
  std::unordered_map< long,long > arg2 ;
  std::unordered_map< long,long > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MapLong2Long **)&jarg1; 
  argp2 = *(std::unordered_map< long,long > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::unordered_map< long,long >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->map = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MapLong2Long_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MapLong2Long *arg1 = (MapLong2Long *) 0 ;
  std::unordered_map< long,long > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MapLong2Long **)&jarg1; 
  result =  ((arg1)->map);
  *(std::unordered_map< long,long > **)&jresult = new std::unordered_map< long,long >((const std::unordered_map< long,long > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MapLong2Long_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jintArray jarg4) {
  MapLong2Long *arg1 = (MapLong2Long *) 0 ;
  size_t arg2 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MapLong2Long **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->add(arg2,(long const *)arg3,(long const *)arg4);
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT jint JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MapLong2Long_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  MapLong2Long *arg1 = (MapLong2Long *) 0 ;
  long arg2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MapLong2Long **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (long)(arg1)->search(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MapLong2Long_1search_1multiple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jintArray jarg3, jintArray jarg4) {
  MapLong2Long *arg1 = (MapLong2Long *) 0 ;
  size_t arg2 ;
  long *arg3 = (long *) 0 ;
  long *arg4 = (long *) 0 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MapLong2Long **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr3, (long **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInLong(jenv, &jarr4, (long **)&arg4, jarg4)) return ; 
  (arg1)->search_multiple(arg2,(long const *)arg3,arg4);
  SWIG_JavaArrayArgoutLong(jenv, jarr3, (long *)arg3, jarg3); 
  SWIG_JavaArrayArgoutLong(jenv, jarr4, (long *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_new_1MapLong2Long(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MapLong2Long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MapLong2Long *)new MapLong2Long();
  *(MapLong2Long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_delete_1MapLong2Long(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MapLong2Long *arg1 = (MapLong2Long *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MapLong2Long **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Clustering_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::ClusteringParameters **)&baseptr = *(faiss::Clustering **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_LinearTransform_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::VectorTransform **)&baseptr = *(faiss::LinearTransform **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RandomRotationMatrix_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::LinearTransform **)&baseptr = *(faiss::RandomRotationMatrix **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PCAMatrix_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::LinearTransform **)&baseptr = *(faiss::PCAMatrix **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OPQMatrix_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::LinearTransform **)&baseptr = *(faiss::OPQMatrix **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RemapDimensionsTransform_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::VectorTransform **)&baseptr = *(faiss::RemapDimensionsTransform **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_NormalizationTransform_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::VectorTransform **)&baseptr = *(faiss::NormalizationTransform **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPreTransform_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::Index **)&baseptr = *(faiss::IndexPreTransform **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::Index **)&baseptr = *(faiss::IndexFlat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlatIP_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexFlat **)&baseptr = *(faiss::IndexFlatIP **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlatL2_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexFlat **)&baseptr = *(faiss::IndexFlatL2 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlatL2BaseShift_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexFlatL2 **)&baseptr = *(faiss::IndexFlatL2BaseShift **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexRefineFlat_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::Index **)&baseptr = *(faiss::IndexRefineFlat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexFlat1D_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexFlatL2 **)&baseptr = *(faiss::IndexFlat1D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexLSH_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::Index **)&baseptr = *(faiss::IndexLSH **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ReproduceDistancesObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::PermutationObjective **)&baseptr = *(faiss::ReproduceDistancesObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_SimulatedAnnealingOptimizer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::SimulatedAnnealingParameters **)&baseptr = *(faiss::SimulatedAnnealingOptimizer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_PolysemousTraining_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::SimulatedAnnealingParameters **)&baseptr = *(faiss::PolysemousTraining **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexPQ_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::Index **)&baseptr = *(faiss::IndexPQ **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::Index **)&baseptr = *(faiss::MultiIndexQuantizer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_MultiIndexQuantizer2_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::MultiIndexQuantizer **)&baseptr = *(faiss::MultiIndexQuantizer2 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ArrayInvertedLists_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::InvertedLists **)&baseptr = *(faiss::ArrayInvertedLists **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_ConcatenatedInvertedLists_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::InvertedLists **)&baseptr = *(faiss::ConcatenatedInvertedLists **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVF_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::Index **)&baseptr = *(faiss::IndexIVF **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexScalarQuantizer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::Index **)&baseptr = *(faiss::IndexScalarQuantizer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFScalarQuantizer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexIVF **)&baseptr = *(faiss::IndexIVFScalarQuantizer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::Index **)&baseptr = *(faiss::IndexHNSW **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSWFlat_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexHNSW **)&baseptr = *(faiss::IndexHNSWFlat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSWPQ_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexHNSW **)&baseptr = *(faiss::IndexHNSWPQ **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSWSQ_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexHNSW **)&baseptr = *(faiss::IndexHNSWSQ **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexHNSW2Level_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexHNSW **)&baseptr = *(faiss::IndexHNSW2Level **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlat_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexIVF **)&baseptr = *(faiss::IndexIVFFlat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFFlatDedup_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexIVFFlat **)&baseptr = *(faiss::IndexIVFFlatDedup **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OnDiskInvertedLists_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::InvertedLists **)&baseptr = *(faiss::OnDiskInvertedLists **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IVFPQSearchParameters_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IVFSearchParameters **)&baseptr = *(faiss::IVFPQSearchParameters **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQ_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexIVF **)&baseptr = *(faiss::IndexIVFPQ **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIVFPQR_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexIVFPQ **)&baseptr = *(faiss::IndexIVFPQR **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_Index2Layer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::Index **)&baseptr = *(faiss::Index2Layer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFlat_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexBinary **)&baseptr = *(faiss::IndexBinaryFlat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryIVF_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexBinary **)&baseptr = *(faiss::IndexBinaryIVF **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryFromFloat_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexBinary **)&baseptr = *(faiss::IndexBinaryFromFloat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexBinaryHNSW_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexBinary **)&baseptr = *(faiss::IndexBinaryHNSW **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::Index **)&baseptr = *(faiss::IndexIDMap **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexIDMap2_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IndexIDMap **)&baseptr = *(faiss::IndexIDMap2 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexShards_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::Index **)&baseptr = *(faiss::IndexShards **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IndexSplitVectors_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::Index **)&baseptr = *(faiss::IndexSplitVectors **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_OneRecallAtRCriterion_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::AutoTuneCriterion **)&baseptr = *(faiss::OneRecallAtRCriterion **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IntersectionCriterion_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::AutoTuneCriterion **)&baseptr = *(faiss::IntersectionCriterion **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IDSelectorRange_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IDSelector **)&baseptr = *(faiss::IDSelectorRange **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_IDSelectorBatch_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IDSelector **)&baseptr = *(faiss::IDSelectorBatch **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_RangeSearchPartialResult_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::BufferList **)&baseptr = *(faiss::RangeSearchPartialResult **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorIOReader_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IOReader **)&baseptr = *(faiss::VectorIOReader **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_thenetcircle_services_faiss_swigfaissJNI_VectorIOWriter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(faiss::IOWriter **)&baseptr = *(faiss::VectorIOWriter **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

